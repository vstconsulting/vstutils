default:
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v3
  cache: &global_cache
    paths:
      - node_modules/
      - yarn/
    policy: pull


variables:
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'CRITICAL'
  TOX_ARGS: "--workdir /cache/.tox_vstutils_${CI_COMMIT_REF_NAME}"
  CC: "ccache gcc"
  UWSGI_PROFILE: "minimal"

stages:
  - code_standarts
  - test
  - release
  - post_release


.branch_tests_template: &branch_tests
  stage: test
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v3
  coverage: '/\d+\%\s*$/'
  variables:
    TOX_ENVS: ""
    YARN_CACHE_FOLDER: "${CI_PROJECT_DIR}/yarn"
  before_script:
    - >
      if [ "${CI_COMMIT_REF_NAME}" != "master" -a "${CI_COMMIT_REF_NAME}" != "developer" ]; then
        export TOX_ARGS="--workdir /tmp/.tox_vstutils_${CI_COMMIT_REF_NAME}";
        unset BUILD_OPTIMIZATION;
      fi
    - if [ "${TOX_ENVS}" ]; then export TOX_ARGS="${TOX_ARGS} -e ${TOX_ENVS}"; fi
  script:
   - tox $TOX_ARGS
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH =~ /^release_/'
      when: on_success
    - if: '($CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH !~ /^release_/) && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "external_pull_request_event")'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null'
      when: on_success
    - when: never

.js_tests_template: &branch_js_tests
  <<: *branch_tests
  image: registry.gitlab.com/vstconsulting/images:node18-tests
  before_script:
    - yarn install --pure-lockfile --mutex network
  script:
    - yarn test

code_style:
  <<: *branch_tests
  stage: code_standarts
  parallel:
    matrix:
      - TOX_ENVS:
          - flake,bandit
          - mypy,pylint

js_style:
  <<: *branch_js_tests
  stage: code_standarts
  cache:
    <<: *global_cache
    policy: pull-push
  script:
    - yarn lint

functional_test:
  <<: *branch_tests
  parallel:
    matrix:
      - TOX_ENVS:
          - py310-django50-install
      - TOX_ENVS:
          - py312-django50-coverage

js_tests:
  <<: *branch_js_tests
  needs: ["js_style"]
  coverage: '/^Statements\s*:\s*([^%]+)/'
  script:
    - yarn test


pages:
  <<: *branch_tests
  stage: release
  variables:
    TOX_ENVS: "builddoc"
  script:
    - tox -e $TOX_ENVS $TOX_ARGS
    - mv -v doc/_build/html public
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

release:
  stage: release
  cache: {}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $GIT_ACCESS_USER && $GIT_ACCESS_PASSWORD'
      when: on_success
    - if: '$CI_COMMIT_BRANCH =~ /^release_/ && $GIT_ACCESS_USER && $GIT_ACCESS_PASSWORD'
      when: on_success
    - when: never
  before_script:
    - url_host=`echo "${CI_REPOSITORY_URL}" | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin "https://${GIT_ACCESS_USER}:${GIT_ACCESS_PASSWORD}@${url_host}"
  script:
    - bash autorelease.sh

release_packages:
  stage: release
  image: registry.gitlab.com/vstconsulting/images:ubuntu-v3
  artifacts:
    reports:
      dotenv: variables.env
  rules:
    - if: '$CI_COMMIT_TAG && $PYPI_UPLOAD_PASSWORD && $PYPI_UPLOAD_NAME && $NPM_TOKEN'
      when: on_success
    - when: never
  script:
    - echo MILESTONE=${CI_COMMIT_TAG%.*} > variables.env
    - tox -e build
    - yarn build-lib
    # pypi
    - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} $(find dist/* -type f -name '*.tar.gz') $(find dist/* -type f -name '*.whl')
    # npm
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}'>.npmrc
    - npm publish --access public
  allow_failure: true

release_job:
  stage: post_release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: release_packages
      artifacts: true
  rules:
    - if: '$CI_COMMIT_TAG && $PYPI_UPLOAD_PASSWORD && $PYPI_UPLOAD_NAME'
      when: on_success
    - when: never
  script:
    - echo "running release job for ${CI_COMMIT_TAG}"
  release:
    name: "${CI_COMMIT_TAG}"
    description: "${CI_COMMIT_DESCRIPTION}"
    tag_name: "${CI_COMMIT_TAG}"
    ref: "${CI_COMMIT_SHA}"
    milestones:
      - "${MILESTONE}"
    assets:
      links:
        - name: 'PyPI'
          url: "https://pypi.org/project/vstutils/${CI_COMMIT_TAG}/"
          link_type: 'other'
        - name: 'npm'
          url: "https://www.npmjs.com/package/@vstconsulting/vstutils/v/${CI_COMMIT_TAG}"
          link_type: 'other'
