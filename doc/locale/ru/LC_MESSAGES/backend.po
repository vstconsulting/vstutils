# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2022, VST Consulting
# This file is distributed under the same license as the VST Utils package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: VST Utils 5.0.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-12 01:25+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../../backend.rst:2
msgid "Backend API manual"
msgstr "Руководство по серверному API"

#: ../../backend.rst:4
msgid ""
"VST Utils framework uses Django, Django Rest Framework, drf-yasg and "
"Celery."
msgstr ""
"Фреймворк VST Utils использует Django, Django Rest Framework, drf-yasg и "
"Celery."

#: ../../backend.rst:7
msgid "Models"
msgstr "Модели"

#: ../../backend.rst:9
msgid ""
"A model is the single, definitive source of truth about your data. It "
"contains essential fields and behavior for the data you’re storing. "
"Usually best practice is to avoid writing views and serializers manually,"
" as BModel provides plenty of Meta attributes to autogenerate serializers"
" and views for many use cases."
msgstr ""
"Модель - это единственный и окончательный источник истины о ваших данных."
" Она содержит основные поля и поведение для данных, которые вы храните. "
"Хорошей практикой считается избегать написания собственных view и "
"сериализаторов, поскольку BModel предоставляет богатый набор "
"мета-атрибутов для их автоматической генерации в большинстве ситуаций."

#: of vstutils.models:1
msgid "Default Django model classes overrides in `vstutils.models` module."
msgstr ""
"Переопределение стандартных классов моделей Django в модуле "
"`vstutils.models`."

#: of vstutils.models.BModel:1
msgid ""
"Default model class that generates model viewset, separate serializers "
"for list() and retrieve(), filters, api endpoints and nested views."
msgstr ""
"Стандартный класс модели, генерирующий viewset, отдельные сериализаторы "
"для list() и retrieve(), фильтры, api endpoint-ы и вложенные view."

#: of vstutils.api.actions.Action:5 vstutils.api.actions.EmptyAction:9
#: vstutils.api.actions.SimpleAction:20 vstutils.api.actions.SimpleFileAction:7
#: vstutils.api.base.ModelViewSet:31 vstutils.api.fields.DeepFkField:37
#: vstutils.api.fields.FkField:37 vstutils.models.BModel:162
#: vstutils.models.BModel:187 vstutils.models.custom_model.FileModel:20
#: vstutils.models.custom_model.ListModel:16
#: vstutils.models.custom_model.ListModel:35
msgid "Examples:"
msgstr "Примеры:"

#: of vstutils.models.BModel:55
msgid ""
"In this case, you create models which could converted to simple view, "
"where:"
msgstr ""
"В данном случае создаются модели, которые затем будут конвертированы во "
"view, где:"

#: of vstutils.models.BModel:57
msgid ""
"``POST``/``GET`` to ``/api/version/task/`` - creates new or get list of "
"tasks"
msgstr ""
"``POST``/``GET`` на ``/api/version/task/`` - создает новую задачу или "
"получает список всех задач"

#: of vstutils.models.BModel:58
msgid ""
"``PUT``/``PATCH``/``GET``/``DELETE`` to ``/api/version/task/:id/`` - "
"updates, retrieves or removes instance of task"
msgstr ""
"``PUT``/``PATCH``/``GET``/``DELETE`` на ``/api/version/task/:id/`` - "
"обновляет, получает или удаляет экземпляр задачи"

#: of vstutils.models.BModel:59
msgid ""
"``POST``/``GET`` to ``/api/version/task/:id/stage/`` - creates new or get"
" list of stages in task"
msgstr ""
"``POST``/``GET`` to ``/api/version/task/:id/stage/`` - создает новую "
"стадию или получает список всех стадий в задаче"

#: of vstutils.models.BModel:60
msgid ""
"``PUT``/``PATCH``/``GET``/``DELETE`` to "
"``/api/version/task/:id/stage/:stage_id`` - updates, retrieves or removes"
" instance of stage in task."
msgstr ""
"``PUT``/``PATCH``/``GET``/``DELETE`` на "
"``/api/version/task/:id/stage/:stage_id`` - обновляет, получает или "
"удаляет экземпляр стадии в задаче."

#: of vstutils.models.BModel:63
msgid "To attach a view to an API insert the following code in `settings.py`:"
msgstr "Чтобы добавить view к API, вставьте следующий код в `settings.py`:"

#: of vstutils.models.BModel:71
msgid ""
"For primary access to generated view inherit from `Task.generated_view` "
"property."
msgstr ""
"Для первичного доступа к сгенерированному view, наследуйтесь от свойства "
"`Task.generated_view`."

#: of vstutils.models.BModel:73
msgid ""
"To make translation on frontend easier use ``_translate_model`` attribute"
" with model_name."
msgstr ""
"Чтобы упростить процесс перевода на фронтенде, используйте атрибут "
"``_translate_model`` вместе с названием модели."

#: of vstutils.models.BModel:75
msgid "List of meta-attributes for generating a view:"
msgstr "Список мета-атрибутов для генерации view:"

#: of vstutils.models.BModel:77
msgid ""
"``_view_class`` - list of additional view classes to inherit from, class "
"or string to import with base class ViewSet. Constants are also "
"supported:"
msgstr ""
"``_view_class`` - список дополнительных классов view для наследования. "
"Класс, унаследованный от ViewSet или строка для его импорта. Константы "
"также поддерживаются:"

#: of vstutils.models.BModel:81
msgid "``read_only`` - to create a view only for viewing;"
msgstr "``read_only`` - для создания view, поддерживающего только просмотр;"

#: of vstutils.models.BModel:82
msgid "``list_only`` - to create a view with list only;"
msgstr "``list_only`` - для создания view, поддерживающего только список;"

#: of vstutils.models.BModel:83
msgid "``history`` - to create a view only for viewing and deleting records."
msgstr ""
"``history`` - для создания view, поддерживающего только просмотр и "
"удаление записей."

#: of vstutils.models.BModel:85
msgid "CRUD-view is applied by default."
msgstr "Представление, поддерживающее все CRUD-операции, применяется по умолчанию."

#: of vstutils.models.BModel:87
msgid ""
"``_serializer_class`` - class of API serializer; use this attribute to "
"specify parent class for autogenerated serializers. Default is "
":class:`vstutils.api.serializers.VSTSerializer`. Can take a string to "
"import, serializer class or "
":class:`django.utils.functional.SimpleLazyObject`."
msgstr ""
"``_serializer_class`` - класс API сериализатора; используйте этот "
"атрибут, чтобы указать родительский класс автоматически сгенерированных "
"сериализаторов. По умолчанию используется "
":class:`vstutils.api.serializers.VSTSerializer`. Принимает строку для "
"импорта, класс сериализатора или "
":class:`django.utils.functional.SimpleLazyObject`."

#: of vstutils.models.BModel:90
msgid ""
"``_serializer_class_name`` - model name for OpenAPI definitions.This "
"would be a model name in generated admin interface. Default is name of "
"model class."
msgstr ""
"``_serializer_class_name`` - название модели для OpenAPI definitions. Это"
" название будет в сгенерированном интерфейсе администратора. По умолчанию"
" используется имя класса."

#: of vstutils.models.BModel:92
msgid ""
"``_list_fields`` or ``_detail_fields`` - list of fields which will be "
"listed in entity list or detail view accordingly. Same as DRF serializers"
" meta-attribute \"fields\"."
msgstr ""
"``_list_fields`` или ``_detail_fields`` - список полей, которые будут "
"отображены в списке или детальной записи соответственно. То же, что и "
"мета-атрибут \"fields\" в сериализаторах DRF."

#: of vstutils.models.BModel:94
msgid ""
"``_override_list_fields`` or ``_override_detail_fields`` - mapping with "
"names and field types that will be redeclared in serializer "
"attributes(think of it as declaring fields in DRF ModelSerializer)."
msgstr ""
"``_override_list_fields`` или ``_override_detail_fields`` -  "
"сопоставление имен и типов полей, которые будут переопределены в "
"атрибутах сериализатора (думайте об этом как о переопределении полей в "
"ModelSerializer из DRF)."

#: of vstutils.models.BModel:96
msgid ""
"``_properties_groups`` - dict with key as group name and value as list of"
" fields(str). Allows to group fields in sections on frontend."
msgstr ""
"``_properties_groups`` - словарь, где ключами являются названия групп, а "
"значениями - списки полей (строки). Позволяет группировать поля в секции "
"на фронтенде."

#: of vstutils.models.BModel:98
msgid "``_view_field_name`` - name of field frontend shows as main view name."
msgstr ""
"``_view_field_name`` - поле, которое будет использовано для вывода "
"заголовка детальной записи."

#: of vstutils.models.BModel:99
msgid ""
"``_non_bulk_methods`` - list of methods which must not used via bulk "
"requests."
msgstr ""
"``_non_bulk_methods`` - список методов, которые не должны использовать "
"bulk для запросов."

#: of vstutils.models.BModel:100
msgid ""
"``_extra_serializer_classes`` - mapping with additional serializers in "
"viewset. For example, custom serializer, which will compute smth in "
"action (mapping name). Value can be string for import. Important note: "
"setting `model` attribute to None allows to use standard serializer "
"generation mechanism and get fields from a list or detail serializer (set"
" `__inject_from__` serializer's meta attribute to `list` or `detail` "
"accordingly). In some cases, it is required to pass the model to the "
"serializer. For these purposes, the constant `LAZY_MODEL` can be used as "
"a meta attribute. Each time the serializer is used, the exact model where"
" this serializer was declared will be set."
msgstr ""
"``_extra_serializer_classes`` - сопоставление с дополнительными "
"сериализаторами во viewset. Это может быть, например, сериализатор, "
"который будет вычислять что-то в действии (имя сопоставления). Значением "
"может быть строка для импорта. Важное замечание: при установке атрибута "
"`model` в значение None будет использован стандартный механизм генерации "
"сериализаторов, что позволит получить поля из list или detail "
"сериализаторов (установите мета-атрибут сериализатора `__inject_from__` в"
" `list` или `detail` соответственно). В некоторых случаях необходимо "
"передать модель в сериализатор. Для этих целей используйте константу "
"`LAZY_MODEL` в качестве мета-атрибута. Каждый раз, когда сериализатор "
"будет использован, конкретная модель, в которой он объявлен, будет "
"подставлена."

#: of vstutils.models.BModel:107
msgid ""
"``_filterset_fields`` - list/dict of filterset names for API-filtering. "
"Default is list of fields in list view. During processing a list of "
"fields checks for the presence of special field names and inherit "
"additional parent classes. If the list contains ``id``, class will "
"inherit from :class:`vstutils.api.filters.DefaultIDFilter`. If the list "
"contains ``name``, class will inherit from "
":class:`vstutils.api.filters.DefaultNameFilter`. If both conditions are "
"present, inheritance will be from all of the above classes. Possible "
"values include `list` of fields to filter or `dict` where key is a field "
"name and value is a Filter class. Dict extends attribute functionality "
"and provides ability to override filter field class (None value disables "
"overriding)."
msgstr ""
"``_filterset_fields`` - список или словарь имен filterset для "
"API-фильтрации. По умолчанию используется список полей list-view. При "
"обработке списка полей проверяет наличие специальных имен полей и "
"наследует дополнительные родительские классы. Если в списке есть ``id``, "
"класс будет наследован от :class:`vstutils.api.filters.DefaultIDFilter`. "
"Если есть ``name`` - от :class:`vstutils.api.filters.DefaultNameFilter`. "
"Если есть и ``id``,  и ``name``, то класс будет наследован от обоих. "
"Возможные значения включают `list` полей, которые нужно фильтровать, или "
"`dict`, где ключ - имя поля, а значение - класс Filter. Использование "
"словаря расширяет функциональность атрибута и дает возможность "
"переопределить класс фильтра для отдельных полей (значение None выключает"
" переопределение)."

#: of vstutils.models.BModel:116
msgid ""
"``_search_fields`` - tuple or list of fields using for search requests. "
"By default (or `None`) get all filterable fields in detail view."
msgstr ""
"``_search_fields`` - кортеж или список полей, которые должны "
"использоваться в поисковых запросах. По умолчанию (или если установлено "
"`None`) - все фильтруемые поля в detail view."

#: of vstutils.models.BModel:118
msgid ""
"``_copy_attrs`` - list of model-instance attributes indicates that object"
" is copyable with this attrs."
msgstr ""
"``_copy_attrs`` - список полей экземпляра модели, указывающий, что "
"экземпляр может быть скопирован с этими атрибутами."

#: of vstutils.models.BModel:119
msgid ""
"``_nested`` - key-value mapping with nested views (key - nested name, "
"kwargs for :class:`vstutils.api.decorators.nested_view` decorator but "
"supports ``model`` attribute as nested). ``model`` can be string for "
"import.  Use ``override_params`` when you need to override generated view"
" parameters for nested view (works only with ``model`` as view)."
msgstr ""
"``_nested`` - сопоставление ключ-значение вложенных view (ключ - имя "
"вложенного view, kwargs для декоратора "
":class:`vstutils.api.decorators.nested_view`, но поддерживает атрибут "
"``model`` в качестве вложенного). ``model`` может быть строкой для "
"импорта. Используйте параметр ``override_params`` в тех случаях, когда "
"необходимо перегрузить параметры генерируемого представления в качестве "
"вложенного (работает только когда задан ``model`` как вложенное "
"представление)."

#: of vstutils.models.BModel:123
msgid ""
"``_extra_view_attributes`` - key-value mapping with additional view "
"attributes, but has less priority over generated attributes."
msgstr ""
"``_extra_view_attributes`` - сопоставление ключ-значение дополнительных "
"атрибутов view, имеет меньший приоритет перед сгенерированными "
"атрибутами."

#: of vstutils.models.BModel:127
msgid ""
"In common, you can also add custom attributes to override or extend the "
"default list of processing classes. Supported view attributes are "
"``filter_backends``, ``permission_classes``, ``authentication_classes``, "
"``throttle_classes``, ``renderer_classes`` and ``parser_classes``. List "
"of meta-attributes for settings of view is looks like:"
msgstr ""
"Как правило, вы также можете добавить другие атрибуты для переопределения"
" или расширения списка классов обработки по умолчанию. Поддерживаются "
"``filter_backends``, ``permission_classes``, ``authentication_classes``, "
"``throttle_classes``, ``renderer_classes`` и ``parser_classes``. Список  "
"мета-атрибутов для настройки выглядит так:"

#: of vstutils.models.BModel:132
msgid "``_pre_{attribute}`` - List of classes included before defaults."
msgstr "``_pre_{attribute}`` - Список классов, включаемых до классов по умолчанию."

#: of vstutils.models.BModel:133
msgid "``_{attribute}`` - List of classes included after defaults."
msgstr "``_{attribute}`` - Список классов, включаемых после классов по умолчанию."

#: of vstutils.models.BModel:134
msgid ""
"``_override_{attribute}`` - boolean flag indicates that attribute "
"override default viewset (otherwise appends). Default is ``False``."
msgstr ""
"``_override_{attribute}`` - булев флаг, указывающий, что атрибут "
"переопределяет стандартный viewset (в противном случае расширяет). По "
"умолчанию: ``False``."

#: of vstutils.models.BModel:138
msgid ""
"You may need to create an `action <https://www.django-rest-framework.org"
"/api-guide/viewsets/#marking-extra-actions-for-routing>`_ on generated "
"view. Use :class:`vstutils.models.decorators.register_view_action` "
"decorator with the ``detail`` argument to determine applicability to a "
"list or detail entry. In this case, the decorated method will take an "
"instance of the view object as ``self`` attribute."
msgstr ""
"Возможно, вам потребуется создать `экшен <https://www.django-rest-"
"framework.org/api-guide/viewsets/#marking-extra-actions-for-routing>`_ в "
"сгенерированном view. Используйте декоратор "
":class:`vstutils.models.decorators.register_view_action` с аргументом "
"``detail``, чтобы применить его к списку или детальной записи. В этом "
"случае декорированный метод будет принимать экземпляр view в ``self``."

#: of vstutils.models.BModel:145
msgid ""
"In some cases, inheriting models may require to inherit Meta class from "
"the base model. If the Meta is explicitly declared in the base class, "
"then you can get it through the attribute `OriginalMeta` and use it for "
"inheritance."
msgstr ""
"В некоторых случаях, наследование модели может также требовать "
"наследования класса Meta базовой модели. Если Meta явно объявлен в "
"базовом классе, то вы можете получить его с помощью атрибута "
"`OriginalMeta` и использовать его для наследования."

#: of vstutils.models.BModel:150
msgid ""
"Docstring of model will be reused for view descriptions. It is possible "
"to write both a general description for all actions and description for "
"each action using the following syntax:"
msgstr ""
"Строка документации модели будет переиспользована для описания view. Есть"
" возможность сделать общее описание для всех экшенов и описание для "
"каждого отдельно, используя следующий синтаксис:"

#: of vstutils.models.BModel:164
msgid ""
"The ``get_view_class()`` method is a utility method in the Django ORM "
"model designed to facilitate the configuration and instantiation of "
"Django Rest Framework (DRF) Generic ViewSets. It allows developers to "
"define and customize various aspects of the associated DRF view class."
msgstr ""
"Метод ``get_view_class()`` — это служебный метод в ORM Django моделях, "
"предназначенный для облегчения настройки и создания экземпляров "
"представлений Django Rest Framework (DRF). Это позволяет разработчикам "
"определить и настроить различные аспекты класса представления DRF."

#: of vstutils.models.BModel:189
msgid ""
"Developers can use this method to customize various aspects of the "
"associated view, such as serializer classes, field configurations, filter"
" backends, permission classes, etc. It uses attributes declared in meta "
"attributes, but allows individual parts to be overriden."
msgstr ""
"Разработчики могут использовать этот метод для изменения различных "
"аспектов получаемого представления, таких как классы сериализаторов, "
"конфигурацию полей, фильтры,классы разрешений и т.п. Этот метод "
"использует такие же атрибуты, которые были объявлены в мета-атрибутах, но"
" позволяет перегружать отдельные части."

#: ../../docstring of vstutils.models.BModel.hidden:1
msgid "If hidden is set to True, entry will be excluded from query in BQuerySet."
msgstr ""
"Если hidden установлено в True, вхождение будет исключено из запроса в "
"BQuerySet."

#: ../../docstring of vstutils.models.BModel.id:1
msgid "Primary field for select and search in API."
msgstr "Первичное поле для выборки и поиска в API."

#: of vstutils.models.Manager:1
msgid ""
"Default VSTUtils manager. Used by `BaseModel` and `BModel`. Uses "
"`BQuerySet` as base."
msgstr ""
"Стандартный VSTUtils-менеджер. Используется классами `BaseModel` и "
"`BModel`. Использует `BQuerySet` в качестве базового."

#: of vstutils.models.queryset.BQuerySet:1
msgid ""
"Represent a lazy database lookup for a set of objects. Allows to override"
" default iterable class by `custom_iterable_class` attribute (class with "
"`__iter__` method which returns generator of model objects) and default "
"query class by `custom_query_class` attribute (class inherited from "
":class:`django.db.models.sql.query.Query`)."
msgstr ""
"Представляет ленивый поиск в базе данных множества объектов. Позволяет "
"перегрузить итерируемый класс по умолчанию с помощью атрибута "
"`custom_iterable_class` (класс с методом `__iter__`, возвращающий "
"генератор объектов модели) и стандартный класс запроса с помощью атрибута"
" `custom_query_class` (дочерний класс "
":class:`django.db.models.sql.query.Query`)."

#: of vstutils.models.queryset.BQuerySet.cleared:1
msgid ""
"Filter queryset for models with attribute 'hidden' and exclude all hidden"
" objects."
msgstr ""
"Фильтрует queryset для моделей с атрибутом `hidden`, исключая все скрытые"
" объекты."

#: of vstutils.models.queryset.BQuerySet.get_paginator:1
msgid ""
"Returns initialized object of :class:`vstutils.utils.Paginator` over "
"current instance's QuerySet. All args and kwargs go to to Paginator's "
"constructor."
msgstr ""
"Возвращает инициализированные объекты класса "
":class:`vstutils.utils.Paginator` через текущий экземпляр QuerySet. Все "
"аргументы и (args) и именованные аргументы (kwargs) попадают в "
"конструктор класса Paginator."

#: of vstutils.models.queryset.BQuerySet.paged:1
msgid ""
"Returns paginated data with custom Paginator-class. Uses `PAGE_LIMIT` "
"from global settings by default."
msgstr ""
"Возвращает разбитые на страницы данные при помощи пользовательского "
"класса Paginator. Используйте `PAGE_LIMIT` из глобальных настроек по "
"умолчанию."

#: of vstutils.models.decorators.register_view_action:1
msgid ""
"Decorator for turning model methods to generated view `actions "
"<https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-"
"actions-for-routing>`_. When a method is decorated, it becomes a part of "
"the generated view and the `self` reference within the method points to "
"the view object. This allows you to extend the functionality of generated"
" views with custom actions."
msgstr ""
"Декоратор для превращения методов модели в сгенерированные view `экшены "
"<https://www.django-rest-framework.org/api-guide/viewsets/#marking-extra-"
"actions-for-routing>`_. Когда метод декорируется, он становится частью "
"сгенерированного view, и ссылка `self` внутри метода указывает на объект "
"view. Это позволяет расширять функциональность сгенерированных view с "
"помощью пользовательских экшенов."

#: of vstutils.models.decorators.register_view_action:7
msgid ""
"The `register_view_action` decorator supports various arguments, and you "
"can refer to the documentation for "
":func:`vstutils.api.decorators.subaction` to explore the complete list of"
" supported arguments. These arguments provide flexibility in defining the"
" behavior and characteristics of the generated view actions."
msgstr ""
"Декоратор `register_view_action` поддерживает различные аргументы, и вы "
"можете обратиться к документации для "
":func:`vstutils.api.decorators.subaction`, чтобы изучить полный список "
"поддерживаемых аргументов. Эти аргументы предоставляют гибкость в "
"определении поведения и характеристик сгенерированных экшенов view."

#: of vstutils.models.decorators.register_view_action:12
msgid ""
"In scenarios where you're working with proxy models that share a common "
"set of actions, you can use the `inherit` named argument with a value of "
"`True`. This allows the proxy model to inherit actions defined in the "
"base model, reducing redundancy and promoting code reuse."
msgstr ""
"В сценариях, где вы работаете с прокси-моделями, использующими общий "
"набор действий, вы можете использовать именованный аргумент `inherit` со "
"значением `True`. Это позволяет прокси-модели наследовать действия, "
"определенные в базовой модели, сокращая избыточность и способствуя "
"повторному использованию кода."

#: of vstutils.models.decorators.register_view_action:18
msgid ""
"In many cases, an action may not require any parameters and can be "
"executed by sending an empty query. To streamline development and enhance"
" efficiency, the `register_view_action` decorator sets the default "
"serializer to :class:`vstutils.api.serializers.EmptySerializer`. This "
"means that the action expects no input data, making it convenient for "
"actions that operate without additional parameters."
msgstr ""
"Во многих случаях действие может не требовать параметров и может быть "
"выполнено, отправив пустой запрос. Для упрощения разработки и повышения "
"эффективности декоратор `register_view_action` устанавливает сериализатор"
" по умолчанию на :class:`vstutils.api.serializers.EmptySerializer`. Это "
"означает, что действие не ожидает входных данных, что удобно для "
"действий, которые работают без дополнительных параметров."

#: of vstutils.api.base.FileResponseRetrieveMixin:3
#: vstutils.api.decorators.nested_view:39
#: vstutils.api.fields.AutoCompletionField:28
#: vstutils.api.fields.Barcode128Field:24
#: vstutils.api.fields.CommaMultiSelect:20
#: vstutils.api.fields.DependFromFkField:54
#: vstutils.api.fields.DynamicJsonTypeField:40 vstutils.api.fields.HtmlField:25
#: vstutils.api.fields.MaskedField:23
#: vstutils.api.fields.NamedBinaryFileInJsonField:32
#: vstutils.api.fields.PhoneField:19 vstutils.api.fields.QrCodeField:27
#: vstutils.api.fields.TextareaField:20 vstutils.api.fields.UptimeField:14
#: vstutils.api.fields.WYSIWYGField:19
#: vstutils.api.filter_backends.DeepViewFilterBackend:25
#: vstutils.api.filter_backends.VSTFilterBackend:22
#: vstutils.api.filters.FkFilterHandler:15
#: vstutils.api.serializers.BaseSerializer:12
#: vstutils.api.serializers.DisplayMode:5
#: vstutils.api.serializers.DisplayModeList:6
#: vstutils.api.serializers.VSTSerializer:10
#: vstutils.middleware.AsyncBaseMiddleware:41
#: vstutils.middleware.BaseMiddleware:38
#: vstutils.models.decorators.register_view_action:24
#: vstutils.tasks.TaskClass:4 vstutils.utils.BaseEnum:22 vstutils.utils.Lock:35
#: vstutils.utils.ObjectHandlers:31 vstutils.utils.SecurePickling:22
#: vstutils.utils.URLHandlers:10 vstutils.utils.apply_decorators:18
#: vstutils.utils.classproperty:20 vstutils.utils.create_view:17
#: vstutils.utils.raise_context_decorator_with_default:19
msgid "Example:"
msgstr "Пример:"

#: of vstutils.models.decorators.register_view_action:26
msgid ""
"This example demonstrates how to use the decorator to create a custom "
"action within a model view. The ``empty_action`` method becomes part of "
"the generated view and expects no input parameters."
msgstr ""
"В этом примере показано, как использовать декоратор для создания "
"пользовательского действия в представлении модели. Метод ``empty_action``"
" становится частью сгенерированного view и не ожидает входных параметров."

#: ../../backend.rst:23
msgid ""
"Vstutils supports models that don't necessitate direct database "
"interaction or aren't inherently tied to database tables. These models "
"exhibit diverse behaviors, such as fetching data directly from class "
"attributes, loading data from files, or implementing custom data "
"retrieval mechanisms. Remarkably, there are models that, in a sense, "
"implement the mechanism of SQL views with pre-defined queries. This "
"flexibility allows developers to define a wide range of models that cater"
" to specific data needs, from in-memory models to those seamlessly "
"integrating external data sources. Vstutils' model system is not confined"
" to traditional database-backed structures, providing a versatile "
"foundation for crafting various data representations."
msgstr ""
"Vstutils поддерживает модели, которые не требуют прямого взаимодействия с"
" базой данных или не являются непосредственно таблицами в базе. Эти "
"модели проявляют разнообразные поведения, такие как извлечение данных "
"непосредственно из атрибутов класса, загрузка данных из файлов или "
"реализация собственных механизмов получения данных. Замечательно, что "
"существуют модели, которые, в каком-то смысле, реализуют механизм SQL "
"представлений с предопределенными запросами. Эта гибкость позволяет "
"разработчикам определять широкий спектр моделей, от моделей, существующих"
" только в памяти, до тех, которые без проблем интегрируют внешние "
"источники данных. Система моделей Vstutils не ограничивается "
"традиционными структурами, поддерживаемыми базой данных, предоставляя "
"гибкое основание для создания различных представлений данных."

#: of vstutils.models.custom_model.ExternalCustomModel:1
msgid ""
"Represents a custom model designed for the self-implementation of "
"requests to external services."
msgstr ""
"Представляет собой кастомную модель, предназначенную для самостоятельной "
"реализации запросов ко внешним сервисам."

#: of vstutils.models.custom_model.ExternalCustomModel:3
msgid ""
"This model facilitates the seamless interaction with external services by"
" allowing the passing of filtering, limiting, and sorting parameters to "
"an external request. It is designed to receive data that is already "
"filtered and limited."
msgstr ""
"Данная кастомная модель облегчает взаимодействие с внешними сервисами, "
"позволяя передавать параметры фильтрации, лимитирования и сортировки во "
"внешний запрос. Она предназначена для получения данных, которые уже "
"отфильтрованы и ограничены."

#: of vstutils.models.custom_model.ExternalCustomModel:7
msgid ""
"To utilize this model effectively, developers need to implement the "
"``get_data_generator()`` class method. This method receives a query "
"object containing the necessary parameters, enabling developers to "
"customize interactions with external services."
msgstr ""
"Для эффективного использования этой модели разработчики должны "
"реализовать метод класса ``get_data_generator()``. Этот метод получает "
"объект запроса с необходимыми параметрами, позволяя разработчикам "
"настраивать взаимодействие с внешними сервисами."

#: of vstutils.models.custom_model.ExternalCustomModel:11
msgid "**Example:**"
msgstr "**Пример:**"

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:1
msgid ""
"This class method must be implemented by derived classes to define custom"
" logic for fetching data from an external service based on the provided "
"query parameters."
msgstr ""
"Этот метод класса должен быть реализован в производных классах для "
"определения пользовательской логики извлечения данных из внешнего сервиса"
" на основе предоставленных параметров запроса."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:4
msgid "Query object might contain the following parameters:"
msgstr "Объект запроса может содержать следующие параметры:"

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:6
msgid "filter (dict): A dictionary specifying the filtering criteria."
msgstr "filter (dict): Словарь, задающий критерии фильтрации."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:7
msgid "exclude (dict): A dictionary specifying the exclusion criteria."
msgstr "exclude (dict): Словарь, задающий критерии исключения."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:8
msgid "order_by (list): A list specifying the sorting order."
msgstr "order_by (list): Список, задающий порядок сортировки."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:9
msgid "low_mark (int): The low index for slicing (if sliced)."
msgstr "low_mark (int): Нижний индекс для среза (если задан срез)."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:10
msgid "high_mark (int): The high index for slicing (if sliced)."
msgstr "high_mark (int): Верхний индекс для среза (если задан срез)."

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:11
msgid "is_sliced (bool): A boolean indicating whether the query is sliced."
msgstr "is_sliced (bool): Булево значение, указывающее, является ли запрос срезом."

#: ../../backend.rst of vstutils.api.decorators.nested_view
#: vstutils.api.validators.FileMediaTypeValidator
msgid "Parameters"
msgstr "Параметры"

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:14
msgid "An object containing filtering, limiting, and sorting parameters."
msgstr "Объект, содержащий параметры фильтрации, лимитирования и сортировки."

#: ../../backend.rst
msgid "Returns"
msgstr "Возвращает"

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:17
msgid "A generator that yields the requested data."
msgstr "Генератор, возвращающий запрошенные данные."

#: ../../backend.rst
msgid "Return type"
msgstr "Тип возвращаемого значения"

#: ../../backend.rst
msgid "Raises"
msgstr "Выбрасывает"

#: of vstutils.models.custom_model.ExternalCustomModel.get_data_generator:20
#: vstutils.models.custom_model.ViewCustomModel.get_view_queryset:7
msgid "If the method is not implemented by the derived class."
msgstr "Если метод не реализован в производном классе."

#: of vstutils.models.custom_model.FileModel:1
msgid ""
"Custom model that loads data from a YAML file instead of a database. The "
"path to the file is specified in the `FileModel.file_path` attribute."
msgstr ""
"Кастомная модель, загружающая данные из YAML-файла вместо базы данных. "
"Путь к файлу указывается в атрибуте `FileModel.file_path`."

#: of vstutils.models.custom_model.FileModel:5
msgid ""
"Suppose the source file is stored at `/etc/authors.yaml` with the "
"following content:"
msgstr ""
"Предположим, что исходный файл хранится в `/etc/authors.yaml` со "
"следующим содержимым:"

#: of vstutils.models.custom_model.FileModel:12
msgid "You can create a custom model using this file:"
msgstr "Вы можете создать кастомную модель, используя этот файл:"

#: of vstutils.models.custom_model.ListModel:1
msgid ""
"Custom model which uses a list of dicts with data (attribute "
"`ListModel.data`) instead of database records. Useful when you have a "
"simple list of data."
msgstr ""
"Модель, использующая список или словарь для хранения данных (атрибут "
"`ListModel.data`) вместо базы данных. Полезна в том случае, если у вас "
"простой набор данных."

#: of vstutils.models.custom_model.ListModel:18
msgid ""
"Sometimes, it may be necessary to switch the data source. For these "
"purposes, you should use the `setup_custom_queryset_kwargs` function, "
"which takes various named arguments, which are also passed to the data "
"initialization function. One such argument for :class:`ListModel` is "
"date_source, which takes any iterable object."
msgstr ""
"Иногда может быть необходимо переключаться между источниками данных. Для "
"этих целей следует использовать функцию `setup_custom_queryset_kwargs`, "
"которая принимает именованные аргументы, отправляющиеся затем в функцию "
"инициализации данных. Один из таких аргументов для :class:`ListModel` - "
"date_source, принимающий любой итерируемый объект."

#: of vstutils.models.custom_model.ListModel:37
msgid ""
"In this case, we setup source list via `setup_custom_queryset_kwargs` "
"function, and any other chained call is going to work with this data."
msgstr ""
"В этом случае мы задаем список источников через функцию "
"`setup_custom_queryset_kwargs`, и каждый последующий вызов в цепочке "
"методов будет работать с этими данными."

#: ../../backend.rst
msgid "Variables"
msgstr "Переменные"

#: of vstutils.models.custom_model.ListModel:40
msgid "List with data dicts. Empty by default."
msgstr "Список кортежей данных. Пустой по умолчанию."

#: of vstutils.models.custom_model.ViewCustomModel:1
msgid "Implements the SQL View programming mechanism over other models."
msgstr "Реализует механизм программирования SQL View над другими моделями."

#: of vstutils.models.custom_model.ViewCustomModel:3
msgid ""
"This model provides a mechanism for implementing SQL View-like behavior "
"over other models. In the ``get_view_queryset()`` method, a base query is"
" prepared, and all further actions are implemented on top of it."
msgstr ""
"Эта модель предоставляет механизм для реализации поведения, аналогичного "
"SQL View, над другими моделями. В методе ``get_view_queryset()`` "
"подготавливается базовый запрос, и все последующие действия реализуются "
"поверх него."

#: of vstutils.models.custom_model.ViewCustomModel:7
msgid "**Example Usage:**"
msgstr "**Примеры:**"

#: of vstutils.models.custom_model.ViewCustomModel.get_view_queryset:1
msgid ""
"This class method must be implemented by derived classes to define custom"
" logic for generating the base queryset for the SQL View."
msgstr ""
"Этот метод класса должен быть реализован в производных классах для "
"определения пользовательской логики создания базового queryset для SQL "
"View."

#: of vstutils.models.custom_model.ViewCustomModel.get_view_queryset:4
msgid "The base queryset for the SQL View."
msgstr "Базовый queryset для SQL View."

#: ../../backend.rst:36
msgid "Model Fields"
msgstr "Поля Модели"

#: of vstutils.models.fields.FkModelField:1
msgid ""
"Extends :class:`django.db.models.ForeignKey`. Use this field in "
":class:`vstutils.models.BModel` to get `vstutils.api.FkModelField` in "
"serializer. To set Foreign Key relation set `to` argument to string path "
"to model or to Model Class as in :class:`django.db.models.ForeignKey`"
msgstr ""
"Расширяет :class:`django.db.models.ForeignKey`. Используйте это поле в "
":class:`vstutils.models.BModel`, чтобы получить "
"`vstutils.api.FkModelField` в сериализаторе. Чтобы установить Foreign Key"
" отношение, задайте значение `to` - класс модели или строка для импорта, "
"как в :class:`django.db.models.ForeignKey`"

#: of vstutils.models.fields.HTMLField:1
msgid ""
"Extends :class:`django.db.models.TextField`. A simple field for storing "
"HTML markup. The field is based on :class:`django.db.models.TextField`, "
"therefore it does not support indexing and is not recommended for use in "
"filters."
msgstr ""
"Расширяет класс :class:`django.db.models.TextField`. Простое поле для "
"хранения HTML-разметки. Поле основано на базе "
":class:`django.db.models.TextField`, поэтому не поддерживает индексацию и"
" не рекомендовано для использования в фильтрах."

#: of vstutils.models.fields.MultipleFieldFile:1
msgid ""
"Subclasses :class:`django.db.models.fields.files.FieldFile`. Provides "
":meth:`MultipleFieldFile.save` and :meth:`MultipleFieldFile.delete` to "
"manipulate the underlying file, as well as update the associated model "
"instance."
msgstr ""
"Подклассы :class:`django.db.models.fields.files.FieldFile`. Предоставляют"
" :meth:`MultipleFieldFile.save` и :meth:`MultipleFieldFile.delete` для "
"управления базовым файлом, а также для обновления соответствующего "
"экземпляра модели."

#: of vstutils.models.fields.MultipleFieldFile.delete:1
msgid "Delete file from storage and from object attr."
msgstr "Удаляет файл из хранилища и из атрибута объекта."

#: of vstutils.models.fields.MultipleFieldFile.save:1
msgid "Save changes in file to storage and to object attr."
msgstr "Сохраняет изменения в файле в хранилище и атрибут объекта."

#: of vstutils.models.fields.MultipleFileDescriptor:1
msgid ""
"Subclasses :class:`django.db.models.fields.files.FileDescriptor` to "
"handle list of files. Return a list of :class:`MultipleFieldFile` when "
"accessed so you can write code like:"
msgstr ""
"Подклассы :class:`django.db.models.fields.files.FileDescriptor` для "
"обработки списка файлов. Возвращает список :class:`MultipleFieldFile` при"
" обращении, поэтому вы можете написать такой код:"

#: of vstutils.models.fields.MultipleFileDescriptor.get_file:1
msgid ""
"Always return valid attr_class object. For details on logic see "
":meth:`django.db.models.fields.files.FileDescriptor.__get__`."
msgstr ""
"Всегда возвращает валидный объект attr_class. За деталями реализации "
"обратитесь к "
":meth:`django.db.models.fields.files.FileDescriptor.__get__`."

#: of vstutils.models.fields.MultipleFileField:1
msgid ""
"Subclasses :class:`django.db.models.fields.files.FileField`. Field for "
"storing a list of Storage-kept files. All args passed to FileField."
msgstr ""
"Подклассы :class:`django.db.models.fields.files.FileField`. Поле для "
"хранения списка файлов, содержащихся в хранилище. Все аргументы "
"передаются в FileField."

#: of vstutils.models.fields.MultipleFileMixin:1
msgid ""
"Mixin suited to use with :class:`django.db.models.fields.files.FieldFile`"
" to transform it to a Field with list of files."
msgstr ""
"Миксина, предназначенная для использования вместе с "
":class:`django.db.models.fields.files.FieldFile` для преобразования его в"
" Field вместе со списком файлов."

#: of vstutils.models.fields.MultipleFileMixin.get_prep_value:1
msgid "Prepare value for database insertion"
msgstr "Подготовка значения для вставки в базу данных"

#: of vstutils.models.fields.MultipleFileMixin.pre_save:1
msgid "Call .save() method on every file in list"
msgstr "Вызов метода .save() для каждого файла списка"

#: of vstutils.models.fields.MultipleImageField:1
msgid ""
"Field for storing a list of storage-kept images. All args are passed to "
":class:`django.db.models.fields.files.ImageField`, except height_field "
"and width_field, they are not currently implemented."
msgstr ""
"Поле для хранения списка изображения, содержащихся в хранилище. Все "
"аргументы передаются в :class:`django.db.models.fields.files.ImageField`,"
" кроме height_field и width_field, так как они пока не реализованы."

#: of vstutils.models.fields.MultipleImageFieldFile:1
msgid ""
"Subclasses :class:`MultipleFieldFile` and :class:`ImageFile mixin`, "
"handles deleting _dimensions_cache when file is deleted."
msgstr ""
"Подклассы :class:`MultipleFieldFile` и :class:`ImageFile mixin`, "
"обрабатывают удаление _dimensions_cache, когда файл удаляется."

#: of vstutils.models.fields.MultipleNamedBinaryFileInJSONField:1
msgid ""
"Extends :class:`django.db.models.TextField`. Use this field in "
":class:`vstutils.models.BModel` to get "
"`vstutils.api.MultipleNamedBinaryFileInJSONField` in serializer."
msgstr ""
"Расширяет :class:`django.db.models.TextField`. Используйте это поле в "
":class:`vstutils.models.BModel`, чтобы получить "
"`vstutils.api.MultipleNamedBinaryFileInJSONField` в сериализаторе."

#: of vstutils.models.fields.MultipleNamedBinaryImageInJSONField:1
msgid ""
"Extends :class:`django.db.models.TextField`. Use this field in "
":class:`vstutils.models.BModel` to get "
"`vstutils.api.MultipleNamedBinaryImageInJSONField` in serializer."
msgstr ""
"Расширяет :class:`django.db.models.TextField`. Используйте это поле в "
":class:`vstutils.models.BModel`, чтобы получить "
"`vstutils.api.MultipleNamedBinaryImageInJSONField` в сериализаторе."

#: of vstutils.models.fields.NamedBinaryFileInJSONField:1
msgid ""
"Extends :class:`django.db.models.TextField`. Use this field in "
":class:`vstutils.models.BModel` to get "
"`vstutils.api.NamedBinaryFileInJSONField` in serializer."
msgstr ""
"Расширяет :class:`django.db.models.TextField`. Используйте это поле в "
":class:`vstutils.models.BModel`, чтобы получить "
"`vstutils.api.NamedBinaryFileInJSONField` в сериализаторе."

#: of vstutils.models.fields.NamedBinaryImageInJSONField:1
msgid ""
"Extends :class:`django.db.models.TextField`. Use this field in "
":class:`vstutils.models.BModel` to get "
"`vstutils.api.NamedBinaryImageInJSONField` in serializer."
msgstr ""
"Расширяет :class:`django.db.models.TextField`. Используйте это поле в "
":class:`vstutils.models.BModel`, чтобы получить "
"`vstutils.api.NamedBinaryImageInJSONField` в сериализаторе."

#: of vstutils.models.fields.WYSIWYGField:1
msgid ""
"Extends :class:`django.db.models.TextField`. A simple field for storing "
"Markdown data. The field is based on :class:`django.db.models.TextField`,"
" therefore it does not support indexing and is not recommended for use in"
" filters."
msgstr ""
"Расширяет :class:`django.db.models.TextField`. Простое поле для хранения "
"строк в формате Markdown. Поле основано на "
":class:`django.db.models.TextField`, поэтому не поддерживает индексацию и"
" не рекомендовано для использования в фильтрах."

#: ../../backend.rst:43
msgid "Web API"
msgstr "Веб-API"

#: ../../backend.rst:45
msgid ""
"Web API is based on Django Rest Framework with additional nested "
"functions."
msgstr ""
"Веб-API основано на Django Rest Framework. Предоставляет дополнительные "
"вложенные функции."

#: ../../backend.rst:48
msgid "Fields"
msgstr "Поля"

#: ../../backend.rst:50
msgid ""
"The Framework includes a list of convenient serializer fields. Some of "
"them take effect only in generated admin interface."
msgstr ""
"Фреймворк включает в себя список удобных полей сериализатора. Некоторые "
"из них вступают в силу только в сгенерированном интерфейсе "
"администратора."

#: of vstutils.api.fields:1
msgid "Additional serializer fields for generating OpenAPI and GUI."
msgstr ""
"Дополнительные поля сериализатора для генерации OpenAPI и графического "
"интерфейса."

#: of vstutils.api.fields.AutoCompletionField:1
msgid ""
"Serializer field that provides autocompletion on the frontend, using a "
"specified list of objects."
msgstr ""
"Поле сериализатора, обеспечивающее автодополнение на фронтенде с "
"использованием указанного списка объектов."

#: of vstutils.api.fields.AutoCompletionField:3
msgid ""
"Autocompletion reference. You can set a list or tuple with values or "
"specify the name of an OpenAPI schema definition. For a definition name, "
"the GUI will find the optimal link and display values based on the "
"``autocomplete_property`` and ``autocomplete_represent`` arguments."
msgstr ""
"Ссылка для автодополнения. Можно установить список или кортеж с "
"значениями или указать имя определения схемы OpenAPI. Для имени "
"определения, GUI найдет оптимальную ссылку и отобразит значения на основе"
" аргументов ``autocomplete_property`` и ``autocomplete_represent``."

#: of vstutils.api.fields.AutoCompletionField:9
msgid ""
"Specifies which attribute to retrieve from the OpenAPI schema definition "
"model as the value. Default is 'id'."
msgstr ""
"Указывает, какой атрибут из модели определения схемы OpenAPI использовать"
" в качестве значения. По умолчанию 'id'."

#: of vstutils.api.fields.AutoCompletionField:13
msgid ""
"Specifies which attribute to retrieve from the OpenAPI schema definition "
"model as the representational value. Default is 'name'."
msgstr ""
"Указывает, какой атрибут из модели определения схемы OpenAPI использовать"
" в качестве представленного значения. По умолчанию 'name'."

#: of vstutils.api.fields.AutoCompletionField:16
msgid "Prefetch values on the frontend in list view. Default is ``True``."
msgstr ""
"Загружать значения на фронтенде в режиме просмотра списка. Значение по "
"умолчанию — ``True``."

#: of vstutils.api.fields.AutoCompletionField:20
#: vstutils.api.fields.BinFileInStringField:10
msgid ""
"This functionality is effective only in the GUI. In the API, it behaves "
"similarly to :class:`.VSTCharField`."
msgstr ""
"Эта функциональность работает только в графическом интерфейсе. В API она "
"ведет себя так же, как и :class:`.VSTCharField`."

#: of vstutils.api.fields.AutoCompletionField:45
msgid "Usage:"
msgstr "Использование:"

#: of vstutils.api.fields.AutoCompletionField:23
msgid ""
"This field is designed to be used in serializers where a user needs to "
"input a value, and autocompletion based on a predefined list or an "
"OpenAPI schema definition is desired. If an OpenAPI schema is specified, "
"two additional parameters, ``autocomplete_property`` and "
"``autocomplete_represent``, can be configured to customize the appearance"
" of the dropdown list."
msgstr ""
"Это поле предназначено для использования в сериализаторах, где "
"пользователь должен ввести значение, и требуется автодополнение на основе"
" предопределенного списка или определения схемы OpenAPI. Если указана "
"схема OpenAPI, два дополнительных параметра, ``autocomplete_property`` и "
"``autocomplete_represent``, могут быть настроены для настройки внешнего "
"вида выпадающего списка."

#: of vstutils.api.fields.Barcode128Field:1
msgid ""
"A field for representing data as a Barcode (Code 128) in the user "
"interface."
msgstr ""
"Поле для представления данных в виде штрихкода (Code 128) в "
"пользовательском интерфейсе."

#: of vstutils.api.fields.Barcode128Field:3
msgid ""
"This field accepts and validates data in the form of a valid ASCII "
"string. It is designed to display the data as a Code 128 barcode in the "
"graphical user interface. The underlying data is serialized or "
"deserialized using the specified child field."
msgstr ""
"Это поле принимает и проверяет данные в виде допустимой ASCII-строки. Оно"
" предназначено для отображения данных в виде штрихкода Code 128 в "
"графическом пользовательском интерфейсе. Основные данные сериализуются "
"или десериализуются с использованием указанного дочернего поля."

#: of vstutils.api.fields.Barcode128Field:7 vstutils.api.fields.QrCodeField:6
msgid ""
"The original data field for serialization or deserialization. Default: "
":class:`rest_framework.fields.CharField`"
msgstr ""
"Исходное поле данных для сериализации или десериализации. По умолчанию: "
":class:`rest_framework.fields.CharField`"

#: of vstutils.api.fields.Barcode128Field:12
msgid ""
"Suppose you have a model with a `product_code` field, and you want to "
"display its Code 128 barcode representation in the GUI. You can use "
"`Barcode128Field` in your serializer:"
msgstr ""
"Предположим, у вас есть модель с полем `product_code`, и вы хотите "
"отображать его представление в виде штрихкода Code 128 в графическом "
"интерфейсе пользователя. Вы можете использовать `Barcode128Field` в своем"
" сериализаторе:"

#: of vstutils.api.fields.BinFileInStringField:1
msgid ""
"This field extends :class:`.FileInStringField` and is specifically "
"designed to handle binary files. In the GUI, it functions as a file input"
" field, accepting binary files from the user, which are then converted to"
" base64-encoded strings and stored in this field."
msgstr ""
"Это поле расширяет функциональность :class:`.FileInStringField` и "
"специально предназначено для обработки бинарных файлов. В интерфейсе "
"пользователя оно выступает в качестве поля для загрузки файлов, принимая "
"бинарные файлы от пользователя, которые затем конвертируются в строку в "
"формате base64 и сохраняются в данном поле."

#: of vstutils.api.fields.BinFileInStringField:5
msgid ""
"A list of MIME types to filter on the user's side. Supports the use of "
"``*`` as a wildcard. Default: `['*/*']`"
msgstr ""
"Список MIME-типов, доступных для выбора пользователем. Поддерживается "
"синтаксис с использованием ``*``. По умолчанию ``['*/*']``"

#: of vstutils.api.fields.CSVFileField:1
msgid ""
"Field extends :class:`.FileInStringField`, using for works with csv "
"files. This field provides the display of the loaded data in the form of "
"a table."
msgstr ""
"Поле, расширяющее :class:`.FileInStringField`, используется для работы с "
"csv файлами. Обеспечивает отображение загруженных данных в виде таблицы."

#: of vstutils.api.fields.CSVFileField:5
msgid ""
"The config of the table. This is a drf or vst serializer which includes "
"char fields which are the keys in the dictionaries into which the data "
"from csv is serialized and the names for columns in a table. The fields "
"must be in the order you want them to appear in the table. Following "
"options may be included:  - ``label``: human readable column name - "
"``required``: Defines whether the field should be required. False by "
"default."
msgstr ""
"Конфигурация таблицы. Это сериализатор drf или vst, включающий "
"CharField'ы, которые являются ключами словарей, и именами колонок в "
"таблице. В ключи сериализуются данные из csv. Поля должны быть в том "
"порядке, в котором вы хотите видеть их в таблице. Следующие опции могут "
"также быть включены:  - ``label``: удобочитаемое название колонки - "
"``required``: определяет, будет ли поле обязательным. По умолчанию False."

#: of vstutils.api.fields.CSVFileField:5
msgid ""
"The config of the table. This is a drf or vst serializer which includes "
"char fields which are the keys in the dictionaries into which the data "
"from csv is serialized and the names for columns in a table. The fields "
"must be in the order you want them to appear in the table. Following "
"options may be included:"
msgstr ""
"Конфигурация таблицы. Это сериализатор drf или vst, включающий "
"CharField'ы, которые являются ключами словарей, и имена колонок в "
"таблице. В ключи сериализуются данные из csv. Поля должны быть в том "
"порядке, в котором вы хотите видеть их в таблице. Следующие опции могут "
"также быть включены:"

#: of vstutils.api.fields.CSVFileField:11
msgid "``label``: human readable column name"
msgstr "``label``: удобочитаемое название колонки"

#: of vstutils.api.fields.CSVFileField:12
msgid ""
"``required``: Defines whether the field should be required. False by "
"default."
msgstr "``required``: определяет, будет ли поле обязательным. По умолчанию False."

#: of vstutils.api.fields.CSVFileField:17
msgid "Minimum cell width. Default is 200 px."
msgstr "Минимальная ширина ячейки. По умолчанию 200 px."

#: of vstutils.api.fields.CSVFileField:20
msgid "The delimiting character."
msgstr "Символ-разделитель."

#: of vstutils.api.fields.CSVFileField:23
msgid ""
"The newline sequence. Leave blank to auto-detect. Must be one of ``\\r``,"
" ``\\n``, or ``\\r\\n``."
msgstr ""
"Последовательность символов новой строки. Оставьте пустым для выбора "
"автоматически. Возможные значения: ``\\r``, ``\\n``, ``\\r\\n``."

#: of vstutils.api.fields.CSVFileField:27
msgid "The character used to quote fields."
msgstr "Символ, используемый в качестве кавычек для полей."

#: of vstutils.api.fields.CSVFileField:30
msgid "The character used to escape the quote character within a field."
msgstr "Символ, используемый для экранирования кавычки в поле."

#: of vstutils.api.fields.CSVFileField:33
msgid ""
"List of MIME types to select on the user's side. Supported syntax using "
"``*``. Default: ``['text/csv']``"
msgstr ""
"Список MIME-типов, доступных для выбора пользователем. Поддерживается "
"синтаксис с использованием ``*``. По умолчанию ``['text/csv']``"

#: of vstutils.api.fields.CheckboxBooleanField:1
msgid "Boolean field that renders checkbox."
msgstr "Булево поле, которое отрисовывается как чекбокс."

#: of vstutils.api.fields.CommaMultiSelect:1
msgid ""
"Field that allows users to input multiple values, separated by a "
"specified delimiter (default: \",\"). It retrieves a list of values from "
"another model or a custom list and provides autocompletion similar to "
":class:`.AutoCompletionField`. This field is suitable for property fields"
" in a model where the main logic is already implemented or for use with "
":class:`model.CharField`."
msgstr ""
"Поле, позволяющее пользователям вводить несколько значений, разделенных "
"указанным разделителем (по умолчанию \",\"). Извлекает список значений из"
" другой модели или пользовательского списка и предоставляет "
"автодополнение аналогично :class:`.AutoCompletionField`. Это поле "
"подходит для полей-свойств модели, где основная логика уже реализована, "
"или для использования с :class:`model.CharField`."

#: of vstutils.api.fields.CommaMultiSelect:5
msgid "OpenAPI schema definition name or a list with values."
msgstr "Имя определения схемы OpenAPI или список со значениями."

#: of vstutils.api.fields.CommaMultiSelect:7
msgid "The separator for values. The default is a comma."
msgstr "Разделитель значений. По умолчанию - запятая."

#: of vstutils.api.fields.CommaMultiSelect:9
msgid ""
"These parameters function similarly to ``autocomplete_property`` and "
"``autocomplete_represent``. The default is ``name``."
msgstr ""
"Эти параметры работают аналогично ``autocomplete_property`` и "
"``autocomplete_represent``. По умолчанию - ``name``."

#: of vstutils.api.fields.CommaMultiSelect:11
msgid "Prefetch values on the frontend in list view. The default is ``False``."
msgstr ""
"Загружать значения на фронтенде в режиме просмотра списка. Значение по "
"умолчанию - ``False``."

#: of vstutils.api.fields.CommaMultiSelect:13
msgid "Show values as links to the model. The default is ``True``."
msgstr "Отображать значения как ссылки на модель. По умолчанию - ``True``."

#: of vstutils.api.fields.CommaMultiSelect:15
msgid ""
"A dictionary where keys are the names of fields from the same model, and "
"values are the names of query filters. If at least one of the fields we "
"depend on is non-nullable, required, and set to null, the autocompletion "
"list will be empty, and the field will be disabled."
msgstr ""
"Словарь, где ключи - это имена полей из той же модели, а значения - "
"названия query-фильтров. Если хотя бы одно из полей, от которых "
"существует зависимость, не допускает null, обязательно или установлено в "
"null, список автодополнения будет пустым, и поле будет отключено."

#: of vstutils.api.fields.CommaMultiSelect:43
msgid ""
"This functionality is effective only in the GUI and works similarly to "
":class:`.VSTCharField` in the API."
msgstr ""
"Эта функциональность работает только в графическом интерфейсе. В API она "
"ведет себя так же, как и :class:`.VSTCharField`."

#: of vstutils.api.fields.CrontabField:1
msgid ""
"Simple crontab-like field which contains the schedule of cron entries to "
"specify time. A crontab field has five fields for specifying day, date "
"and time. ``*`` in the value field above means all legal values as in "
"braces for that column."
msgstr ""
"Простое поле, аналогичное crontab, содержащее расписание cron-записей для"
" указания времени. Поле crontab имеет пять полей для указания дня, даты и"
" времени. ``*`` в поле значений выше означает все допустимые значения, "
"указанные в скобках для данного столбца."

#: of vstutils.api.fields.CrontabField:5
msgid ""
"The value column can have a ``*`` or a list of elements separated by "
"commas. An element is either a number in the ranges shown above or two "
"numbers in the range separated by a hyphen (meaning an inclusive range)."
msgstr ""
"В поле значений может быть * или список элементов, разделенных запятыми. "
"Элементом может быть число из указанных выше диапазонов или два числа из "
"диапазона, разделенных дефисом (означает включительный диапазон)."

#: of vstutils.api.fields.CrontabField:9
msgid "The time and date fields are:"
msgstr "Поля времени и даты:"

#: of vstutils.api.fields.CrontabField:12
msgid "field"
msgstr "Поля"

#: of vstutils.api.fields.CrontabField:12
msgid "allowed value"
msgstr "допустимое значение"

#: of vstutils.api.fields.CrontabField:14
msgid "minute"
msgstr "минута"

#: of vstutils.api.fields.CrontabField:14
msgid "0-59"
msgstr "0-59"

#: of vstutils.api.fields.CrontabField:15
msgid "hour"
msgstr "час"

#: of vstutils.api.fields.CrontabField:15
msgid "0-23"
msgstr "0-23"

#: of vstutils.api.fields.CrontabField:16
msgid "day of month"
msgstr "день месяца"

#: of vstutils.api.fields.CrontabField:16
msgid "1-31"
msgstr "1-31"

#: of vstutils.api.fields.CrontabField:17
msgid "month"
msgstr "месяц"

#: of vstutils.api.fields.CrontabField:17
msgid "1-12"
msgstr "1-12"

#: of vstutils.api.fields.CrontabField:18
msgid "day of week"
msgstr "день недели"

#: of vstutils.api.fields.CrontabField:18
msgid "0-7 (0 or 7 is Sunday)"
msgstr "0-7 (0 или 7 - Sunday)"

#: of vstutils.api.fields.CrontabField:21
msgid "Default value of each field if not specified is ``*``."
msgstr "Значение по умолчанию для каждого поля, если не указано, составляет"

#: of vstutils.api.fields.DeepFkField:1
msgid ""
"Extends :class:`.FkModelField`, specifically designed for hierarchical "
"relationships in the frontend."
msgstr ""
"Расширяет :class:`.FkModelField`, специально разработанный для "
"иерархических отношений на фронтенде."

#: of vstutils.api.fields.DeepFkField:3
msgid ""
"This field is intended for handling ForeignKey relationships within a "
"hierarchical or tree-like structure. It displays as a tree in the "
"frontend, offering a clear visual representation of parent-child "
"relationships."
msgstr ""
"Это поле предназначено для работы с отношениями ForeignKey в "
"иерархической или древовидной структуре. Оно отображается в виде дерева "
"на фронтенде, предоставляя четкое визуальное представление отношений "
"родитель-ребенок."

#: of vstutils.api.fields.DeepFkField:7
msgid ""
"This field intentionally does not support the ``dependence`` parameter, "
"as it operates in a tree structure. Usage of ``filters`` should be "
"approached with caution, as inappropriate filters may disrupt the tree "
"hierarchy."
msgstr ""
"Это поле специально не поддерживает параметр ``dependence``, так как "
"работает в структуре дерева. Использование параметра ``filters`` следует "
"приглядеться с осторожностью, поскольку неправильные фильтры могут "
"нарушить иерархию дерева."

#: of vstutils.api.fields.DeepFkField:11
msgid ""
"If True, the field restricts the selection to nodes without children. "
"Default is `False`. Useful when you want to enforce selection of leaf "
"nodes."
msgstr ""
"Если True, поле ограничит выбор узлов без детей. Значение по умолчанию - "
"`False`. Полезно, когда вы хотите обеспечить выбор листовых узлов."

#: of vstutils.api.fields.DeepFkField:15
msgid ""
"The name of the parent field in the related model. Default is `parent`. "
"Should be set to the ForeignKey field in the related model, representing "
"the parent-child relationship. For example, if your related model has a "
"ForeignKey like `parent = models.ForeignKey('self', ...)`, then "
"`parent_field_name` should be set to `'parent'`."
msgstr ""
"Имя поля родителя в связанной модели. Значение по умолчанию - `parent`. "
"Должно быть установлено в поле ForeignKey в связанной модели, "
"представляющее отношения родитель-ребенок. Например, если у вашей "
"связанной модели есть ForeignKey, например, `parent = "
"models.ForeignKey('self', ...)`, то `parent_field_name` должно быть "
"установлено в `'parent'`."

#: of vstutils.api.fields.DeepFkField:24
msgid ""
"Consider a related model with a ForeignKey field representing parent-"
"child relationships:"
msgstr ""
"Предположим, у вас есть связанная модель с полем ForeignKey, "
"представляющим отношения родитель-ребенок:"

#: of vstutils.api.fields.DeepFkField:32
msgid ""
"To use the DeepFkField with this related model in a serializer, you would"
" set the parent_field_name to 'parent':"
msgstr ""
"Чтобы использовать DeepFkField с этой связанной моделью в сериализаторе, "
"вы установили бы `parent_field_name` в 'parent':"

#: of vstutils.api.fields.DeepFkField:39
msgid ""
"This example assumes a Category related model with a ForeignKey 'parent' "
"field. The DeepFkField will then display the categories as a tree "
"structure in the frontend, providing an intuitive selection mechanism for"
" hierarchical relationships."
msgstr ""
"В этом примере предполагается, что у вас есть связанная модель Category с"
" полем ForeignKey 'parent'. Затем DeepFkField отобразит категории в виде "
"дерева на фронтенде, предоставляя интуитивно понятный механизм выбора для"
" иерархических отношений."

#: of vstutils.api.fields.DeepFkField:44 vstutils.api.fields.UptimeField:26
msgid ""
"Effective only in GUI. Works similarly to "
":class:`rest_framework.fields.IntegerField` in API."
msgstr ""
"Действует только в графическом интерфейсе. Работает аналогично "
":class:`rest_framework.fields.IntegerField` в API."

#: of vstutils.api.fields.DependEnumField:1
msgid ""
"Field extends :class:`DynamicJsonTypeField` but its value is not "
"transformed to json and would be given as is. Useful for "
":class:`property` in models or for actions."
msgstr ""
"Поле, расширяющее :class:`DynamicJsonTypeField`, но его значение не "
"преобразуется в json, а остается как есть. Полезно при использовании "
":class:`property` в модели или для экшенов."

#: of vstutils.api.fields.DependEnumField:4
msgid "field in model which value change will change type of current value."
msgstr ""
"поле в модели, изменение значения которого будет менять тип текущего "
"значения."

#: of vstutils.api.fields.DependEnumField:6
msgid ""
"key-value mapping where key is value of subscribed field and value is "
"type (in OpenAPI format) of current field."
msgstr ""
"сопоставление ключ-значение, где ключом является значение "
"поля-подписчика, а значением - тип (формата OpenAPI) текущего поля."

#: of vstutils.api.fields.DependEnumField:9
msgid ""
"variants of choices for different subscribed field values. Uses mapping "
"where key is value of subscribed field and value is list with values to "
"choice."
msgstr ""
"варианты выбора для разных значений подписанных полей. Использует "
"сопоставление, где ключом является подписанное поле, а значением - список"
" значений для выбора."

#: of vstutils.api.fields.DependEnumField:16
msgid ""
"Effective only in GUI. In API works similar to :class:`.VSTCharField` "
"without value modification."
msgstr ""
"Действует только в графическом интерфейсе. В API работает аналогично "
":class:`.VSTCharField` без изменения значения."

#: of vstutils.api.fields.DependFromFkField:1
msgid ""
"A specialized field that extends :class:`DynamicJsonTypeField` and "
"validates field data based on a :attr:`.field_attribute` chosen in a "
"related model. The field data is validated against the type defined by "
"the chosen value of :attr:`.field_attribute`."
msgstr ""
"Специализированное поле, расширяющее :class:`DynamicJsonTypeField` и "
"проверяющее данные поля на основе :attr:`.field_attribute`, выбранного в "
"связанной модели. Данные поля проверяются на соответствие типу, "
"определенному выбранным значением :attr:`.field_attribute`."

#: of vstutils.api.fields.DependFromFkField:7
msgid ""
"By default, any value of :attr:`.field_attribute` validates as "
":class:`.VSTCharField`. To override this behavior, set the class "
"attribute ``{field_attribute}_fields_mapping`` in the related model. The "
"attribute should be a dictionary where keys are string representations of"
" the values of :attr:`.field_attribute`, and values are instances of "
":class:`rest_framework.Field` for validation. If a value is not found in "
"the dictionary, the default type will be :class:`.VSTCharField`."
msgstr ""
"По умолчанию любое значение :attr:`.field_attribute` проверяется как "
":class:`.VSTCharField`. Чтобы изменить это поведение, установите атрибут "
"класса ``{field_attribute}_fields_mapping`` в связанной модели. Атрибут "
"должен быть словарем, где ключи - это строковые представления значений "
":attr:`.field_attribute`, а значения - экземпляры "
":class:`rest_framework.Field` для проверки. Если значение не найдено в "
"словаре, то тип по умолчанию будет :class:`.VSTCharField`."

#: of vstutils.api.fields.DependFromFkField:14
msgid ""
"The field in the model whose value change determines the type of the "
"current value. The field must be of type :class:`.FkModelField`."
msgstr ""
"Поле в модели, значение которого определяет тип текущего значения. Поле "
"должно быть типа :class:`.FkModelField`."

#: of vstutils.api.fields.DependFromFkField:17
msgid ""
"The attribute of the related model instance containing the name of the "
"type."
msgstr "Атрибут экземпляра связанной модели, содержащий имя типа."

#: of vstutils.api.fields.DependFromFkField:19
#: vstutils.api.fields.DynamicJsonTypeField:6
msgid ""
"A key-value mapping where the key is the value of the subscribed field, "
"and the value is the type (in OpenAPI format) of the current field."
msgstr ""
"Отображение ключ-значение, где ключ - это значение подписанного поля, а "
"значение - тип (в формате OpenAPI) текущего поля."

#: of vstutils.api.fields.DependFromFkField:24
msgid ""
"The ``field_attribute`` in the related model must be of type "
":class:`rest_framework.fields.ChoicesField` to ensure proper functioning "
"in the GUI; otherwise, the field will be displayed as simple text."
msgstr ""
"``field_attribute`` в связанной модели должно быть типа "
":class:`rest_framework.fields.ChoicesField`, иначе в графическом "
"интерфейсе поле будет отображаться как обычное текстовое."

#: of vstutils.api.fields.DependFromFkField:29
msgid ""
"Suppose you have a model with a ForeignKey field `related_model` and a "
"field `type_attribute` in `RelatedModel` that determines the type of "
"data. You can use `DependFromFkField` to dynamically adapt the "
"serialization based on the value of `type_attribute`:"
msgstr ""
"Предположим, у вас есть модель с полем ForeignKey `related_model` и полем"
" `type_attribute` в `RelatedModel`, которое определяет тип данных. Вы "
"можете использовать `DependFromFkField` для динамической адаптации "
"сериализации на основе значения `type_attribute`:"

#: of vstutils.api.fields.DynamicJsonTypeField:1
msgid ""
"A versatile serializer field that dynamically adapts its type based on "
"the value of another field in the model. It facilitates complex scenarios"
" where the type of data to be serialized depends on the value of a "
"related field."
msgstr ""
"Универсальное поле сериализатора, которое динамически адаптирует свой тип"
" в зависимости от значения другого поля в модели. Оно облегчает сложные "
"сценарии, где тип данных для сериализации зависит от значения связанного "
"поля."

#: of vstutils.api.fields.DynamicJsonTypeField:4
msgid ""
"The field in the model whose value change will dynamically determine the "
"type of the current field."
msgstr ""
"Поле в модели, изменение значения которого будет динамически определять "
"тип текущего поля."

#: of vstutils.api.fields.DynamicJsonTypeField:9
msgid ""
"Variants of choices for different subscribed field values. Uses a mapping"
" where the key is the value of the subscribed field, and the value is a "
"list with values to choose from."
msgstr ""
"Варианты выбора для разных значений подписанных полей. Использует "
"отображение, где ключ - это значение подписанного поля, а значение - "
"список значений для выбора."

#: of vstutils.api.fields.DynamicJsonTypeField:13
msgid ""
"Allows using parent views data as a source for field creation. The exact "
"view path (`/user/{id}/`) or relative parent specifier "
"(`<<parent>>.<<parent>>.<<parent>>`) can be provided. For example, if the"
" current page is `/user/1/role/2/` and `source_view` is "
"`<<parent>>.<<parent>>`, then data from `/user/1/` will be used. Only "
"detail views are supported."
msgstr ""
"Позволяет использовать данные родительских представлений в качестве "
"источника для создания поля. Можно указать точный путь представления "
"(`/user/{id}/`) или относительный указатель родителя "
"(`<<parent>>.<<parent>>.<<parent>>`). Например, если текущая страница - "
"`/user/1/role/2/`, а `source_view` - `<<parent>>.<<parent>>`, то будут "
"использованы данные из `/user/1/`. Поддерживаются только детальные "
"представления."

#: of vstutils.api.fields.DynamicJsonTypeField:22
msgid ""
"Suppose you have a serializer `MySerializer` with a `field_type` (e.g., a"
" `ChoiceField`) and a corresponding `object_data`. The `object_data` "
"field can have different types based on the value of `field_type`. Here's"
" an example configuration:"
msgstr ""
"Предположим, у вас есть сериализатор `MySerializer` с полем `field_type` "
"(например, `ChoiceField`) и соответствующим полем `object_data`. Поле "
"`object_data` может иметь разные типы в зависимости от значения "
"`field_type`. Вот пример конфигурации:"

#: of vstutils.api.fields.DynamicJsonTypeField:40
msgid ""
"In this example, the `object_data` field dynamically adapts its type "
"based on the selected value of `field_type`. The `types` argument defines"
" different types for each possible value of `field_type`, allowing for "
"flexible and dynamic serialization."
msgstr ""
"В этом примере поле `object_data` динамически адаптирует свой тип в "
"зависимости от выбранного значения `field_type`. Аргумент `types` "
"определяет разные типы для каждого возможного значения `field_type`, "
"позволяя гибкую и динамичную сериализацию."

#: of vstutils.api.fields.FileInStringField:1
msgid ""
"This field extends :class:`.VSTCharField` and stores the content of a "
"file as a string."
msgstr ""
"Поле, расширяющее :class:`.VSTCharField`. Сохраняет содержимое файла в "
"виде строки."

#: of vstutils.api.fields.FileInStringField:3
#: vstutils.api.fields.SecretFileInString:3
msgid "The value must be text (not binary) and is saved in the model as is."
msgstr "Поле должно быть текстовым (не бинарным). Сохраняется в модель как есть."

#: of vstutils.api.fields.FileInStringField:5
#: vstutils.api.fields.SecretFileInString:5
msgid ""
"A list of MIME types to filter on the user's side. Supports the use of "
"``*`` as a wildcard. Default: ``['*/*']``"
msgstr ""
"Список MIME-типов, доступных для выбора пользователем. Поддерживается "
"синтаксис с использованием ``*``. По умолчанию ``['*/*']``"

#: of vstutils.api.fields.FileInStringField:10
#: vstutils.api.fields.SecretFileInString:10
msgid ""
"This setting only takes effect in the GUI. In the API, it behaves like "
":class:`.VSTCharField`."
msgstr ""
"Действует только в графическом интерфейсе. В API ведет себя так же, как и"
" :class:`.VSTCharField`."

#: of vstutils.api.fields.FkField:1
msgid ""
"An implementation of ForeignKeyField, designed for use in serializers. "
"This field allows you to specify which field of a related model will be "
"stored in the field (default: \"id\"), and which field will represent the"
" value on the frontend."
msgstr ""
"Реализация ForeignKeyField, предназначенная для использования в "
"сериализаторах. Это поле позволяет указать, какое поле связанной модели "
"будет храниться в этом поле (по умолчанию: \"id\"), а какое поле будет "
"представлять значение на фронтенде."

#: of vstutils.api.fields.FkField:5
msgid "OpenAPI schema definition name."
msgstr "Имя определения схемы OpenAPI."

#: of vstutils.api.fields.FkField:7
msgid ""
"Specifies which attribute will be retrieved from the OpenAPI schema "
"definition model as the value. Default is ``id``."
msgstr ""
"Указывает, какой атрибут из модели определения схемы OpenAPI использовать"
" в качестве значения. По умолчанию 'id'."

#: of vstutils.api.fields.FkField:10
msgid ""
"Specifies which attribute will be retrieved from the OpenAPI schema "
"definition model as the representational value. Default is ``name``."
msgstr ""
"Указывает, какой атрибут из модели определения схемы OpenAPI использовать"
" в качестве представленного значения. По умолчанию 'name'."

#: of vstutils.api.fields.FkField:12
msgid ""
"Defines the type of the autocomplete_property for further definition in "
"the schema and casting to the type from the API. Default is passthrough "
"but requires `int` or `str` objects."
msgstr ""
"Определяет тип поля autocomplete_property для дальнейшего описания в "
"схеме и преобразования этого типа из API. По умолчанию пропускается, но "
"требует объекты `int` или `str`."

#: of vstutils.api.fields.FkField:15
msgid "Prefetch values on the frontend at list-view. Default is ``True``."
msgstr ""
"Загружать значения на фронтенде в режиме просмотра списка. Значение по "
"умолчанию — ``True``."

#: of vstutils.api.fields.FkField:17
msgid "Show the value as a link to the related model. Default is ``True``."
msgstr ""
"Отображать значение как ссылку на модель. Значение по умолчанию — "
"``True``."

#: of vstutils.api.fields.FkField:19
msgid ""
"A dictionary where keys are names of fields from the same model, and "
"values are names of query filters. If at least one of the fields that we "
"depend on is non-nullable, required, and set to null, the autocompletion "
"list will be empty, and the field will be disabled.  There are some "
"special keys for the dependence dictionary to get data that is stored on "
"the frontend without additional database query:  - ``'<<pk>>'`` gets the "
"primary key of the current instance, - ``'<<view_name>>'`` gets the view "
"name from the Vue component, - ``'<<parent_view_name>>'`` gets the parent"
" view name from the Vue component, - ``'<<view_level>>'`` gets the view "
"level, - ``'<<operation_id>>'`` gets the operation_id, - "
"``'<<parent_operation_id'>>`` gets the parent_operation_id."
msgstr ""
"Словарь, где ключи - это имена полей из той же модели, а значения - "
"названия query-фильтров. Если хотя бы одно из полей, от которых "
"существует зависимость, не допускает null, обязательно или установлено в "
"null, список автодополнения будет пустым, а поле будет отключено. Есть "
"несколько специальных ключей dependence-словаря, с помощью которых можно "
"получить данные, хранящиеся на фронтенде, не делая лишних запросов в базу"
" данных: ``'<<pk>>'`` получает первичный ключ текущего экземпляра, "
"``'<<view_name>>'`` получает имя view из компонента Vue,  "
"``'<<parent_view_name>>'`` получает имя родительского view из компонента "
"Vue,  ``'<<view_level>>'`` получает уровень view,  ``'<<operation_id>>'``"
" получает operation_id,  ``'<<parent_operation_id'>>`` получает "
"родительский operation_id."

#: of vstutils.api.fields.FkField:19
msgid ""
"A dictionary where keys are names of fields from the same model, and "
"values are names of query filters. If at least one of the fields that we "
"depend on is non-nullable, required, and set to null, the autocompletion "
"list will be empty, and the field will be disabled."
msgstr ""
"Словарь, где ключи - это имена полей из той же модели, а значения - "
"названия query-фильтров. Если хотя бы одно из полей, от которых "
"существует зависимость, не допускает null, обязательно или установлено в "
"null, список автодополнения будет пустым, и поле будет отключено."

#: of vstutils.api.fields.FkField:23
msgid ""
"There are some special keys for the dependence dictionary to get data "
"that is stored on the frontend without additional database query:"
msgstr ""
"Есть несколько специальных ключей dependence-словаря, с помощью которых "
"можно получить данные, хранящиеся на фронтенде, не делая лишних запросов "
"в базу данных:"

#: of vstutils.api.fields.FkField:26
msgid "``'<<pk>>'`` gets the primary key of the current instance,"
msgstr "``'<<pk>>'`` получает первичный ключ текущего экземпляра,"

#: of vstutils.api.fields.FkField:27
msgid "``'<<view_name>>'`` gets the view name from the Vue component,"
msgstr "``'<<view_name>>'`` получает имя view из компонента Vue,"

#: of vstutils.api.fields.FkField:28
msgid ""
"``'<<parent_view_name>>'`` gets the parent view name from the Vue "
"component,"
msgstr ""
"``'<<parent_view_name>>'`` получает имя родительского view из компонента "
"Vue,"

#: of vstutils.api.fields.FkField:29
msgid "``'<<view_level>>'`` gets the view level,"
msgstr "``'<<view_level>>'`` получает уровень view,"

#: of vstutils.api.fields.FkField:30
msgid "``'<<operation_id>>'`` gets the operation_id,"
msgstr "``'<<operation_id>>'``  получает operation_id,"

#: of vstutils.api.fields.FkField:31
msgid "``'<<parent_operation_id'>>`` gets the parent_operation_id."
msgstr "``'<<parent_operation_id'>>`` получает родительский operation_id."

#: of vstutils.api.fields.FkField:39
msgid ""
"This filter will get the primary key of the current object and make a "
"query on the frontend ``/category?my_filter=3`` where ``3`` is the "
"primary key of the current instance."
msgstr ""
"Этот фильтр получит первичный ключ текущего объекта и выполнит запрос на "
"фронтенде ``/category?my_filter=3``, где ``3`` - первичный ключ текущего "
"экземпляра."

#: of vstutils.api.fields.FkField:43
msgid ""
"A dictionary where keys are names of fields from a related model "
"(specified by this FkField), and values are values of that field."
msgstr ""
"Словарь, где ключи - это имена полей из связанной модели (указанной в "
"этом FkField), а значения - значения этого поля."

#: of vstutils.api.fields.FkField:48
msgid ""
"The intersection of `dependence.values()` and `filters.keys()` will throw"
" an error to prevent ambiguous filtering."
msgstr ""
"Пересечение `dependence.values()` и `filters.keys()` вызовет ошибку для "
"предотвращения неоднозначной фильтрации."

#: of vstutils.api.fields.FkField:50
msgid ""
"Effective only in the GUI. Works similarly to "
":class:`rest_framework.fields.IntegerField` in the API."
msgstr ""
"Действует только в графическом интерфейсе. Работает аналогично "
":class:`rest_framework.fields.IntegerField` в API."

#: of vstutils.api.fields.FkModelField:1
msgid ""
"Extends :class:`.FkField`, but stores referred model class. This field is"
" useful for :class:`django.db.models.ForeignKey` fields in model to set."
msgstr ""
"Расширяет :class:`.FkField`, но хранит указанный класс модели. Это поле "
"полезно для установки полей :class:`django.db.models.ForeignKey` в "
"модели."

#: of vstutils.api.fields.FkModelField:4
msgid ""
"model class (based on :class:`vstutils.models.BModel`) or serializer "
"class which used in API and has path in OpenAPI schema."
msgstr ""
"класс модели (основанный на :class:`vstutils.models.BModel`) или "
"сериализатор, используемый в API и имеющий свой путь в схеме OpenAPI."

#: of vstutils.api.fields.FkModelField:7
msgid ""
"this argument indicates which attribute will be get from OpenAPI schema "
"definition model as value. Default is ``id``."
msgstr ""
"этот аргумент указывает, какие атрибуты будут взяты из model definition "
"схемы OpenAPI в качестве используемого значения. По умолчанию ``id``."

#: of vstutils.api.fields.FkModelField:11
msgid ""
"this argument indicates which attribute will be get from OpenAPI schema "
"definition model as represent value. Default is ``name``."
msgstr ""
"этот аргумент указывает, какие атрибуты будут взяты из model definition "
"схемы OpenAPI в качестве отображаемого значения. По умолчанию ``name``."

#: of vstutils.api.fields.FkModelField:14
msgid "prefetch values on frontend at list-view. Default is ``True``."
msgstr ""
"делает prefetch для значений на фронтенде в list-view. ``True`` по "
"умолчанию."

#: of vstutils.api.fields.FkModelField:15
msgid "Show value as link to model. Default is ``True``."
msgstr "Отображает значение как ссылку на модель. По умолчанию ``True``."

#: of vstutils.api.fields.FkModelField:19
msgid ""
"Model class get object from database during `.to_internal_value` "
"execution. Be careful on mass save executions."
msgstr ""
"Класс модели получает объект из базы данных в процессе выполнения "
"`.to_internal_value`. Будьте осторожны при выполнении массовых "
"сохранений."

#: of vstutils.api.fields.FkModelField:22
msgid ""
"Permissions to model which is referred by this field, are not to be "
"checked. You should check it manually in signals or validators."
msgstr ""
"Permission'ы модели, на которую ссылается это поле, не проверяются. "
"Следует их проверять вручную в сигналах или валидаторах."

#: of vstutils.api.fields.HtmlField:1
msgid ""
"A specialized field for handling HTML text content, marked with the "
"format:html."
msgstr ""
"Специализированное поле для обработки HTML-текстового контента, "
"отмеченного форматом: html."

#: of vstutils.api.fields.HtmlField:9 vstutils.api.fields.TextareaField:4
msgid ""
"This field is designed for use in the graphical user interface (GUI) and "
"functions similarly to :class:`.VSTCharField` in the API."
msgstr ""
"Это поле предназначено для использования в графическом интерфейсе "
"пользователя (GUI) и работает аналогично :class:`.VSTCharField` в API."

#: of vstutils.api.fields.HtmlField:13
msgid ""
"If you have a model with an `html_content` field that stores HTML-"
"formatted text, you can use `HtmlField` in your serializer to handle this"
" content in the GUI:"
msgstr ""
"Если у вас есть модель с полем `html_content`, в котором хранится "
"HTML-форматированный текст, вы можете использовать `HtmlField` в своем "
"сериализаторе для обработки этого контента в графическом интерфейсе "
"пользователя:"

#: of vstutils.api.fields.MaskedField:1
msgid ""
"Extends the 'rest_framework.serializers.CharField' class. Field that "
"applies a mask to the input value."
msgstr ""
"Расширяет класс 'rest_framework.serializers.CharField'. Поле, применяющее"
" маску к значению."

#: of vstutils.api.fields.MaskedField:4
msgid ""
"This field is designed for applying a mask to the input value on the "
"frontend. It extends the 'rest_framework.serializers.CharField' and "
"allows the use of the `IMask <https://imask.js.org/guide.html>`_ library "
"for defining masks."
msgstr ""
"Это поле предназначено для применения маски к значению на фронтенде. Оно "
"расширяет класс 'rest_framework.serializers.CharField' и позволяет "
"использовать библиотеку `IMask <https://imask.js.org/guide.html>`_ для "
"определения масок."

#: of vstutils.api.fields.MaskedField:9
msgid ""
"The mask to be applied to the value. It can be either a dictionary or a "
"string following the `IMask` library format."
msgstr ""
"Маска, которая будет применена к значению. Это может быть как словарь, "
"так и строка в формате библиотеки `IMask`."

#: of vstutils.api.fields.MaskedField:14
msgid "In a serializer, include this field to apply a mask to a value:"
msgstr "В сериализаторе включите это поле для применения маски к значению:"

#: of vstutils.api.fields.MaskedField:21
msgid ""
"This example assumes a serializer where the ``masked_value`` field "
"represents a value with a predefined mask. The ``MaskedField`` will apply"
" the specified mask on the frontend, providing a masked input for users."
msgstr ""
"В этом примере предполагается, что сериализатор имеет поле "
"`masked_value`, представляющее значение с предопределенной маской. "
"`MaskedField` применит указанную маску на фронтенде, предоставляя "
"маскированный ввод для пользователей."

#: of vstutils.api.fields.MaskedField:26
msgid ""
"The effectiveness of this field is limited to the frontend, and the mask "
"is applied during user input."
msgstr ""
"Эффективность этого поля ограничивается фронтендом, и маска применяется "
"при вводе пользователя."

#: of vstutils.api.fields.MultipleNamedBinaryFileInJsonField:1
msgid ""
"Extends :class:`.NamedBinaryFileInJsonField` but uses list of JSONs. "
"Allows to operate with multiple files as list of "
":class:`NamedBinaryFileInJsonField`."
msgstr ""
"Расширяет :class:`.NamedBinaryFileInJsonField`, но использует список "
"JSON'ов. Позволяет оперировать несколькими файлами через список объектов "
":class:`NamedBinaryFileInJsonField`."

#: of vstutils.api.fields.MultipleNamedBinaryFileInJsonField:4
msgid ""
"Attrs: :attr:`NamedBinaryInJsonField.file`: if True, accept only "
"subclasses of File as input. If False, accept only string input. Default:"
" False."
msgstr ""
"Атрибуты: :attr:`NamedBinaryInJsonField.file`: если True, принимает "
"только подклассы File в качестве входных данных. Если False, принимает "
"только значения типа string. По умолчанию: False."

#: of vstutils.api.fields.MultipleNamedBinaryImageInJsonField:1
msgid ""
"Extends :class:`.MultipleNamedBinaryFileInJsonField` but uses list of "
"JSONs. Used for operating with multiple images and works as list of "
":class:`NamedBinaryImageInJsonField`."
msgstr ""
"Расширяет :class:`.MultipleNamedBinaryFileInJsonField`, но использует "
"список JSON'ов. Используется для оперирования несколькими изображениями и"
" работает как список объектов :class:`NamedBinaryImageInJsonField`."

#: of vstutils.api.fields.MultipleNamedBinaryImageInJsonField:4
msgid ""
"Color to fill area that is not covered by image after cropping. "
"Transparent by default but will be black if image format is not "
"supporting transparency. Can be any valid CSS color."
msgstr ""
"Цвет для заполнения области, не покрытой изображением после обрезки. По "
"умолчанию прозрачный, но будет черным, если формат изображения не "
"поддерживает прозрачность. Может быть любым допустимым цветом CSS."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:1
msgid "Field that represents a binary file in JSON format."
msgstr "Поле, представляющее бинарный файл в формате JSON."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:3
msgid ""
"If True, accept only subclasses of File as input. If False, accept only "
"string input. Default: False."
msgstr ""
"Если True, принимает только подклассы File в качестве входных данных. "
"Если False, принимает только строковые входные данные. По умолчанию: "
"False."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:6
msgid ""
"Functions to process the file after validation. Each function takes two "
"arguments: ``binary_data`` (file bytes) and ``original_data`` (reference "
"to the original JSON object). The function should return the processed "
"``binary_data``."
msgstr ""
"Функции для обработки файла после валидации. Каждая функция принимает два"
" аргумента: ``binary_data`` (байты файла) и ``original_data`` (ссылка на "
"исходный JSON-объект). Функция должна возвращать обработанный "
"``binary_data``."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:11
msgid ""
"Functions to process the file before validation. Each function takes two "
"arguments: ``binary_data`` (file bytes) and ``original_data`` (reference "
"to the original JSON object). The function should return the processed "
"``binary_data``."
msgstr ""
"Функции для обработки файла перед валидацией. Каждая функция принимает "
"два аргумента: ``binary_data`` (байты файла) и ``original_data`` (ссылка "
"на исходный JSON-объект). Функция должна возвращать обработанный "
"``binary_data``."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:16
msgid "Maximum allowed size of the file content in bytes."
msgstr "Максимально допустимый размер содержимого файла в байтах."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:17
msgid "Minimum allowed size of the file content in bytes."
msgstr "Минимально допустимый размер содержимого файла в байтах."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:18
msgid "Minimum length of the file name. Only applicable when ``file=True``."
msgstr "Минимальная длина имени файла. Применяется только при ``file=True``."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:19
msgid "Maximum length of the file name. Only applicable when ``file=True``."
msgstr "Максимальная длина имени файла. Применяется только при ``file=True``."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:22
msgid ""
"This field is designed for storing binary files alongside their names in "
":class:`django.db.models.CharField` or "
":class:`django.db.models.TextField` model fields. All manipulations "
"involving decoding and encoding binary content data occur on the client, "
"imposing reasonable limits on file size."
msgstr ""
"Это поле предназначено для хранения бинарных файлов вместе с их именами в"
" полях модели :class:`django.db.models.CharField` или "
":class:`django.db.models.TextField`. Все манипуляции, связанные с "
"декодированием и кодированием данных бинарного содержимого, выполняются "
"на клиенте, что накладывает разумные ограничения на размер файла."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:27
msgid ""
"Additionally, this field can construct a "
":class:`django.core.files.uploadedfile.SimpleUploadedFile` from incoming "
"JSON and store it as a file in :class:`django.db.models.FileField` if the"
" `file` attribute is set to `True`."
msgstr ""
"Кроме того, это поле может создать "
":class:`django.core.files.uploadedfile.SimpleUploadedFile` из входящего "
"JSON и сохранить его как файл в :class:`django.db.models.FileField`, если"
" атрибут `file` установлен в значение `True`."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:34
msgid "In a serializer, include this field to handle binary files:"
msgstr "В сериализаторе включите это поле для обработки бинарных файлов:"

#: of vstutils.api.fields.NamedBinaryFileInJsonField:41
msgid ""
"This example assumes a serializer where the ``binary_data`` field "
"represents binary file information in JSON format. The "
"``NamedBinaryFileInJsonField`` will then handle the storage and retrieval"
" of binary files in a user-friendly manner."
msgstr ""
"В этом примере предполагается, что в сериализаторе поле ``binary_data`` "
"представляет информацию о бинарном файле в формате JSON. Поле "
"``NamedBinaryFileInJsonField`` обеспечит обработку хранения и извлечения "
"бинарных файлов удобным для пользователя образом."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:46
msgid "The binary file is represented in JSON with the following properties:"
msgstr "Бинарный файл представлен в формате JSON со следующими свойствами:"

#: of vstutils.api.fields.NamedBinaryFileInJsonField:48
msgid "**name** (str): Name of the file."
msgstr "**name** (str): Имя файла."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:49
msgid "**mediaType** (str): MIME type of the file."
msgstr "**mediaType** (str): MIME-тип файла."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:50
msgid ""
"**content** (str or File): Content of the file. If `file` is True, it "
"will be a reference to the file; otherwise, it will be base64-encoded "
"content."
msgstr ""
"**content** (str или File): Содержимое файла. Если `file` установлен в "
"True, это будет ссылка на файл; в противном случае содержимое будет "
"закодировано base64."

#: of vstutils.api.fields.NamedBinaryFileInJsonField:54
msgid ""
"The client application will display the content as a download link. Users"
" will interact with the binary file through the application, with the "
"exchange between the Rest API and the client occurring through the "
"presented JSON object."
msgstr ""
"Приложение клиента отобразит содержимое в виде ссылки для скачивания. "
"Пользователи будут взаимодействовать с бинарным файлом через приложение, "
"а обмен между Rest API и клиентом будет происходить через представленный "
"объект JSON."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:1
msgid ""
"Field that represents an image in JSON format, extending "
":class:`.NamedBinaryFileInJsonField`."
msgstr ""
"Поле, представляющее изображение в формате JSON, расширяющее "
":class:`.NamedBinaryFileInJsonField`."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:3
msgid ""
"Color to fill the area not covered by the image after cropping. "
"Transparent by default but will be black if the image format does not "
"support transparency. Can be any valid CSS color."
msgstr ""
"Цвет для заполнения области, не покрытой изображением после обрезки. По "
"умолчанию прозрачный, но будет черным, если формат изображения не "
"поддерживает прозрачность. Может быть любым допустимым цветом CSS."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:8
msgid ""
"This field is designed for handling image files alongside their names in "
":class:`django.db.models.CharField` or "
":class:`django.db.models.TextField` model fields. It extends the "
"capabilities of :class:`.NamedBinaryFileInJsonField` to specifically "
"handle images."
msgstr ""
"Это поле предназначено для хранения бинарных файлов вместе с их именами в"
" полях модели :class:`django.db.models.CharField` или "
":class:`django.db.models.TextField`. Оно расширяет возможности "
":class:`.NamedBinaryFileInJsonField` для специальной обработки "
"изображений."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:12
msgid ""
"Additionally, this field validates the image using the following "
"validators: - :class:`vstutils.api.validators.ImageValidator` - "
":class:`vstutils.api.validators.ImageResolutionValidator` - "
":class:`vstutils.api.validators.ImageHeightValidator`"
msgstr ""
"Кроме того, это поле проверяет изображение с использованием следующих "
"валидаторов: - :class:`vstutils.api.validators.ImageValidator` - "
":class:`vstutils.api.validators.ImageResolutionValidator` - "
":class:`vstutils.api.validators.ImageHeightValidator`"

#: of vstutils.api.fields.NamedBinaryImageInJsonField:17
msgid ""
"When saving and with the added validators, the field will display a "
"corresponding window for adjusting the image to the specified parameters,"
" providing a user-friendly interface for managing images."
msgstr ""
"При сохранении и с добавленными валидаторами поле будет отображать "
"соответствующее окно для настройки изображения по указанным параметрам, "
"предоставляя удобный интерфейс для управления изображениями."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:20
msgid "The image file is represented in JSON with the following properties:"
msgstr "Бинарный файл представлен в формате JSON со следующими свойствами:"

#: of vstutils.api.fields.NamedBinaryImageInJsonField:22
msgid "**name** (str): Name of the image file."
msgstr "**name** (str): Имя файла изображения."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:23
msgid "**mediaType** (str): MIME type of the image file."
msgstr "**mediaType** (str): MIME-тип файла изображения."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:24
msgid ""
"**content** (str or File): Content of the image file. If `file` is True, "
"it will be a reference to the image file; otherwise, it will be "
"base64-encoded content."
msgstr ""
"**content** (str или File): Содержимое файла изображения. Если `file` "
"установлен в True, это будет ссылка на файл; в противном случае "
"содержимое будет закодировано base64."

#: of vstutils.api.fields.NamedBinaryImageInJsonField:28
msgid ""
"The client application will display the content as an image. Users will "
"interact with the image through the application, with the exchange "
"between the Rest API and the client occurring through the presented JSON "
"object."
msgstr ""
"Приложение клиента отобразит содержимое как изображение. Пользователи "
"будут взаимодействовать с изображением через приложение, и обмен между "
"Rest API и клиентом будет происходить через представленный объект JSON."

#: of vstutils.api.fields.PasswordField:1
msgid ""
"Extends `CharField <https://www.django-rest-framework.org/api-"
"guide/fields/#charfield>`_ but in schema set format to `password`. Show "
"all characters as asterisks instead of real value in GUI."
msgstr ""
"Расширяет `CharField <https://www.django-rest-framework.org/api-"
"guide/fields/#charfield>`_, но в схеме имеет format = `password`. В "
"пользовательском интерфейсе отображает все символы как звездочки вместо "
"реально введенных данных."

#: of vstutils.api.fields.PhoneField:1
msgid ""
"Extends the 'rest_framework.serializers.CharField' class. Field for "
"representing a phone number in international format."
msgstr ""
"Расширяет класс 'rest_framework.serializers.CharField'. Поле для "
"представления номера телефона в международном формате."

#: of vstutils.api.fields.PhoneField:4
msgid ""
"This field is designed for capturing and validating phone numbers in "
"international format. It extends the "
"'rest_framework.serializers.CharField' and adds custom validation to "
"ensure that the phone number contains only digits."
msgstr ""
"Это поле предназначено для захвата и валидации номеров телефонов в "
"международном формате. Оно расширяет класс "
"'rest_framework.serializers.CharField' и добавляет пользовательскую "
"валидацию для обеспечения того, что номер телефона содержит только цифры."

#: of vstutils.api.fields.PhoneField:9
msgid "In a serializer, include this field to handle phone numbers:"
msgstr "В сериализаторе включите это поле для обработки номеров телефонов:"

#: of vstutils.api.fields.PhoneField:16
msgid ""
"This example assumes a serializer where the ``phone_number`` field "
"represents a phone number in international format. The ``PhoneField`` "
"will then handle the validation and representation of phone numbers, "
"making it convenient for users to input standardized phone numbers."
msgstr ""
"В этом примере предполагается, что сериализатор имеет поле "
"`phone_number`, представляющее номер телефона в международном формате. "
"`PhoneField` затем обработает валидацию и представление номеров "
"телефонов, облегчая пользователям ввод стандартизированных номеров "
"телефонов."

#: of vstutils.api.fields.PhoneField:21
msgid ""
"The field will be displayed in the client application as an input field "
"for entering a phone number, including the country code."
msgstr ""
"Поле будет отображаться в клиентском приложении в виде поля ввода для "
"ввода номера телефона, включая код страны."

#: of vstutils.api.fields.PlusMinusIntegerField:1
msgid "Integer field that renders +/- buttons."
msgstr "Целочисленное поле, которое отрисовывается как кнопки +/-."

#: of vstutils.api.fields.QrCodeField:1
msgid "A versatile field for encoding various types of data into QR codes."
msgstr "Универсальное поле для кодирования различных типов данных в QR-коды."

#: of vstutils.api.fields.QrCodeField:3
msgid ""
"This field can encode a wide range of data into a QR code representation,"
" making it useful for displaying QR codes in the user interface. It works"
" by serializing or deserializing data using the specified child field."
msgstr ""
"Это поле может закодировать различные типы данных в представление "
"QR-кода, что делает его полезным для отображения QR-кодов в "
"пользовательском интерфейсе. Оно работает путем сериализации или "
"десериализации данных с использованием указанного дочернего поля."

#: of vstutils.api.fields.QrCodeField:11
msgid ""
"Suppose you have a model with a `data` field, and you want to display its"
" QR code representation in the GUI. You can use `QrCodeField` in your "
"serializer:"
msgstr ""
"Предположим, у вас есть модель с полем `data`, и вы хотите отображать его"
" представление в виде QR-кода в графическом интерфейсе пользователя. Вы "
"можете использовать `QrCodeField` в своем сериализаторе:"

#: of vstutils.api.fields.QrCodeField:26
msgid ""
"In this example, the qr_code_data field will represent the QR code "
"generated from the data field in the GUI. Users can interact with this QR"
" code, and if their device supports it, they can scan the code for "
"further actions."
msgstr ""
"В этом примере поле qr_code_data будет представлять QR-код, "
"сгенерированный из поля данных в графическом интерфейсе пользователя. "
"Пользователи могут взаимодействовать с этим QR-кодом, и, если их "
"устройство поддерживает, они могут сканировать код для дополнительных "
"действий."

#: of vstutils.api.fields.RatingField:1
msgid ""
"Extends class 'rest_framework.serializers.FloatField'. This field "
"represents a rating form input on frontend. Grading limits can be "
"specified with 'min_value=' and 'max_value=', defaults are 0 to 5. "
"Minimal step between grades are specified in 'step=', default - 1. "
"Frontend visual representation can be chosen with 'front_style=', "
"available variants are listed in 'self.valid_front_styles'."
msgstr ""
"Расширяет класс 'rest_framework.serializers.FloatField'. Это поле "
"представляет собой ввод рейтинга пользователем на фронтенде. Пределы "
"оценок могут быть заданы с помощью 'min_value=' и 'max_value=', по "
"умолчанию 0 и 5 соответственно. Минимальный шаг между оценками "
"определяется параметром 'step=', по умолчанию 1. Внешний вид на фронтенде"
" может быть выбран с помощью 'front_style=', доступные варианты "
"перечислены в 'self.valid_front_styles'."

#: of vstutils.api.fields.RatingField:6
msgid ""
"For 'slider' front style, you can specify slider color, by passing valid "
"color to 'color='. For 'fa_icon' front style, you can specify FontAwesome"
" icon that would be used for displaying rating, by passing a valid "
"FontAwesome icon code to 'fa_class='."
msgstr ""
"Для стиля 'slider' вы можете указать цвет слайдера, передав валидный цвет"
" в 'color='. Для стиля 'fa_icon' вы можете указать иконку FontAwesome, "
"которая будет использована для отображения рейтинга, передав валидный код"
" иконки FontAwesome в 'fa_class='."

#: of vstutils.api.fields.RatingField:11
msgid "minimal level"
msgstr "минимальный уровень"

#: of vstutils.api.fields.RatingField:14
msgid "maximal level"
msgstr "максимальный уровень"

#: of vstutils.api.fields.RatingField:17
msgid "minimal step between levels"
msgstr "минимальный шаг между уровнями"

#: of vstutils.api.fields.RatingField:20
msgid "visualization on frontend field. Allowed: ['stars', 'slider', 'fa_icon']."
msgstr "визуализация поля на фронтенде. Допустимы: ['stars', 'slider', 'fa_icon']."

#: of vstutils.api.fields.RatingField:22
msgid "color of rating element (star, icon or slider) in css format"
msgstr "цвет элемента рейтинга (star, icon или slider) в формате css"

#: of vstutils.api.fields.RatingField:24
msgid "FontAwesome icon code"
msgstr "код иконки FontAwesome"

#: of vstutils.api.fields.RedirectCharField:1
msgid ""
"Field for redirect by string. Often used in actions for redirect after "
"execution."
msgstr ""
"Поле для редиректа по строке. Часто используется в экшенах для редиректа "
"после выполнения."

#: of vstutils.api.fields.RedirectCharField:4
#: vstutils.api.fields.RedirectIntegerField:4
msgid ""
"Effective only in GUI. Works similar to "
":class:`rest_framework.fields.IntegerField` in API."
msgstr ""
"Действует только в графическом интерфейсе. Работает аналогично "
":class:`rest_framework.fields.IntegerField` в API."

#: of vstutils.api.fields.RedirectFieldMixin:1
msgid ""
"Field mixin indicates that this field is used to send redirect address to"
" frontend after some action."
msgstr ""
"Миксина поля, указывающая, что это поле используется для отправки адреса "
"редиректа после некоторого действия."

#: of vstutils.api.fields.RedirectFieldMixin:3
msgid ""
"prefix for operation_id, for example if operation_id is `history_get` "
"then operation_name is `history`"
msgstr ""
"префикс для operation_id, например, если operation_id = `history_get`, то"
" operation_name = `history`"

#: of vstutils.api.fields.RedirectFieldMixin:6
msgid ""
"name of the field that we depend on, its value will be used for "
"operation_id"
msgstr ""
"имя поля, от которого оно зависит, его значение будет использовано для "
"operation_id"

#: of vstutils.api.fields.RedirectFieldMixin:8
msgid "if True then name of the field will be added at the end of operation_id"
msgstr "если True, то имя поля будет добавлено в конец operation_id"

#: of vstutils.api.fields.RedirectIntegerField:1
msgid ""
"Field for redirect by id. Often used in actions for redirect after "
"execution."
msgstr ""
"Поля для редиректа по id. Часто используется в экшенах для редиректа "
"после выполнения."

#: of vstutils.api.fields.RelatedListField:1
msgid ""
"Extends :class:`.VSTCharField` to represent a reverse ForeignKey relation"
" as a list of related instances."
msgstr ""
"Расширяет класс :class:`.VSTCharField`. Представляет обратное ForeignKey "
"отношение в виде списка связанных экземпляров."

#: of vstutils.api.fields.RelatedListField:3
msgid ""
"This field allows you to output the reverse ForeignKey relation as a list"
" of related instances. To use it, specify the ``related_name`` kwarg "
"(related manager for reverse ForeignKey) and the ``fields`` kwarg (list "
"or tuple of fields from the related model to be included)."
msgstr ""
"Это поле позволяет представить обратное ForeignKey отношение в виде "
"списка связанных экземпляров. Для использования укажите ``related_name`` "
"(related manager для обратного ForeignKey) и ``fields`` (список или "
"кортеж полей из связанной модели, которые должны быть включены)."

#: of vstutils.api.fields.RelatedListField:7
msgid ""
"By default, :class:`.VSTCharField` is used to serialize all field values "
"and represent them on the frontend. You can specify the "
"`serializer_class` and override fields as needed. For example, title, "
"description, and other field properties can be set to customize frontend "
"behavior."
msgstr ""
"По умолчанию используется :class:`.VSTCharField` для сериализации всех "
"значений поля и их представления на фронтенде. Вы можете указать "
"`serializer_class` и переопределить поля по мере необходимости. Например,"
" заголовок, описание и другие свойства полей можно установить для "
"настройки поведения на фронтенде."

#: of vstutils.api.fields.RelatedListField:12
msgid "Name of a related manager for reverse ForeignKey."
msgstr "Имя related manager для обратного ForeignKey."

#: of vstutils.api.fields.RelatedListField:15
msgid "List of related model fields."
msgstr "Список связанных полей модели."

#: of vstutils.api.fields.RelatedListField:18
msgid ""
"Determines how fields are represented on the frontend. Must be either "
"``list`` or ``table``."
msgstr ""
"Определяет, как поля будут представлены на фронтенде. Должен быть либо "
"``list``, либо ``table``."

#: of vstutils.api.fields.RelatedListField:20
msgid ""
"Custom handlers mapping, where key: field_name, value: callable_obj that "
"takes params: instance[dict], fields_mapping[dict], model, "
"field_name[str]."
msgstr ""
"Отображение пользовательских обработчиков, где ключ: field_name, "
"значение: callable_obj, принимающий параметры: instance[dict], "
"fields_mapping[dict], model, field_name[str]."

#: of vstutils.api.fields.RelatedListField:25
msgid ""
"Serializer to customize types of fields. If no serializer is provided, "
":class:`.VSTCharField` will be used for every field in the `fields` list."
msgstr ""
"Сериализатор для настройки типов полей. Если сериализатор не "
"предоставлен, будет использован :class:`.VSTCharField` для каждого поля "
"из списка `fields`."

#: of vstutils.api.fields.RelatedListField:30
msgid ""
"This field is deprecated. Use serializers with the ``many=True`` "
"attribute. To change the display on the page, use "
":const:`vstutils.api.serializers.DisplayModeList`."
msgstr ""
"Это поле устарело. Используйте сериализаторы с атрибутом ``many=True``. "
"Чтобы изменить отображение на странице, используйте "
":const:`vstutils.api.serializers.DisplayModeList`."

#: of vstutils.api.fields.SecretFileInString:1
msgid ""
"This field extends :class:`.FileInStringField` but hides its value in the"
" admin interface."
msgstr ""
"Поле, расширяющее :class:`.FileInStringField`, но скрывающее свое "
"значение в интерфейсе администратора."

#: of vstutils.api.fields.TextareaField:1
msgid "A specialized field that allows the input and display of multiline text."
msgstr ""
"Специализированное поле, которое позволяет вводить и отображать "
"многострочный текст."

#: of vstutils.api.fields.TextareaField:8
msgid ""
"Suppose you have a model with a `description` field that can contain "
"multiline text. You can use `TextareaField` in your serializer to enable "
"users to input and view multiline text in the GUI:"
msgstr ""
"Предположим, у вас есть модель с полем `description`, которое может "
"содержать многострочный текст. Вы можете использовать `TextareaField` в "
"вашем сериализаторе, чтобы пользователи могли вводить и просматривать "
"многострочный текст в графическом интерфейсе:"

#: of vstutils.api.fields.UptimeField:1
msgid ""
"Time duration field, in seconds, specifically designed for computing and "
"displaying system uptime."
msgstr ""
"Поле продолжительности времени, в секундах, специально разработанное для "
"вычисления и отображения времени работы системы."

#: of vstutils.api.fields.UptimeField:3
msgid ""
"This field is effective only in the GUI and behaves similarly to "
":class:`rest_framework.fields.IntegerField` in the API."
msgstr ""
"Это поле действует только в графическом интерфейсе и ведет себя "
"аналогично :class:`rest_framework.fields.IntegerField` в API."

#: of vstutils.api.fields.UptimeField:6
msgid ""
"The `UptimeField` class transforms time in seconds into a user-friendly "
"representation on the frontend. It intelligently selects the most "
"appropriate pattern from the following templates:"
msgstr ""
"Класс `UptimeField` преобразует время в секундах в удобочитаемое "
"представление на фронтенде. Он интеллектуально выбирает наиболее "
"подходящий шаблон из следующих:"

#: of vstutils.api.fields.UptimeField:9
msgid "``HH:mm:ss`` (e.g., 23:59:59)"
msgstr "``HH:mm:ss`` (например, 23:59:59)"

#: of vstutils.api.fields.UptimeField:10
msgid "``dd HH:mm:ss`` (e.g., 01d 00:00:00)"
msgstr "``dd HH:mm:ss`` (например, 01d 00:00:00)"

#: of vstutils.api.fields.UptimeField:11
msgid "``mm dd HH:mm:ss`` (e.g., 01m 30d 00:00:00)"
msgstr "``mm dd HH:mm:ss`` (например, 01m 30d 00:00:00)"

#: of vstutils.api.fields.UptimeField:12
msgid "``yy mm dd HH:mm:ss`` (e.g., 99y 11m 30d 22:23:24)"
msgstr "``yy mm dd HH:mm:ss`` (например, 99y 11m 30d 22:23:24)"

#: of vstutils.api.fields.UptimeField:21
msgid ""
"This example assumes a serializer where the `uptime` field represents a "
"time duration in seconds. The `UptimeField` will then display the "
"duration in a human-readable format on the frontend, making it convenient"
" for users to interpret and input values."
msgstr ""
"В этом примере предполагается, что сериализатор имеет поле `uptime`, "
"представляющее продолжительность времени в секундах. `UptimeField` затем "
"отобразит продолжительность в удобочитаемом формате на фронтенде, "
"облегчая пользователям интерпретацию и ввод значений."

#: of vstutils.api.fields.VSTCharField:1
msgid ""
"CharField (extends :class:`rest_framework.fields.CharField`). This field "
"translate any json type to string for model."
msgstr ""
"CharField (расширяет :class:`rest_framework.fields.CharField`). Это поле "
"преобразует любой json в строку для модели."

#: of vstutils.api.fields.WYSIWYGField:1
msgid ""
"Extends the :class:`.TextareaField` class to render the "
"https://ui.toast.com/tui-editor on the frontend."
msgstr ""
"Расширяет класс :class:`.TextareaField` для отображения редактора "
"https://ui.toast.com/tui-на фронтенде."

#: of vstutils.api.fields.WYSIWYGField:3
msgid ""
"This field is specifically designed for rendering a WYSIWYG editor on the"
" frontend, using the https://ui.toast.com/tui-editor. It saves data as "
"markdown and escapes all HTML tags."
msgstr ""
"Это поле специально разработано для отображения WYSIWYG-редактора на "
"фронтенде с использованием https://ui.toast.com/tui-editor. Сохраняет "
"данные в формате markdown и экранирует все HTML-теги."

#: of vstutils.api.fields.WYSIWYGField:6
msgid ""
"HTML-escape input. Enabled by default to prevent HTML injection "
"vulnerabilities."
msgstr ""
"Экранирование HTML-тегов для входных данных. Включено по умолчанию для "
"предотвращения уязвимостей HTML-инъекций."

#: of vstutils.api.fields.WYSIWYGField:10
msgid ""
"In a serializer, include this field to render a WYSIWYG editor on the "
"frontend:"
msgstr ""
"Включите это поле в сериализаторе, чтобы отобразить WYSIWYG-редактор на "
"фронтенде:"

#: of vstutils.api.fields.WYSIWYGField:17
msgid ""
"This example assumes a serializer where the ``wysiwyg_content`` field "
"represents data to be rendered in a WYSIWYG editor on the frontend. The "
"``WYSIWYGField`` ensures that the content is saved as markdown and HTML "
"tags are escaped to enhance security."
msgstr ""
"В этом примере предполагается, что сериализатор имеет поле "
"`wysiwyg_content`, представляющее данные, которые должны быть отображены "
"в WYSIWYG-редакторе на фронтенде. `WYSIWYGField` гарантирует, что "
"содержимое сохраняется в формате markdown, и HTML-теги экранируются для "
"повышения безопасности."

#: of vstutils.api.fields.WYSIWYGField:22
msgid ""
"Enabling the ``escape`` option is recommended to prevent potential HTML "
"injection vulnerabilities."
msgstr ""
"Рекомендуется включить опцию ``escape`` для предотвращения потенциальных "
"уязвимостей HTML-инъекций."

#: of vstutils.api.fields.WYSIWYGField:25
msgid ""
"The rendering on the frontend is achieved using the https://ui.toast.com"
"/tui-editor."
msgstr ""
"Отображение на фронтенде достигается с использованием "
"https://ui.toast.com/tui-editor."

#: ../../backend.rst:56
msgid "Validators"
msgstr "Валидаторы"

#: ../../backend.rst:58
msgid "There are validation classes for fields."
msgstr "Классы для валидации полей."

#: of vstutils.api.validators.FileMediaTypeValidator:1
msgid "Base Image Validation class. Validates media types."
msgstr "Базовый класс для валидации изображений. Проверяет media types."

#: of vstutils.api.validators.FileMediaTypeValidator:5
#: vstutils.api.validators.ImageValidator:8
msgid "Tuple or List of file extensions, that should pass the validation"
msgstr "Кортеж или список файловых расширений, которые должны проходить проверку."

#: of vstutils.api.validators.FileMediaTypeValidator:7
#: vstutils.api.validators.ImageValidator:10
msgid ""
"Raises rest_framework.exceptions.ValidationError: in case file extension "
"are not in the list"
msgstr ""
"Выбрасывает rest_framework.exceptions.ValidationError в случае, если "
"расширение файла не присутствует в списке"

#: of vstutils.api.validators.ImageBaseSizeValidator:1
msgid ""
"Validates image size. To use this class for validating image "
"width/height, rewrite self.orientation to ('height',) or ('width',) or "
"('height', 'width')"
msgstr ""
"Проверяет размер изображения. Чтобы использовать этот класс для валидации"
" ширины или высоты, переопределите self.orientation в ('height',), "
"('width',) или ('height', 'width')"

#: of vstutils.api.validators.ImageBaseSizeValidator:5
msgid ""
"Raises rest_framework.exceptions.ValidationError: if not(min <= (height "
"or width) <= max)"
msgstr ""
"Выбрасывает rest_framework.exceptions.ValidationError, если not(min <= "
"(height or width) <= max)"

#: of vstutils.api.validators.ImageHeightValidator:1
msgid "Wrapper for ImageBaseSizeValidator that validates only height"
msgstr "Обертка для ImageBaseSizeValidator, проверяющая только высоту"

#: of vstutils.api.validators.ImageHeightValidator:3
#: vstutils.api.validators.ImageResolutionValidator:3
msgid "minimal height of an image being validated"
msgstr "минимальная валидная высота изображения"

#: of vstutils.api.validators.ImageHeightValidator:4
#: vstutils.api.validators.ImageResolutionValidator:4
msgid "maximal height of an image being validated"
msgstr "максимальная валидная высота изображения"

#: of vstutils.api.validators.ImageOpenValidator:1
msgid ""
"Image validator that checks if image can be unpacked from b64 to PIL "
"Image obj. Won't work if Pillow isn't installed."
msgstr ""
"Валидатор изображения, который проверяет, может ли изображения быть "
"распаковано из b64 в объект PIL Image. Не будет работать, если не "
"установлен Pillow."

#: of vstutils.api.validators.ImageOpenValidator:4
msgid ""
"Raises rest_framework.exceptions.ValidationError if PIL throws error when"
" trying to open image"
msgstr ""
"Выбрасывает rest_framework.exceptions.ValidationError, если PIL "
"выбрасывает ошибку при попытке открыть изображение"

#: of vstutils.api.validators.ImageResolutionValidator:1
msgid "Wrapper for ImageBaseSizeValidator that validates both height and width"
msgstr "Обертка для ImageBaseSizeValidator, проверяющая как высоту, так и ширину."

#: of vstutils.api.validators.ImageResolutionValidator:5
#: vstutils.api.validators.ImageWidthValidator:3
msgid "minimal width of an image being validated"
msgstr "минимальная валидная ширина изображения"

#: of vstutils.api.validators.ImageResolutionValidator:6
#: vstutils.api.validators.ImageWidthValidator:4
msgid "maximal width of an image being validated"
msgstr "максимальная валидная ширина изображения"

#: of vstutils.api.validators.ImageValidator:1
msgid ""
"Base Image Validation class. Validates image format. Won't work if Pillow"
" isn't installed. Base Image Validation class. Validates media types."
msgstr ""
"Базовый класс для валидации изображения. Проверяет формат изображения. Не"
" будет работать, если Pillow не установлен. Базовый класс для валидации "
"изображения. Проверяет media types."

#: of vstutils.api.validators.ImageValidator.has_pillow:1
msgid "Check if Pillow is installed"
msgstr "Проверьте, установлен ли Pillow"

#: of vstutils.api.validators.ImageWidthValidator:1
msgid "Wrapper for ImageBaseSizeValidator that validates only width"
msgstr "Обертка для ImageBaseSizeValidator, проверяющая только ширину"

#: of vstutils.api.validators.RegularExpressionValidator:1
msgid "Class for regular expression based validation"
msgstr "Класс для валидации на основе регулярного выражения"

#: of vstutils.api.validators.RegularExpressionValidator:3
msgid "in case value does not match regular expression"
msgstr "в случае, если значение не соответствует регулярному выражению"

#: of vstutils.api.validators.UrlQueryStringValidator:1
msgid "Class for validation url query string, for example a=&b=1"
msgstr "Класс для валидации строки url query, например a=&b=1"

#: of vstutils.api.validators.resize_image:1
msgid ""
"Utility function to resize image proportional to specific values. Can "
"create white margins if it's needed to satisfy required size"
msgstr ""
"Вспомогательная функция для изменения размера изображения пропорционально"
" определенным значениям. Может создать белые поля в случае, если это "
"необходимо для удовлетворения требуемого размера"

#: of vstutils.api.validators.resize_image:5
#: vstutils.api.validators.resize_image:13
#: vstutils.api.validators.resize_image_from_to:5
#: vstutils.api.validators.resize_image_from_to:11
msgid "Pillow Image object"
msgstr "объект Pillow Image"

#: of vstutils.api.validators.resize_image:8
msgid "Required width"
msgstr "Необходимая ширина"

#: of vstutils.api.validators.resize_image:11
msgid "Required height"
msgstr "Необходимая высота"

#: of vstutils.api.validators.resize_image_from_to:1
msgid ""
"Utility function to resize image proportional to values between min and "
"max values for each side. Can create white margins if it's needed to "
"satisfy restrictions"
msgstr ""
"Вспомогательная функция для изменения размера изображения пропорционально"
" значениям между минимальным и максимальным значениями для каждой "
"стороны. Может создать белые поля, если это необходимо для соблюдения "
"ограничений"

#: of vstutils.api.validators.resize_image_from_to:8
msgid ""
"Dict with min/max side restrictions like: ``{'width': {'min': 300, 'max: "
"600'}, 'height':  {'min': 400, 'max: 800'}}``"
msgstr ""
"Словарь с максимальным/минимальным ограничениями, например ``{'width': "
"{'min': 300, 'max: 600'}, 'height':  {'min': 400, 'max: 800'}}``"

#: ../../backend.rst:64
msgid "Serializers"
msgstr "Сериализаторы"

#: of vstutils.api.serializers:1
msgid ""
"Default serializer classes for web-api. Read more in Django REST "
"Framework documentation for `Serializers <https://www.django-rest-"
"framework.org/api-guide/serializers/>`_."
msgstr ""
"Стандартные классы сериализаторов для web-api. Читайте подробнее в "
"документации сериализаторов Django REST Framework `Serializers "
"<https://www.django-rest-framework.org/api-guide/serializers/>`_."

#: of vstutils.api.serializers.BaseSerializer:1
msgid "Default serializer with logic to work with objects."
msgstr "Сериализатор по умолчанию с логикой для работы с объектами."

#: of vstutils.api.serializers.BaseSerializer:3
msgid ""
"This serializer serves as a base class for creating serializers to work "
"with non-model objects. It extends the "
"'rest_framework.serializers.Serializer' class and includes additional "
"logic for handling object creation and updating."
msgstr ""
"Этот сериализатор служит базовым классом для создания сериализаторов для "
"работы с объектами, не являющимися моделями. Он расширяет класс "
"'rest_framework.serializers.Serializer' и включает дополнительную логику "
"для обработки создания и обновления объектов."

#: of vstutils.api.serializers.BaseSerializer:8
msgid ""
"You can set the ``generated_fields`` attribute in the ``Meta`` class to "
"automatically include default CharField fields. You can also customize "
"the field creation using the ``generated_field_factory`` attribute."
msgstr ""
"Вы также можете настроить ``generated_fields`` в атрибуте класса "
"``Meta``, чтобы получить сериализатор с полями CharField по умолчанию. "
"Настройте атрибут ``generated_field_factory`` чтобы изменить фабричный "
"метод по умолчанию."

#: of vstutils.api.serializers.BaseSerializer:21
msgid ""
"In this example, the ``MySerializer`` class extends ``BaseSerializer`` "
"and includes an additional generated field."
msgstr ""
"В этом примере класс ``MySerializer`` расширяет ``BaseSerializer`` и "
"включает дополнительное созданное поле."

#: of vstutils.api.serializers.DisplayMode:1
msgid ""
"Enumeration for specifying how a serializer should be displayed on the "
"frontend."
msgstr ""
"Перечисление для указания того, как сериализатор должен отображаться на "
"фронтенде."

#: of vstutils.api.serializers.DisplayMode:3
msgid ""
"This class is used to set the ``_display_mode`` property in a serializer "
"to control its UI behavior."
msgstr ""
"Этот класс используется для установки свойства ``_display_mode`` в "
"сериализаторе для управления его поведением в пользовательском "
"интерфейсе."

#: of vstutils.api.serializers.DisplayMode:7
msgid "To set the display mode to steps:"
msgstr "Чтобы установить режим отображения в виде последовательных шагов:"

#: of vstutils.api.serializers.DisplayMode:15
msgid "To use the default display mode:"
msgstr "Чтобы использовать режим отображения по умолчанию:"

#: of vstutils.api.serializers.DisplayMode:23
msgid ""
"Using `DisplayMode` allows developers to customize the interface based on"
" the workflow needs, making forms and data entry more user-friendly and "
"intuitive."
msgstr ""
"Использование `DisplayMode` позволяет разработчикам настраивать интерфейс"
" в соответствии с потребностями рабочего процесса, делая формы и ввод "
"данных более удобными и интуитивно понятными."

#: ../../docstring of vstutils.api.serializers.DisplayMode.DEFAULT:1
msgid "Will be used if no mode provided."
msgstr "Используется, когда не задано никакого режима."

#: ../../docstring of vstutils.api.serializers.DisplayMode.STEP:1
msgid ""
"Each properties group displayed as separate tab. On creation displayed as"
" multiple steps."
msgstr ""
"Каждая группа параметров отображается на раздельных вкладках. При "
"создании выглядит как пошаговый мастер."

#: of vstutils.api.serializers.DisplayModeList:1
msgid ""
"Enumeration for specifying how a list serializer should be displayed on "
"the frontend."
msgstr ""
"Перечисление для указания того, как сериализатор списка должен "
"отображаться на фронтенде."

#: of vstutils.api.serializers.DisplayModeList:3
msgid ""
"This class is used to set the ``_display_mode_list`` property in a list "
"serializer to control its UI behavior when dealing with multiple "
"instances."
msgstr ""
"Этот класс используется для установки свойства ``_display_mode_list`` в "
"сериализаторе списка для управления его поведением в пользовательском "
"интерфейсе при работе с несколькими экземплярами."

#: of vstutils.api.serializers.DisplayModeList:8
msgid "To set the list display mode to table view:"
msgstr "Чтобы установить режим отображения списка в виде таблицы:"

#: of vstutils.api.serializers.DisplayModeList:20
msgid ""
"To use the default list display mode ensure that class doesn't have "
"``_display_mode_list`` class property or set value to "
"``DisplayModeList.DEFAULT``."
msgstr ""
"Чтобы использовать режим отображения списка по умолчанию, убедитесь, что "
"класс не содержит свойства ``_display_mode_list`` или установите значение"
" в ``DisplayModeList.DEFAULT``."

#: of vstutils.api.serializers.DisplayModeList:23
msgid ""
"`DisplayModeList` enables developers to tailor the appearance of list "
"serializers, ensuring that users can interact with multiple data entries "
"effectively in the interface."
msgstr ""
"`DisplayModeList` позволяет разработчикам настраивать внешний вид "
"сериализаторов списка, обеспечивая эффективное взаимодействие "
"пользователей с несколькими записями данных в интерфейсе."

#: ../../docstring of vstutils.api.serializers.DisplayModeList.DEFAULT:1
msgid "It will be displayed as a standard list of JSON objects."
msgstr "Будет отображаться как стандартный список объектов JSON."

#: ../../docstring of vstutils.api.serializers.DisplayModeList.TABLE:1
msgid "It will be displayed as a table view."
msgstr "Будет отображаться в виде таблицы."

#: of vstutils.api.serializers.EmptySerializer:1
msgid ""
"Default serializer for empty responses. In generated GUI this means that "
"action button won't show additional view before execution."
msgstr ""
"Стандартный сериализатор для пустых ответов. В сгенерированном "
"графическом интерфейсе это означает, что кнопка действия не будет "
"отображать дополнительного view перед запуском."

#: of vstutils.api.serializers.VSTSerializer:1
msgid ""
"Default model serializer based on "
":class:`rest_framework.serializers.ModelSerializer`. Read more in `DRF "
"documentation <https://www.django-rest-framework.org/api-"
"guide/serializers/#modelserializer>`_ how to create Model Serializers. "
"This serializer matches model fields to extended set of serializer "
"fields."
msgstr ""
"Сериализатор модели по умолчанию, основанный на "
":class:`rest_framework.serializers.ModelSerializer`. Узнайте больше в "
"`документации DRF <https://www.django-rest-framework.org/api-"
"guide/serializers/#modelserializer>`_ о том, как создавать сериализаторы "
"модели. Этот сериализатор сопоставляет поля модели с расширенным набором "
"полей сериализатора."

#: of vstutils.api.serializers.VSTSerializer:6
msgid ""
"List of available pairs specified in  "
"`VSTSerializer.serializer_field_mapping`. For example, to set "
":class:`vstutils.api.fields.FkModelField` in serializer use "
":class:`vstutils.models.fields.FkModelField` in a model."
msgstr ""
"Список доступных пар, указанных в "
"`VSTSerializer.serializer_field_mapping`. Например, чтобы установить "
":class:`vstutils.api.fields.FkModelField` в сериализаторе, используйте "
":class:`vstutils.models.fields.FkModelField` в модели."

#: of vstutils.api.serializers.VSTSerializer:21
msgid ""
"In this example, the ``MySerializer`` class extends ``VSTSerializer`` and"
" is associated with the ``MyModel`` model."
msgstr ""
"В этом примере класс ``MySerializer`` расширяет ``VSTSerializer`` и "
"ассоциируется с моделью ``MyModel``."

#: ../../backend.rst:70
msgid "Views"
msgstr "Представления"

#: ../../backend.rst:71
msgid ""
"VSTUtils extends the standard behavior of ViewSets from Django REST "
"Framework (DRF) by providing built-in mechanisms for managing model views"
" that cater to the most commonly encountered development patterns. This "
"framework enhancement simplifies the process of creating robust and "
"scalable web applications by offering a rich set of tools and utilities "
"that automate much of the boilerplate code required in API development. "
"Through these extensions, developers can easily implement custom business"
" logic, data validation, and access control with minimal effort, thus "
"significantly reducing development time and improving code "
"maintainability."
msgstr ""
"VSTUtils расширяет стандартное поведение ViewSets из Django REST "
"Framework (DRF), предоставляя встроенные механизмы для управления "
"представлениями моделей, которые удовлетворяют наиболее часто "
"встречающимся паттернам разработки. Это улучшение фреймворка упрощает "
"процесс создания надежных и масштабируемых веб-приложений, предлагая "
"богатый набор инструментов и утилит, которые автоматизируют большую часть"
" шаблонного кода, необходимого при разработке API. Благодаря этим "
"расширениям, разработчики могут легко реализовать пользовательскую "
"бизнес-логику, валидацию данных и контроль доступа с минимальными "
"усилиями, тем самым значительно сокращая время разработки и улучшая "
"поддерживаемость кода."

#: of vstutils.api.base.CopyMixin:1
msgid "Mixin for viewsets which adds `copy` endpoint to view."
msgstr "Миксина для viewset'ов, добавляющая `copy` endpoint во view."

#: of vstutils.api.base.CopyMixin.copy:1
msgid "Endpoint which copy instance with deps."
msgstr "Endpoint, который копирует экземпляр с его зависимостями."

#: ../../docstring of vstutils.api.base.CopyMixin.copy_field_name:1
msgid "Name of field which will get a prefix."
msgstr "Имя поля, которое получит префикс."

#: ../../docstring of vstutils.api.base.CopyMixin.copy_prefix:1
msgid "Value of prefix which will be added to new instance name."
msgstr "Значение префикса, которое будет добавлено к новому имени экземпляра."

#: ../../docstring of vstutils.api.base.CopyMixin.copy_related:1
msgid "List of related names which will be copied to new instance."
msgstr "Список связанных имен, которые будут скопированы в новый экземпляр."

#: of vstutils.api.base.FileResponseRetrieveMixin:1
msgid ""
"ViewSet mixin for retrieving FileResponse from models with file fields "
"data."
msgstr "Миксина ViewSet для получения FileResponse из моделей с файловыми полями."

#: of vstutils.api.base.GenericViewSet:1
msgid ""
"The base class for all views. Extends the standard features of the DRF "
"class. Here are some of the possibilities:"
msgstr ""
"Базовый класс для всех view. Расширяет стандартные функции классов DRF. "
"Здесь представлены некоторые из возможностей:"

#: of vstutils.api.base.GenericViewSet:4
msgid "Provides ``model`` attribute instead of ``queryset``."
msgstr "Предоставляет атрибуты ``model`` вместо ``queryset``."

#: of vstutils.api.base.GenericViewSet:5
msgid ""
"Provides to set serializers for each action separately through a "
"dictionary ``action_serializers`` or attributes starting with "
"``serializer_class_[action name]``."
msgstr ""
"Позволяет устанавливать сериализаторы отдельно для каждого экшена через "
"словарь ``action_serializers`` или атрибуты, имя которых соответствует "
"шаблону ``serializer_class_[action name]``."

#: of vstutils.api.base.GenericViewSet:7
msgid "Provides to specify a serializer for lists and detail views separately."
msgstr ""
"Позволяет отдельно указать сериализаторы для view списков и детальной "
"записи."

#: of vstutils.api.base.GenericViewSet:8
msgid ""
"Optimizes the database query for GET requests, if possible, by selecting "
"only the fields necessary for the serializer."
msgstr ""
"Оптимизирует запросы в базу данных для GET-запросов, делая выборку, если "
"возможно, только тех полей, которые нужны сериализатору."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:1
msgid ""
"A method that implements the standard logic for actions. It relies on the"
" passed arguments to build logic. So, if the named argument data was "
"passed, then the serializer will be validated and saved."
msgstr ""
"Метод, реализующий стандартную логику экшенов. Он опирается на переданные"
" аргументы для построения логики. Поэтому, если был передан именованный "
"аргумент, сериализатор будет подвержен валидации и сохранен."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:5
msgid ""
"Enables/disables the execution of saving by the serializer if named "
"argument `data` passed. Enabled by default."
msgstr ""
"Включает/выключает выполнение сохранения сериализатором, если передан "
"именованный аргумент `data`. Включено по умолчанию."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:12
msgid "Dict with data which will passed to `validated_data` without validation."
msgstr ""
"Словарь с данными, которые будут переданы в `validated_data` без "
"валидации."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:14
msgid ""
"Serializer class for this execution. May be useful when request and "
"response serializers are different."
msgstr ""
"Класс сериализатора для текущего выполнения. Может быть полезно, когда "
"сериализаторы запроса и ответа различны."

#: of vstutils.api.base.GenericViewSet.create_action_serializer
msgid "param"
msgstr "параметр"

#: of vstutils.api.base.GenericViewSet.create_action_serializer:8
msgid ""
"data: Default serializer class argument with serializable data. Enables "
"validation and saving."
msgstr ""
"data: Стандартный аргумент класса сериализатора с сериализуемыми данными."
" Включает в себя валидацию и сохранение."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:10
msgid "instance: Default serializer class argument with serializable instance."
msgstr ""
"instance: Стандартный аргумент класса сериализатора с сериализуемым "
"экземпляром."

#: of vstutils.api.base.GenericViewSet.create_action_serializer:17
msgid "Ready serializer with default logic performed."
msgstr "Готовый сериализатор с логикой выполнения по умолчанию."

#: of vstutils.api.base.GenericViewSet.get_query_serialized_data:1
msgid ""
"Get request query data and serialize values if `query_serializer_class` "
"attribute exists or attribute was send."
msgstr ""
"Позволяет получить данные запроса и сериализовать значения, если "
"существует атрибут `query_serializer_class` или атрибут был передан."

#: of vstutils.api.base.GenericViewSet.get_query_serialized_data:5
msgid "DRF request object."
msgstr "объект DRF запроса."

#: of vstutils.api.base.GenericViewSet.get_query_serialized_data:7
msgid "serializer class for processing parameters in query_params."
msgstr "класс сериализатора, для обработки параметров в query_params."

#: of vstutils.api.base.GenericViewSet.get_query_serialized_data:9
msgid ""
"flag that indicates whether an exception should be thrown during "
"validation in the serializer or not."
msgstr ""
"флаг, который говорит о том нужно ли выбросить исключение при валидации в"
" сериализаторе или нет."

#: of vstutils.api.base.GenericViewSet.get_serializer:1
#: vstutils.api.endpoint.EndpointViewSet.get_serializer:1
msgid ""
"Return the serializer instance that should be used for validating and "
"deserializing input, and for serializing output."
msgstr ""
"Возвращает экземпляр сериализатора, который должен быть использован для "
"валидации и десериализации входных данных, и сериализации выходных "
"данных."

#: of vstutils.api.base.GenericViewSet.get_serializer:4
msgid ""
"Provide to use :class:`django.http.StreamingHttpResponse` as serializer "
"init."
msgstr ""
"Позволяет использовать :class:`django.http.StreamingHttpResponse` в "
"качестве инициализации сериализатора."

#: of vstutils.api.base.GenericViewSet.get_serializer_class:1
msgid "Provides to setup serializer class for each action."
msgstr "Позволяет задать класс сериализатора для каждого экшена."

#: of vstutils.api.base.GenericViewSet.nested_allow_check:1
msgid "Just raise or pass. Used for nested views for easier access checking."
msgstr ""
"Просто выбросьте исключение или пропустите (pass). Используется во "
"вложенных view для упрощения проверки доступа."

#: of vstutils.api.base.HistoryModelViewSet:1
msgid ""
"Default viewset like ReadOnlyModelViewSet but for historical data (allow "
"to delete, but can't create and update). Inherited from "
":class:`.GenericViewSet`."
msgstr ""
"Стандартный viewset, как, например ReadOnlyModelViewSet, но для данных "
"исторического характера (позволяет удалять записи, но не создавать или "
"обновлять). Наследуется от :class:`.GenericViewSet`."

#: of vstutils.api.base.ModelViewSet:1
msgid ""
"A viewset that provides CRUD actions under model. Inherited from "
":class:`.GenericViewSet`."
msgstr ""
"Viewset, предоставляющий CRUD-экшены над моделью. Наследуется от "
":class:`.GenericViewSet`."

#: of vstutils.api.base.ModelViewSet:3
msgid "DB model with data."
msgstr "Модель БД с данными."

#: of vstutils.api.base.ModelViewSet:5
msgid "Serializer for view of Model data."
msgstr "Сериализатор для view данных модели."

#: of vstutils.api.base.ModelViewSet:7
msgid "Serializer for view one instance of Model data."
msgstr "Сериализатор для view одного экземпляра данных модели."

#: of vstutils.api.base.ModelViewSet:9
msgid "Serializer for view of any endpoint like `.create`."
msgstr "Сериализатор для view любого endpoint'а, например `.create`."

#: of vstutils.api.base.ReadOnlyModelViewSet:1
msgid ""
"Default viewset like vstutils.api.base.ModelViewSet for readonly models. "
"Inherited from :class:`.GenericViewSet`."
msgstr ""
"Стандартный viewset, как, например vstutils.api.base.ModelViewSet для "
"readonly-моделей. Наследуется от :class:`.GenericViewSet`."

#: of vstutils.api.decorators.nested_view:1
msgid ""
"By default, DRF does not support nested views. This decorator solves this"
" problem."
msgstr ""
"По умолчанию DRF не поддерживает вложенные view. Данный декоратор решает "
"эту проблему."

#: of vstutils.api.decorators.nested_view:4
msgid ""
"You need two or more models with nested relationship (Many-to-Many or "
"Many-to-One) and two viewsets. Decorator nests viewset to parent viewset "
"class and generate paths in API."
msgstr ""
"Вам нужны две или более модели с вложенными отношениями (многие-ко-многим"
" или многие-к-одному) и два viewset'а. Декоратор вкладывает viewset'ы в "
"родительский класс viewset'ов и генерирует пути в API."

#: of vstutils.api.decorators.nested_view:9
msgid ""
"Name of nested path. Also used as default name for related queryset (see "
"`manager_name`)."
msgstr ""
"Имя вложенного пути. Также используется стандартное имя для связанных "
"queryset'ов (см. `manager_name`)."

#: of vstutils.api.decorators.nested_view:12
msgid "Name of nested primary key field."
msgstr "Имя вложенного поля первичного ключа."

#: of vstutils.api.decorators.nested_view:14
msgid "Nested viewset class."
msgstr "Класс вложенного viewset'а."

#: of vstutils.api.decorators.nested_view:19
msgid "Flag for allowing to append existed instances."
msgstr "Флаг, разрешающий добавление существующих экземпляров."

#: of vstutils.api.decorators.nested_view:21
msgid "Flag for forbidding bulk queries in related manager add method."
msgstr ""
"Флаг, запрещающий выполнение bulk запросов в методе add связанного "
"менеджера."

#: of vstutils.api.decorators.nested_view:23
msgid "Name of model-object attr which contains nested queryset."
msgstr "Имя атрибута объекта модели, который содержит вложенный queryset."

#: of vstutils.api.decorators.nested_view:26
msgid "List of allowed methods to nested view endpoints."
msgstr "Список разрешенных методов для endpoint'ов вложенных view."

#: of vstutils.api.decorators.nested_view:28
msgid "List of allowed subviews or actions to nested view endpoints."
msgstr "Список разрешенных subviews или экшенов для endpoint'ов вложенных views."

#: of vstutils.api.decorators.nested_view:30
msgid "List of callable objects which returns filtered queryset of main."
msgstr "Список вызываемых объектов, которые возвращают отфильтрованный queryset."

#: of vstutils.api.decorators.nested_view:34
msgid ""
"Some view methods will not call for performance reasons. This also "
"applies to some of the class attributes that are usually initialized in "
"the methods. For example, ``.initial()`` will never call. Each viewset "
"wrapped by nested class with additional logic."
msgstr ""
"Некоторые методы view не будут вызваны из соображений производительности."
" Это также применяется к некоторым атрибутам класса, которые обычно "
"инициализируются в методах. Например, ``.initial()`` никогда не будет "
"вызван. Каждый viewset обернут вложенным классом с дополнительной "
"логикой."

#: of vstutils.api.decorators.nested_view:59
msgid "This code generates api paths:"
msgstr "Данный код генерирует пути api:"

#: of vstutils.api.decorators.nested_view:61
msgid "`/tasks/` - GET, POST"
msgstr "`/tasks/` - GET, POST"

#: of vstutils.api.decorators.nested_view:62
msgid "`/tasks/{id}/` - GET, PUT, PATCH, DELETE"
msgstr "`/tasks/{id}/` - GET, PUT, PATCH, DELETE"

#: of vstutils.api.decorators.nested_view:63
msgid "`/tasks/{id}/stages/` - GET, POST"
msgstr "`/tasks/{id}/stages/` - GET, POST"

#: of vstutils.api.decorators.nested_view:64
msgid "`/tasks/{id}/stages/{stages_id}/` - GET, PUT, PATCH, DELETE"
msgstr "`/tasks/{id}/stages/{stages_id}/` - GET, PUT, PATCH, DELETE"

#: of vstutils.api.decorators.subaction:1
msgid "Decorator which wrap object method to subaction of viewset."
msgstr "Декоратор, оборачивающий метод объекта в subaction viewset'а."

#: of vstutils.api.decorators.subaction:3
msgid "List of allowed HTTP-request methods. Default is ``[\"post\"]``."
msgstr "Список разрешенных методов HTTP. По умолчанию ``[\"post\"]``."

#: of vstutils.api.decorators.subaction:4
msgid "Flag to set method execution to one instance."
msgstr "Флаг, указывающий, должен ли метод применяться к одному экземпляру."

#: of vstutils.api.decorators.subaction:5
msgid "Serializer for this action."
msgstr "Сериализатор для этого экшена."

#: of vstutils.api.decorators.subaction:6
msgid "Tuple or list permission classes."
msgstr "Кортеж или список permission-классов."

#: of vstutils.api.decorators.subaction:7
msgid "API-path name for this action."
msgstr "Имя API-пути для этого экшена."

#: of vstutils.api.decorators.subaction:8
msgid "Description for this action in OpenAPI."
msgstr "Описание этого экшена в OpenAPI."

#: of vstutils.api.decorators.subaction:9
msgid ""
"Allow to use this action in multiactions. Works only with "
":class:`vstutils.api.serializers.EmptySerializer` as response."
msgstr ""
"Разрешает использовать этот экшен в мультиэкшенах. Работает только с "
":class:`vstutils.api.serializers.EmptySerializer` в response."

#: of vstutils.api.decorators.subaction:11
msgid "Sets whether the action must be confirmed before being executed."
msgstr "Задает, должен ли экшен требовать подтверждения перед выполнением."

#: of vstutils.api.decorators.subaction:12
msgid "Mark this action as paginated list with all rules and parameters."
msgstr ""
"Отметить это действие как пагинируемый список со всеми правилами и "
"параметрами."

#: of vstutils.api.decorators.subaction:13
msgid "Override action title."
msgstr "Заменить заголовок действия."

#: of vstutils.api.decorators.subaction:14
msgid "Setup action icon classes."
msgstr "Настроить классы иконок действия."

#: ../../backend.rst:87
msgid ""
"**An ETag** (Entity Tag) is a mechanism defined by the HTTP protocol for "
"web cache validation and to manage resource versions efficiently. It "
"represents a unique identifier for the content of a resource at a given "
"time, allowing client and server to determine if the resource has changed"
" without downloading the entire content. This mechanism significantly "
"reduces bandwidth and improves web performance by enabling conditional "
"requests. Servers send ETags in responses to clients, which can cache "
"these tags along with the resources. On subsequent requests, clients send"
" the cached ETag back to the server in an If-None-Match header. If the "
"resource has not changed (the ETag matches), the server responds with a "
"304 Not Modified status, indicating that the client's cached version is "
"up-to-date."
msgstr ""
"**ETag** (Entity Tag) — это механизм, определенный протоколом HTTP для "
"проверки кэша веба и эффективного управления версиями ресурсов. Он "
"представляет собой уникальный идентификатор содержимого ресурса на "
"определенный момент времени, позволяя клиенту и серверу определить, "
"изменился ли ресурс без необходимости загружать весь контент. Этот "
"механизм значительно сокращает использование полосы пропускания и "
"улучшает производительность веба за счет использования условных запросов."
" Серверы отправляют ETags в ответах клиентам, которые могут кэшировать "
"эти теги вместе с ресурсами. При последующих запросах клиенты отправляют "
"кэшированный ETag обратно на сервер в заголовке If-None-Match. Если "
"ресурс не изменился (ETag совпадает), сервер отвечает статусом 304 Not "
"Modified, указывая, что кэшированная версия клиента актуальна."

#: ../../backend.rst:95
msgid ""
"Beyond GET requests, ETags can also be instrumental in other HTTP methods"
" like PUT or DELETE to ensure consistency and prevent unintended "
"overwrites or deletions, known as \"mid-air collision avoidance.\" By "
"including an ETag in the If-Match header of non-GET requests, clients "
"signal that the operation should proceed only if the resource's current "
"state matches the specified ETag, thus safeguarding against concurrent "
"modifications by different clients. This application of ETags enhances "
"the reliability and integrity of web applications by ensuring that "
"operations are performed on the correct version of a resource."
msgstr ""
"Помимо GET-запросов, ETags также могут быть полезны в других методах "
"HTTP, таких как PUT или DELETE, для обеспечения согласованности и "
"предотвращения непреднамеренных перезаписей или удалений, известных как "
"«избежание столкновений в воздухе». Включая ETag в заголовок If-Match "
"не-GET запросов, клиенты сигнализируют, что операция должна продолжаться "
"только в том случае, если текущее состояние ресурса соответствует "
"указанному ETag, тем самым защищая от одновременных изменений разными "
"клиентами. Это применение ETags повышает надежность и целостность "
"веб-приложений, гарантируя выполнение операций с корректной версией "
"ресурса."

#: ../../backend.rst:101
msgid "Here is main functionality provided for working with ETag's mechanism:"
msgstr "Вот основные функции, предоставляемые для работы с механизмом ETag:"

#: of vstutils.api.base.CachableHeadMixin:1
msgid ""
"A mixin designed to enhance caching for GET responses in Django REST "
"framework views, leveraging the standard HTTP caching mechanism. It "
"returns a 304 Not Modified status for reading requests like GET or HEAD "
"when the ETag (Entity Tag) in the client's request matches the current "
"resource state, and a 412 Precondition Failed status for writing requests"
" when the condition fails. This approach reduces unnecessary network "
"traffic and load times for unchanged resources, and ensures data "
"consistency for write operations."
msgstr ""
"Миксин, предназначенный для улучшения кэширования ответов на GET-запросы "
"в представлениях Django REST framework, используя стандартный механизм "
"кэширования HTTP. Он возвращает статус 304 Not Modified для чтения "
"запросов, таких как GET или HEAD, когда ETag (Entity Tag) в запросе "
"клиента совпадает с текущим состоянием ресурса, и статус 412 Precondition"
" Failed для записывающих запросов, когда условие не выполняется. Этот "
"подход снижает ненужный сетевой трафик и время загрузки для неизменных "
"ресурсов, а также обеспечивает согласованность данных для операций "
"записи."

#: of vstutils.api.base.CachableHeadMixin:8
msgid ""
"The mixin relies on :func:`.get_etag_value` and "
":func:`.check_request_etag` functions within the `GenericViewSet` context"
" to dynamically generate and validate ETags for resource states. By "
"comparing ETags, it determines whether content has changed since the last"
" request, allowing clients to reuse cached responses when applicable and "
"preventing concurrent write operations from overwriting each other "
"without acknowledgment of updated state."
msgstr ""
"Миксин использует функции :func:`.get_etag_value` и "
":func:`.check_request_etag` в контексте `GenericViewSet` для "
"динамического создания и проверки ETag для состояний ресурсов. Сравнивая "
"ETag, он определяет, изменилось ли содержимое с момента последнего "
"запроса, позволяя клиентам повторно использовать кэшированные ответы, "
"когда это применимо, и предотвращая одновременные операции записи от "
"перезаписи друг друга без подтверждения обновленного состояния."

#: of vstutils.api.base.CachableHeadMixin:15
msgid ""
"This mixin is designed to work with models that inherit from "
":class:`vstutils.models.BModel`. Usage with other models may not provide "
"the intended caching behavior and could lead to incorrect application "
"behavior."
msgstr ""
"Этот миксин разработан для работы с моделями, наследующими от "
":class:`vstutils.models.BModel`. Использование с другими моделями может "
"не обеспечить предполагаемое поведение кэширования и может привести к "
"некорректному поведению приложения."

#: of vstutils.api.base.CachableHeadMixin:20
msgid ""
"For effective use, ensure model classes are compatible with ETag "
"generation and validation by implementing the :func:`.get_etag_value` "
"method for custom ETag computation. Additionally, the "
":class:`.GenericViewSet` using this mixin should properly handle ETag "
"headers in client requests to leverage HTTP caching."
msgstr ""
"Для эффективного использования убедитесь, что классы моделей совместимы с"
" генерацией и проверкой ETag, реализовав метод :func:`.get_etag_value` "
"для пользовательского вычисления ETag. Кроме того, "
":class:`.GenericViewSet`, использующий этот миксин, должен правильно "
"обрабатывать заголовки ETag в запросах клиентов для использования "
"кэширования HTTP."

#: of vstutils.api.base.CachableHeadMixin:25
msgid ""
"An additional feature of the ``CachableHeadMixin`` is its automatic "
"inclusion in the generated view from a :class:`vstutils.models.BModel` if"
" the model class has the ``_cache_responses`` class attribute set to "
"``True``. This enables automatic caching capabilities for models "
"indicating readiness for HTTP-based caching, streamlining the process of "
"optimizing response times and reducing server load for frequently "
"accessed resources."
msgstr ""
"Дополнительной особенностью ``CachableHeadMixin`` является его "
"автоматическое включение в сгенерированное представление из "
":class:`vstutils.models.BModel`, если класс модели имеет атрибут класса "
"`_cache_responses`, установленный в ``True``. Это позволяет "
"автоматизировать возможности кэширования для моделей, указывающих на "
"готовность к кэшированию на основе HTTP, оптимизируя процесс сокращения "
"времени ответа и снижения нагрузки на сервер для часто доступных "
"ресурсов."

#: of vstutils.api.base.EtagDependency:1
msgid ""
"A custom enumeration that defines potential dependencies for ETag "
"generation. It includes:"
msgstr ""
"Пользовательское перечисление, определяющее потенциальные зависимости для"
" генерации ETag. Оно включает:"

#: ../../docstring of vstutils.api.base.EtagDependency.LANG:1
msgid "Indicates dependency on the user's language preference."
msgstr "Указывает на зависимость от языковых предпочтений пользователя."

#: ../../docstring of vstutils.api.base.EtagDependency.SESSION:1
msgid "Indicates dependency on the user's session."
msgstr "Указывает на зависимость от сессии пользователя."

#: ../../docstring of vstutils.api.base.EtagDependency.USER:1
msgid "Indicates dependency on the user's identity."
msgstr "Указывает на зависимость от идентичности пользователя."

#: of vstutils.api.base.get_etag_value:1
msgid ""
"The get_etag_value function is designed to compute a unique ETag value "
"based on the model's state, request parameters, and additional "
"dependencies such as user language, session, and user identity. This "
"function supports both single models and collections of models."
msgstr ""
"Функция get_etag_value предназначена для вычисления уникального значения "
"ETag на основе состояния модели, параметров запроса и дополнительных "
"зависимостей, таких как язык пользователя, сессия и идентичность "
"пользователя. Эта функция поддерживает как отдельные модели, так и "
"коллекции моделей."

#: of vstutils.api.base.get_etag_value:6
msgid "An instance of :class:`.GenericViewSet`, responsible for view operations."
msgstr "Экземпляр :class:`.GenericViewSet`, отвечающий за операции просмотра."

#: of vstutils.api.base.get_etag_value:9
msgid ""
"The model class for which the ETag value is being generated. This "
"parameter can be a single model class or a collection of model classes "
"(:class:`list`, :class:`tuple`, or :class:`set`). Each model class may "
"optionally implement a class method named ``get_etag_value``."
msgstr ""
"Класс модели, для которой генерируется значение ETag. Этот параметр может"
" быть одним классом модели или коллекцией классов моделей (:class:`list`,"
" :class:`tuple` или :class:`set`). Каждый класс модели может "
"необязательно реализовать метод класса с именем ``get_etag_value``."

#: of vstutils.api.base.get_etag_value:15
msgid ""
"The request object from the Django REST framework, containing all the "
"HTTP request information."
msgstr ""
"Объект запроса из Django REST framework, содержащий всю информацию "
"HTTP-запроса."

#: of vstutils.api.base.get_etag_value:18
msgid ""
"he primary key of the model instance for which the ETag is being "
"calculated. This can be a specific value (int or str) for single model "
"usage, or a dictionary mapping model classes to their respective primary "
"key values for collections of models."
msgstr ""
"Первичный ключ экземпляра модели, для которого рассчитывается ETag. Это "
"может быть конкретное значение (int или str) для использования в одной "
"модели или словарь, сопоставляющий классы моделей с их соответствующими "
"значениями первичных ключей для коллекций моделей."

#: of vstutils.api.base.get_etag_value:22
msgid "The computed ETag value as a hexadecimal string."
msgstr "Вычисленное значение ETag в виде шестнадцатеричной строки."

#: of vstutils.api.base.get_etag_value:23
msgid ":class:`str`"
msgstr ":py:class:`str`"

#: of vstutils.api.base.get_etag_value:25
msgid ""
"The function operates differently based on the type of model_class "
"provided:"
msgstr ""
"Функция работает по-разному в зависимости от предоставленного типа "
"model_class:"

#: of vstutils.api.base.get_etag_value:27
msgid ""
"**Collection of Models**: When model_class is a collection, the function "
"computes an ETag by concatenating ETag values of individual models in the"
" collection, using a recursive call for each model. The ETag value for "
"each model is encoded and hashed using Blake2s algorithm."
msgstr ""
"**Коллекция моделей**: Когда model_class является коллекцией, функция "
"вычисляет ETag, объединяя значения ETag отдельных моделей в коллекции, "
"используя рекурсивный вызов для каждой модели. Значение ETag для каждой "
"модели кодируется и хешируется с использованием алгоритма Blake2s."

#: of vstutils.api.base.get_etag_value:31
msgid ""
"**Model with ``get_etag_value`` method**: If the model class has a "
"get_etag_value method, the function calls this method to obtain a base "
"ETag value. It then appends language, user ID, and session key "
"information if they are marked as dependencies in the model's "
"``_cache_response_dependencies`` attribute. This base ETag may be further"
" processed to include the application's full version string and hashed if"
" user or session information is included."
msgstr ""
"**Модель с методом ``get_etag_value``**: Если класс модели имеет метод "
"get_etag_value, функция вызывает этот метод, чтобы получить базовое "
"значение ETag. Затем она добавляет информацию о языке, идентификаторе "
"пользователя и ключе сессии, если они помечены как зависимости в атрибуте"
" ``_cache_response_dependencies`` модели. Это базовое значение ETag может"
" быть дополнительно обработано, включая полную строку версии приложения и"
" хешировано, если включена информация о пользователе или сессии."

#: of vstutils.api.base.get_etag_value:37
msgid ""
"**Model without ``get_etag_value`` method**: For models lacking a custom "
"get_etag_value method, the function generates an ETag based on the "
"model's class name and a hash of the application's full version string."
msgstr ""
"**Модель без метода ``get_etag_value``**: Для моделей без "
"пользовательского метода get_etag_value функция генерирует ETag на основе"
" имени класса модели и хеша полной строки версии приложения."

#: of vstutils.utils.check_request_etag:1
msgid ""
"The function plays a crucial role within the context of the ETag "
"mechanism, providing a flexible way to validate client-side ETags against"
" the server-side version for both cache validation and ensuring data "
"consistency in web applications. It supports conditional handling of HTTP"
" requests based on the match or mismatch of ETag values, accommodating "
"various scenarios such as cache freshness checks and prevention of "
"concurrent modifications."
msgstr ""
"Функция играет ключевую роль в контексте механизма ETag, предоставляя "
"гибкий способ проверки ETags на стороне клиента по сравнению с версией на"
" стороне сервера как для проверки кэша, так и для обеспечения "
"согласованности данных в веб-приложениях. Она поддерживает условную "
"обработку HTTP-запросов на основе совпадения или несовпадения значений "
"ETag, адаптируясь к различным сценариям, таким как проверки свежести кэша"
" и предотвращение одновременных изменений."

#: of vstutils.utils.check_request_etag:8
msgid ""
"The HTTP request object containing the client's headers, from which the "
"ETag for comparison is retrieved."
msgstr ""
"Объект HTTP-запроса, содержащий заголовки клиента, из которых извлекается"
" ETag для сравнения."

#: of vstutils.utils.check_request_etag:12
msgid ""
"The server-generated ETag value that represents the current state of the "
"resource. This unique identifier is recalculated whenever the resource's "
"content changes."
msgstr ""
"ETag, сгенерированный сервером, представляет текущее состояние ресурса. "
"Этот уникальный идентификатор пересчитывается при каждом изменении "
"содержимого ресурса."

#: of vstutils.utils.check_request_etag:16
msgid ""
"Specifies the HTTP header to look for the client's ETag. Defaults to "
"\"If-None-Match\", commonly used in GET requests for cache validation. "
"For operations requiring confirmation that the client is acting on the "
"latest version of a resource (e.g., PUT or DELETE), \"If-Match\" should "
"be used instead."
msgstr ""
"Указывает HTTP-заголовок для поиска ETag клиента. По умолчанию "
"используется \"If-None-Match\", обычно используемый в GET-запросах для "
"проверки кэша. Для операций, требующих подтверждения того, что клиент "
"действует с последней версией ресурса (например, PUT или DELETE), вместо "
"этого следует использовать \"If-Match\"."

#: of vstutils.utils.check_request_etag:22
msgid ""
"A function to compare the ETags. By default, this is set to "
"``str.__eq__``, which checks for an exact match between the client's and "
"server's ETags, suitable for validating caches with ``If-None-Match``. To"
" handle ``If-Match`` scenarios, where the operation should proceed only "
"if the ETags do not match, indicating the resource has been modified, "
"``str.__ne__`` (not equal) can be used as the operation handler. This "
"flexibility allows for precise control over how and when clients are "
"allowed to read from or write to resources based on their version."
msgstr ""
"Функция для сравнения ETags. По умолчанию установлено ``str.__eq__``, "
"которое проверяет точное совпадение ETags клиента и сервера, подходящее "
"для проверки кэшей с ``If-None-Match``. Для обработки сценариев ``If-"
"Match``, когда операция должна продолжаться только в случае, если ETags "
"не совпадают, указывая на то, что ресурс был изменен, можно использовать "
"``str.__ne__`` (не равно) в качестве обработчика операции. Эта гибкость "
"позволяет точно контролировать, как и когда клиентам разрешено читать или"
" записывать ресурсы на основе их версии."

#: of vstutils.utils.check_request_etag:30
msgid ""
"Returns a tuple containing the server's ETag and a boolean flag. The flag"
" is ``True`` if the operation handler condition between the server's and "
"client's ETag is met, indicating the request should proceed based on the "
"matching logic defined by the operation handler; otherwise, it returns "
"``False``."
msgstr ""
"Возвращает кортеж, содержащий ETag сервера и булев флаг. Флаг равен "
"``True``, если условие обработчика операции между ETag сервера и клиента "
"выполнено, указывая на то, что запрос должен продолжаться на основе "
"логики сопоставления, определенной обработчиком операции; в противном "
"случае возвращает ``False``."

#: ../../backend.rst:111
msgid "Actions"
msgstr "Actions (Действия)"

#: ../../backend.rst:113
msgid ""
"Vstutils has the advanced system of working with actions. REST API works "
"with data through verbs, which are called methods. However, to work with "
"one or a list of entities, such actions may not be enough."
msgstr ""
"Vstutils имеет развитую систему работы с действиями. REST API работает с "
"данными через глаголы, которые называются методами. Однако для работы с "
"одной или списком сущностей этих действий может быть недостаточно."

#: ../../backend.rst:117
msgid ""
"To expand the set of actions, you need to create an action that will work"
" with some aspect of the described model. For these purposes, there is a "
"standard :func:`rest_framework.decorators.action`, which can also be "
"extended using the scheme. But for the greater convenience, there is a "
"set of decorator objects in vstutils to eliminate the routine of writing "
"boilerplate code."
msgstr ""
"Чтобы расширить набор действий, необходимо создать действие, которое "
"будет работать с некоторым аспектом описанной модели. Для этих целей "
"существует стандартный :func:`rest_framework.decorators.action`, который "
"также можно расширить с помощью схемы. Но для большего удобства в "
"vstutils есть набор декораторов, которые позволяют избежать написания "

#: ../../backend.rst:121
msgid ""
"The main philosophy for these wrappers is that the developer writes "
"business logic without being distracted by the boilerplate code. Often, "
"most of the errors in the code appear precisely because of the blurry "
"look from the routine writing of the code."
msgstr ""
"Основная философия этих оберток заключается в том, что разработчик пишет "
"бизнес-логику, не отвлекаясь на написание повторяющегося кода. Часто "
"большинство ошибок в коде возникают именно из-за расфокусировки внимания "
"при рутинном написании кода."

#: of vstutils.api.actions.Action:1
msgid ""
"Base class of actions. Has minimal of required functionality to create an"
" action and write only business logic. This decorator is suitable in "
"cases where it is not possible to implement the logic using "
":class:`.SimpleAction` or the algorithm is much more complicated than "
"standard CRUD."
msgstr ""
"Базовый класс действий. Обладает минимально необходимой функциональностью"
" для создания действия и позволяет написать только бизнес-логику. Этот "
"декоратор подходит в случаях, когда невозможно реализовать логику с "
"использованием :class:`.SimpleAction` или алгоритм значительно более "
"сложный, чем стандартные операции CRUD."

#: of vstutils.api.actions.Action:39
msgid ""
"Flag indicating which type of action is used: on a list or on a single "
"entity. Affects where this action will be displayed - on a detailed "
"record or on a list of records."
msgstr ""
"Флаг, указывающий, какой тип действия используется: на списке или на "
"отдельной сущности. Влияет на то, где будет отображаться это действие - "
"на детальной записи или на списке записей."

#: of vstutils.api.actions.Action:42
msgid ""
"List of available HTTP-methods for this action. Default has only `POST` "
"method."
msgstr "Список доступных методов HTTP. По умолчанию ``[\"post\"]``."

#: of vstutils.api.actions.Action:44
msgid "Request body serializer. Also used for default response."
msgstr ""
"Сериализатор для тела запроса. Используется также для формирования ответа"
" по умолчанию."

#: of vstutils.api.actions.Action:46
msgid ""
"Response body serializer. Required, when request and response has "
"different set of fields."
msgstr ""
"Сериализатор для тела ответа. Необходим, когда запрос и ответ имеют "
"различные наборы полей."

#: of vstutils.api.actions.Action:49
msgid ""
"GET-request query data serializer. It is used when it is necessary to get"
" valid data in the query data of a GET-request and cast it to the "
"required type."
msgstr ""
"Сериализатор для данных запроса типа GET. Используется, когда необходимо "
"получить корректные данные в строке запроса типа GET и привести их к "
"нужному типу."

#: of vstutils.api.actions.Action:52
msgid ""
"Used only with non-GET requests and notify GUI, that this action should "
"be rendered over the selected list items."
msgstr ""
"Используется только с не-GET запросами и уведомляет GUI, что это действие"
" должно быть применено к выбранным элементам списка."

#: of vstutils.api.actions.Action:55
msgid ""
"Title for action in UI. For non-GET actions, title is generated from "
"method's name."
msgstr ""
"Заголовок действия в пользовательском интерфейсе. Для действий, отличных "
"от GET, заголовок генерируется на основе имени метода."

#: of vstutils.api.actions.Action:57
msgid "List of icons for UI button."
msgstr "Список иконок для кнопки пользовательского интерфейса."

#: of vstutils.api.actions.Action:59
msgid ""
"Flag indicating whether the action type is a list or a single entity. "
"Typically used with GET actions."
msgstr ""
"Флаг, указывающий, является ли тип действия списком или отдельной "
"сущностью. Обычно используется с действиями GET."

#: of vstutils.api.actions.Action:62
msgid ""
"Flag indicating whether the action will only use edit mode, without a "
"view page. This is used for actions where there is a GET method and any "
"other modifying methods (POST, PUT, PATCH)."
msgstr ""
"Флаг, который показывает, что на экшене будет использоваться только режим"
" редактирования, без применения страницы для просмотра. Используется для "
"экшенов, где есть метод GET и любые другие изменяющие методы (POST, PUT, "
"PATCH)."

#: of vstutils.api.actions.Action:66
msgid "If true user will be asked to confirm action execution on frontend."
msgstr ""
"Если истина, то в интерфейсе пользователь должен будет подтвердить "
"действие перед выполнением."

#: of vstutils.api.actions.Action:68
msgid "Set of named arguments for :func:`rest_framework.decorators.action`."
msgstr "Набор именованных аргументов для :func:`rest_framework.decorators.action`."

#: of vstutils.api.actions.EmptyAction:1
msgid ""
"In this case, actions on an object do not require any data and "
"manipulations with them. For such cases, there is a standard method that "
"allows you to simplify the scheme and code to work just with the object."
msgstr ""
"В этом случае действия с объектом не требуют каких-либо данных и "
"манипуляций с ними. Для таких случаев существует стандартный метод, "
"который позволяет упростить схему и код работы только с объектом."

#: of vstutils.api.actions.EmptyAction:5
msgid ""
"Optionally, you can also overload the response serializer to notify the "
"interface about the format of the returned data."
msgstr ""
"При необходимости вы также можете переопределить сериализатор ответа, "
"чтобы уведомить интерфейс о формате возвращаемых данных."

#: of vstutils.api.actions.SimpleAction:1
msgid ""
"The idea of this decorator is to get the full CRUD for the instance in a "
"minimum of steps. The instance is the object that was returned from the "
"method being decorated. The whole mechanism is very similar to the "
"standard property decorator, with a description of a getter, setter, and "
"deleter."
msgstr ""
"Идея этого декоратора заключается в том, чтобы получить полный CRUD для "
"экземпляра с минимумом шагов. Экземпляр - это объект, который "
"возвращается из декорируемого метода. Весь механизм очень похож на "
"стандартный декоратор property, с описанием getter, setter, и deleter"

#: of vstutils.api.actions.SimpleAction:6
msgid ""
"If you're going to create an entry point for working with a single "
"object, then you do not need to define methods. The presence of a getter,"
" setter, and deleter will determine which methods will be available."
msgstr ""
"Если вы собираетесь создать точку входа для работы с отдельным объектом, "
"то вам не нужно определять методы. Наличие getter`a, setter`a, и "
"deleter`a определит, какие методы будут доступны."

#: of vstutils.api.actions.SimpleAction:9
msgid ""
"In the official documentation of Django, an example is given with moving "
"data that is not important for authorization to the Profile model. To "
"work with such data that is outside the main model, there is this action "
"object, which implements the basic logic in the most automated way."
msgstr ""
"В официальной документации Django приведен пример с перемещением данных, "
"которые не являются важными для авторизации, в модель Profile. Для работы"
" с такими данными, находящимися вне основной модели, существует данный "
"объект действия, который реализует основную логику в "
"наиболеавтоматизированном виде."

#: of vstutils.api.actions.SimpleAction:14
msgid ""
"It covers most of the tasks for working with such data. By default, it "
"has a GET method instead of POST. Also, for better organization of the "
"code, it allows you to change the methods that will be called when "
"modifying or deleting data."
msgstr ""
"Он охватывает большинство задач по работе с такими данными. По умолчанию "
"у него есть метод GET вместо POST. Кроме того, для лучшей организации "
"кода он позволяет изменить методы, которые будут вызываться при изменении"
" или удалении данных."

#: of vstutils.api.actions.SimpleAction:18
msgid ""
"When assigning an action on an object, the list of methods is also filled"
" with the necessary ones."
msgstr ""
"При назначении действия на объект список методов также заполняется "
"необходимыми методами."

#: of vstutils.api.actions.SimpleFileAction:1
msgid ""
"Action for handling file responses. This action always returns a "
"FileResponse."
msgstr ""
"Экшен для обработки ответов с файлами. Это действие всегда возвращает "
"FileResponse."

#: of vstutils.api.actions.SimpleFileAction:3
msgid ""
"This class is designed to simplify the process of creating actions that "
"return file responses. It ensures that the file is only sent if it has "
"been modified since the client's last request, and it sets appropriate "
"headers to facilitate caching and attachment handling."
msgstr ""
"Этот класс предназначен для упрощения процесса создания действий, "
"возвращающих ответы с файлами. Он гарантирует, что файл отправляется "
"только в случае его изменения с момента последнего запроса клиента, и "
"устанавливает соответствующие заголовки для облегчения кэширования и "
"обработки вложений."

#: of vstutils.api.actions.SimpleFileAction:62
msgid "Cache-Control header value. Defaults to 'max-age=3600'."
msgstr "Значение заголовка Cache-Control. По умолчанию 'max-age=3600'."

#: of vstutils.api.actions.SimpleFileAction:64
msgid ""
"Boolean indicating if the file should be sent as an attachment. Defaults "
"to False."
msgstr ""
"Булево значение, указывающее, следует ли отправлять файл в виде вложения."
" По умолчанию False."

#: of vstutils.api.actions.SimpleFileAction:66
msgid "Additional named arguments for :func:`rest_framework.decorators.action`."
msgstr "Набор именованных аргументов для :func:`rest_framework.decorators.action`."

#: of vstutils.api.actions.SimpleFileAction.modified_since:1
msgid "Default modified_since method that checks the modification time of a file."
msgstr ""
"Метод modified_since по умолчанию, который проверяет время изменения "
"файла."

#: of vstutils.api.actions.SimpleFileAction.modified_since:4
#: vstutils.api.actions.SimpleFileAction.pre_data:4
msgid "The view instance."
msgstr "Экземпляр представления."

#: of vstutils.api.actions.SimpleFileAction.modified_since:6
#: vstutils.api.actions.SimpleFileAction.pre_data:6
msgid "The file object, typically a FileField or ImageField."
msgstr "Объект файла, обычно FileField или ImageField."

#: of vstutils.api.actions.SimpleFileAction.modified_since:8
msgid "The modification time of the file, or None if it cannot be determined."
msgstr "Время изменения файла или None, если оно не может быть определено."

#: of vstutils.api.actions.SimpleFileAction.pre_data:1
msgid "Default pre_data method that returns the file, its name, and content type."
msgstr ""
"Метод pre_data по умолчанию, который возвращает файл, его имя и тип "
"содержимого."

#: of vstutils.api.actions.SimpleFileAction.pre_data:8
msgid "A tuple containing the file, its name, and its content type."
msgstr "Кортеж, содержащий файл, его имя и тип содержимого."

#: ../../backend.rst:130
msgid "Filtersets"
msgstr "Filterset'ы"

#: ../../backend.rst:132
msgid ""
"For greater development convenience, the framework provides additional "
"classes and functions for filtering elements by fields."
msgstr ""
"Для большего удобства разработки, фреймворк предоставляет дополнительные "
"классы и функции для фильтрации элементов на основе полей."

#: of vstutils.api.filters.DefaultIDFilter:1
msgid ""
"Basic filterset to search by id. Provides a search for multiple values "
"separated by commas. Uses :func:`.extra_filter` in fields."
msgstr ""
"Базовый filterset для поиска по id. Предоставляет поиск по множеству "
"значений, разделенных запятой. Использует :func:`.extra_filter` в полях."

#: of vstutils.api.filters.DefaultNameFilter:1
msgid ""
"Basic filterset to search by part of name. Uses `LIKE` DB condition by "
":func:`.name_filter`."
msgstr ""
"Базовый filterset для частичного поиска по названию. Использует условие "
"`LIKE` в базе данных с помощью :func:`.name_filter`."

#: of vstutils.api.filters.FkFilterHandler:1
msgid "Simple handler for filtering by relational fields."
msgstr "Простой handler для фильтрации по связанным полям."

#: of vstutils.api.filters.FkFilterHandler:4
msgid "Field name of related model's primary key. Default is 'id'."
msgstr "Имя поля первичного ключа в связанной модели. По умолчанию 'id'."

#: of vstutils.api.filters.FkFilterHandler:6
msgid "Field name of related model's charfield. Default is 'name'."
msgstr "Имя charfield-поля в связанной модели. По умолчанию 'name'."

#: of vstutils.api.filters.FkFilterHandler:8
msgid ""
"Changes handler for checking value before search. Sends \"0\" if handler "
"falls. Default is 'int()'."
msgstr ""
"Изменяет handler для проверки значения перед поиском. Посылает \"0\", "
"если handler падает. По умолчанию используется `int()`. "

#: of vstutils.api.filters.FkFilterHandler:16
msgid ""
"Where ``author`` is ForeignKey to `User` and you want to search by "
"primary key and email."
msgstr ""
"Где ``author`` - это ForeignKey на `User`, и вы хотите искать по "
"первичному ключу и полю email."

#: of vstutils.api.filters.extra_filter:1
msgid "Method for searching values in a comma-separated list."
msgstr ""
"Метод, предназначенный для поиска значений в списке значений, разделенных"
" запятой."

#: of vstutils.api.filters.extra_filter:4 vstutils.api.filters.name_filter:4
msgid "model queryset for filtration."
msgstr "queryset модели для фильтрации."

#: of vstutils.api.filters.extra_filter:7 vstutils.api.filters.name_filter:7
msgid "field name in FilterSet. Also supports `__not` suffix."
msgstr "имя поля в FilterSet'е. Также поддерживает суффикс `__not`."

#: of vstutils.api.filters.extra_filter:10
msgid "comma separated list of searching values."
msgstr "список искомых значений, разделенных запятыми."

#: of vstutils.api.filters.extra_filter:12 vstutils.api.filters.name_filter:12
msgid "filtered queryset."
msgstr "отфильтрованный queryset."

#: of vstutils.api.filters.name_filter:1
msgid ""
"Method for searching by part of name. Uses `LIKE` DB condition or "
"`contains` qs-expression."
msgstr ""
"Метод для частичного поиска по названию. Использует условие `LIKE` базы "
"данных или выражение `contains` queryset'а."

#: of vstutils.api.filters.name_filter:10
msgid "searching part of name."
msgstr "часть названия для поиска."

#: ../../backend.rst:140
msgid "Responses"
msgstr "Ответы (responses)"

#: ../../backend.rst:142
msgid ""
"DRF provides a standard set of variables whose names correspond to the "
"human-readable name of the HTTP code. For convenience, we have "
"dynamically wrapped it in a set of classes that have appropriate names "
"and additionally provides following capabilities:"
msgstr ""
"DRF предоставляет стандартный набор переменных, удобочитаемые названия "
"которых соответствуют HTTP-кодам ответов. Для удобства мы динамически "
"оборачиваем их в набор классов с соответствующими именами и дополнительно"
" обеспечиваем следующие возможности:"

#: ../../backend.rst:147
msgid ""
"String responses are wrapped in json like ``{ \"detail\": \"string "
"response\" }``."
msgstr ""
"Строковые ответы оборачиваются в json, например ``{ \"detail\": \"string "
"response\" }``."

#: ../../backend.rst:148
msgid "Attribute timings are kept for further processing in middleware."
msgstr "Тайминги атрибутов сохраняются для дальнейшей обработки в middleware."

#: ../../backend.rst:149
msgid ""
"Status code is set by class name (e.g. ``HTTP_200_OK`` or ``Response200``"
" has code 200)."
msgstr ""
"Код состояния задается именем класса (например ``HTTP_200_OK`` или "
"``Response200`` имеют код 200)."

#: ../../backend.rst:151
msgid "All classes inherit from:"
msgstr "Все классы наследуются от:"

#: of vstutils.api.responses.BaseResponseClass:1
msgid "API response class with default status code."
msgstr "Класс ответа API со стандартным кодом состояния."

#: of vstutils.api.responses.BaseResponseClass:3
msgid "HTTP status code."
msgstr "Код состояния HTTP."

#: of vstutils.api.responses.BaseResponseClass:6
#: vstutils.api.responses.BaseResponseClass:9
msgid "Response timings."
msgstr "Тайминги ответов."

#: ../../backend.rst:158
msgid "Middleware"
msgstr "Middleware"

#: ../../backend.rst:160
msgid ""
"By default, Django `supposes "
"<https://docs.djangoproject.com/en/4.1/topics/http/middleware/#writing-"
"your-own-middleware>`_ that a developer creates Middleware class "
"manually, but it's often a routine. The vstutils library offers a "
"convenient request handler class for elegant OOP development. Middleware "
"is used to process incoming requests and send responses before they reach"
" final destination."
msgstr ""
"По умолчанию Django `предполагает "
"<https://docs.djangoproject.com/en/3.2/topics/http/middleware/#writing-"
"your-own-middleware>`_, что разработчик создает класс Middleware вручную,"
" однако зачастую это рутинная задача. Библиотека vstutils предлагает "
"удобный класс request handler'а для изящной разработки в стиле ООП. "
"Middleware используются для обработки входящих запросов и отправления "
"ответов до того, как они достигнут получателя."

#: of vstutils.middleware.AsyncBaseMiddleware:1
msgid "Middleware base class for handling asynchronously:"
msgstr "Базовый класс middleware для обработки:"

#: of vstutils.middleware.AsyncBaseMiddleware:3
msgid "Incoming requests by :meth:`.AsyncBaseMiddleware.request_handler()`;"
msgstr "Входящие запросы от :meth:`.AsyncBaseMiddleware.request_handler()`;"

#: of vstutils.middleware.AsyncBaseMiddleware:4
msgid ""
"Outgoing response before any calling on server by "
":meth:`.AsyncBaseMiddleware.get_response_handler()`;"
msgstr ""
"Исходящий ответ перед любым обращением к серверу от "
":meth:`.AsyncBaseMiddleware.get_response_handler()`;"

#: of vstutils.middleware.AsyncBaseMiddleware:5
msgid "Outgoing responses by :meth:`.AsyncBaseMiddleware.handler()`."
msgstr "Исходящие ответы от :meth:`.AsyncBaseMiddleware.handler()`."

#: of vstutils.middleware.AsyncBaseMiddleware:7
#: vstutils.middleware.BaseMiddleware:7
msgid "Middleware must be added to `MIDDLEWARE` list in settings."
msgstr ""
"Middleware должен быть добавлен в список `MIDDLEWARE`, находящийся в "
"настройках."

#: of vstutils.middleware.BaseMiddleware:1
msgid "Middleware base class for handling:"
msgstr "Базовый класс middleware для обработки:"

#: of vstutils.middleware.BaseMiddleware:3
msgid "Incoming requests by :meth:`.BaseMiddleware.request_handler()`;"
msgstr "Входящие запросы от :meth:`.BaseMiddleware.request_handler()`;"

#: of vstutils.middleware.BaseMiddleware:4
msgid ""
"Outgoing response before any calling on server by "
":meth:`.BaseMiddleware.get_response_handler()`;"
msgstr ""
"Исходящий ответ перед любым обращением к серверу от "
":meth:`.BaseMiddleware.get_response_handler()`;"

#: of vstutils.middleware.BaseMiddleware:5
msgid "Outgoing responses by :meth:`.BaseMiddleware.handler()`."
msgstr "Исходящие ответы от :meth:`.BaseMiddleware.handler()`."

#: of vstutils.middleware.BaseMiddleware.get_response_handler:1
msgid ""
"Entrypoint for breaking or continuing request handling. This function "
"must return `django.http.HttpResponse` object or result of parent class "
"calling."
msgstr ""
"Точка входа для прерывания или продолжения обработки запроса. Эта функция"
" должна возвращать объект `django.http.HttpResponse` или результат вызова"
" родительского класса."

#: of vstutils.middleware.BaseMiddleware.get_response_handler:5
msgid ""
"Since the release of 5.3, it has been possible to write this method as "
"asynchronous. This should be used in cases where the middleware makes "
"queries to the database or cache. However, such a middleware should be "
"excluded from bulk requests."
msgstr ""
"Начиная с релиза 5.3, было возможно написать этот метод асинхронным. Это "
"должно использоваться в тех случаях, когда middleware делает запросы к "
"базе данных или к кэшу. Однако такой компонент middleware должен быть "
"исключен из bulk запросов."

#: of vstutils.middleware.BaseMiddleware.get_response_handler:10
msgid ""
"Never do asynchronous middleware in dependent chains. They are designed "
"to send independent requests to external sources."
msgstr ""
"Никогда не делайте асинхронным middleware в цепях зависимостей. Они "
"разработаны, чтобы отправлять независимые запросы к внешним ресурсам."

#: of vstutils.middleware.BaseMiddleware.get_response_handler:13
msgid ""
"Set ``async_capable`` to ``True`` and ``sync_capable`` to ``False`` for "
"such middleware."
msgstr ""
"Установите ``async_capable`` в ``True`` и ``sync_capable`` в ``False`` "
"для таких middleware."

#: of vstutils.middleware.BaseMiddleware.get_response_handler:16
#: vstutils.middleware.BaseMiddleware.request_handler:4
msgid "HTTP-request object which is wrapped from client request."
msgstr "Объект HTTP-запроса, созданный из клиентского запроса."

#: of vstutils.middleware.BaseMiddleware.handler:1
msgid "The response handler. Method to process responses."
msgstr "Handler ответа. Метод для обработки ответов."

#: of vstutils.middleware.BaseMiddleware.handler:4
msgid "HTTP-request object."
msgstr "Объект HTTP-запроса."

#: of vstutils.middleware.BaseMiddleware.handler:7
msgid "HTTP-response object which will be sended to client."
msgstr "Объект HTTP-ответа, который будет отправлен клиенту."

#: of vstutils.middleware.BaseMiddleware.handler:9
msgid "Handled response object."
msgstr "Обработанный объект ответа."

#: of vstutils.middleware.BaseMiddleware.request_handler:1
msgid "The request handler. Called before request is handled by a view."
msgstr "Handler запроса. Вызывается перед обработкой запроса view."

#: of vstutils.middleware.BaseMiddleware.request_handler:6
msgid "Handled request object."
msgstr "Обработанный объект запроса."

#: ../../backend.rst:169
msgid "Filter Backends"
msgstr "Filter Backend'ы"

#: ../../backend.rst:170
msgid ""
"`Filter Backends <https://www.django-rest-framework.org/api-"
"guide/filtering/#djangofilterbackend>`_ are used to modify model "
"queryset. To create custom filter backend to, (i.g. annotate model "
"queryset), you should inherit from "
":class:`vstutils.api.filter_backends.VSTFilterBackend` and override "
":meth:`vstutils.api.filter_backends.VSTFilterBackend.filter_queryset` and"
" in some cases "
":meth:`vstutils.api.filter_backends.VSTFilterBackend.get_schema_fields`."
msgstr ""
"`Filter Backend'ы <https://www.django-rest-framework.org/api-"
"guide/filtering/#djangofilterbackend>`_ используются для изменения "
"queryset'а модели. Чтобы создать пользовательский filter backend (т.е. "
"аннотировать queryset модели), следует наследоваться от "
":class:`vstutils.api.filter_backends.VSTFilterBackend` и переопределить "
":meth:`vstutils.api.filter_backends.VSTFilterBackend.filter_queryset`. В "
"некоторых случаях также стоит переопределить "
":meth:`vstutils.api.filter_backends.VSTFilterBackend.get_schema_fields`."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:1
msgid ""
"Backend that filters queryset by column from `deep_parent_field` property"
" of the model. Value for filtering must be provided in query param "
"`__deep_parent`."
msgstr ""
"Backend, фильтрующий queryset по колонке из свойства `deep_parent_field` "
"модели. Значение для фильтрации должно быть передано в query-параметре "
"`__deep_parent`."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:4
msgid "If param is missing then no filtering is applied."
msgstr "Если параметр отсутствует, то никакие фильтры не применяются."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:6
msgid ""
"If param is empty value (`/?__deep_parent=`) then objects with no parent "
"(the value of the field whose name is stored in the property "
"`deep_parent_field` of the model is None) returned."
msgstr ""
"Если параметр - это пустое значение (`/?__deep_parent=`), то возвращаются"
" объекты, не имеющие родителя (значение поля, чье имя хранится в свойстве"
" модели `deep_parent_field`, равно None)."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:9
msgid ""
"This filter backend and nested view is automatically added when model has"
" `deep_parent_field` property."
msgstr ""
"Этот filter backend и вложенное view автоматически добавляются в случае, "
"если модель имеет свойство `deep_parent_field`."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:27
msgid ""
"In example above if we add this model under path '`deep`', following "
"views will be created: `/deep/` and `/deep/{id}/deepnested/`."
msgstr ""
"В примере выше если мы добавим эту модель под путь '`deep`', следующие "
"view будут созданы: `/deep/` и `/deep/{id}/deepnested/`."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:30
msgid ""
"Filter backend can be used as `/deep/?__deep_parent=1` and will return "
"all `DeepNestedModel` objects whose parent's primary key is `1`."
msgstr ""
"Filter backend, который может быть использован как "
"`/deep/?__deep_parent=1`, и будет возвращать все объекты "
"`DeepNestedModel`, чьи родительские первичные ключи равны `1`."

#: of vstutils.api.filter_backends.DeepViewFilterBackend:33
msgid ""
"You can also use generic DRF views, for that you still must set "
"`deep_parent_field` to your model and manually add "
"`DeepViewFilterBackend` to `filter_backends <https://www.django-rest-"
"framework.org/api-guide/filtering/#djangofilterbackend>`_ list."
msgstr ""
"Вы также можете использовать generic-view DRF. Для этого все еще нужно "
"задать `deep_parent_field` вашей модели и вручную добавить "
"`DeepViewFilterBackend` в `список filter_backends <https://www.django-"
"rest-framework.org/api-guide/filtering/#djangofilterbackend>`_."

#: of vstutils.api.filter_backends.HideHiddenFilterBackend:1
msgid "Filter Backend that hides all objects with hidden=True from the queryset"
msgstr ""
"Filter Backend, убирающий из queryset все объекты, у которых задан "
"атрибут hidden=True."

#: of vstutils.api.filter_backends.HideHiddenFilterBackend.filter_queryset:1
msgid "Clear objects with hidden attr from queryset."
msgstr "Очищает объекты со атрибутом hidden из queryset'а."

#: of vstutils.api.filter_backends.SelectRelatedFilterBackend:1
msgid ""
"Filter Backend that will automatically call prefetch_related and "
"select_related on all relations in queryset."
msgstr ""
"Filter Backend, автоматически вызывающий prefetch_related и "
"select_related для всех отношений в queryset'е."

#: of vstutils.api.filter_backends.SelectRelatedFilterBackend.filter_queryset:1
msgid "Select+prefetch related in queryset."
msgstr "Выполняет select и prefetch в queryset'е. "

#: of vstutils.api.filter_backends.VSTFilterBackend:1
msgid "A base filter backend class to be inherited from. Example:"
msgstr "Базовый класс filter backend'а, от которого следует наследоваться. Пример:"

#: of vstutils.api.filter_backends.VSTFilterBackend:15
msgid ""
"In this example Filter Backend annotates time in current timezone to any "
"connected model's queryset."
msgstr ""
"В данном примере Filter Backend аннотирует время в текущем часовом поясе "
"в queryset'е используемой модели."

#: of vstutils.api.filter_backends.VSTFilterBackend:18
msgid ""
"In some cases it may be necessary to provide a parameter from a query of "
"request. To define this parameter in the schema, you must overload the "
"get_schema_operation_parameters function and specify a list of parameters"
" to use."
msgstr ""
"В некоторых случаях может быть необходимо передать параметр из query "
"запроса. Чтобы определить этот параметр в схеме, вы должны перегрузить "
"функцию get_schema_operation_parameters и указать список параметров, "
"которые нужно использовать."

#: of vstutils.api.filter_backends.VSTFilterBackend:54
msgid ""
"In this example Filter Backend annotates time in current timezone to any "
"connected model's queryset with field name from query `constant`."
msgstr ""
"В данном примере Filter Backend аннотирует время в текущем часовом поясе "
"в queryset'е используемой модели именем поля из query `constant`."

#: of
#: vstutils.api.filter_backends.VSTFilterBackend.get_schema_operation_parameters:1
msgid ""
"You can also make the filter controls available to the schema "
"autogeneration that REST framework provides, by implementing this method."
" The method should return a list of OpenAPI schema mappings."
msgstr ""
"Вы также можете создать элементы управления фильтрами доступными для "
"автогенерации схемы, предоставляемой REST-фреймворком, реализуя этот "
"метод. Метод должен возвращать список OpenAPI сопоставлений схемы."

#: ../../backend.rst:179
msgid "Celery"
msgstr "Celery"

#: ../../backend.rst:181
msgid ""
"Celery is a distributed task queue. It's used to execute some actions "
"asynchronously in a separate worker. For more details on Celery, check "
"it's official `docs <https://docs.celeryproject.org/en/stable/>`_. For "
"Celery related vstutils features to work, you need to specify `[rpc] "
"<config.html#rpc-settings>`_ and `[worker] <config.html#worker-"
"settings>`_ sections in settings.ini. Also you need to include extra "
"[rpc] requirements."
msgstr ""
"Celery - это распределенная очередь задач. Он используется для запуска "
"задач асинхронно в отдельном worker'е. Чтобы узнать больше о Celery, "
"смотрите официальную `документацию "
"<https://docs.celeryproject.org/en/stable/>`_. Для работы функций "
"vstutils, связанных с Celery, необходимо указать секции `[rpc] "
"<config.html#rpc-settings>`_ and `[worker] <config.html#worker-"
"settings>`_ в settings.ini. Также вам понадобится установить "
"дополнительные [rpc] зависимости."

#: ../../backend.rst:187
msgid "Tasks"
msgstr "Tasks"

#: of vstutils.tasks.TaskClass:1
msgid ""
"Wrapper for Celery BaseTask class. Usage is same as Celery standard "
"class, but you can execute task without creating instance with "
":meth:`TaskClass.do` method."
msgstr ""
"Обертка для класса BaseTask из Celery. Использование такое же, как и "
"стандартного класса, однако вы можете запустить задачу без необходимости "
"создавать экземпляр с помощью метода :meth:`TaskClass.do`."

#: of vstutils.tasks.TaskClass:21
msgid "Now you can call your task with various methods:"
msgstr "Теперь вы можете вызвать задачу несколькими методами:"

#: of vstutils.tasks.TaskClass:20
msgid "by executing ``Foo.do(*args, **kwargs)``"
msgstr "вызвав ``Foo.do(*args, **kwargs)``"

#: of vstutils.tasks.TaskClass:21
msgid ""
"get registered task instance like that - "
"app.tasks['full_path.to.task.class.Foo']"
msgstr ""
"получить зарегистрированный экземпляр задачи можно так: "
"app.tasks['full_path.to.task.class.Foo']"

#: of vstutils.tasks.TaskClass:23
msgid ""
"Also you can make your registered task periodic, by adding it to "
"CELERY_BEAT_SCHEDULE in settings.py:"
msgstr ""
"Также вы можете сделать вашу зарегистрированную задачу периодической. Для"
" этого нужно добавить ее CELERY_BEAT_SCHEDULE в settings.py:"

#: of vstutils.tasks.TaskClass.do:1
msgid ""
"Method which send signal to celery for start remote task execution. All "
"arguments will passed to the task :meth:`TaskClass.run` method."
msgstr ""
"Метод, который посылает сигнал запуска удаленной задаче celery. Все "
"аргументы будут переданы методу задачи :meth:`TaskClass.run`."

#: of vstutils.tasks.TaskClass.do:5
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`celery.result.AsyncResult\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`celery.result.AsyncResult\\``"

#: of vstutils.tasks.TaskClass.name:1
msgid ""
"property for proper Celery task execution, needed for "
":meth:`TaskClass.do` method to work"
msgstr ""
"свойство для правильного выполнения Celery-задачи, нужно для работы "
"метода :meth:`TaskClass.do`"

#: celery.app.task.Task.run:1 of
msgid "The body of the task executed by workers."
msgstr "Тело задачи выполняется worker'ами."

#: ../../backend.rst:193
msgid "Endpoint"
msgstr "Endpoint"

#: ../../backend.rst:195
msgid ""
"Endpoint view has two purposes: bulk requests execution and providing "
"OpenAPI schema."
msgstr ""
"Endpoint-view имеет две цели: выполнение bulk-запросов и предоставление "
"схемы OpenAPI."

#: ../../backend.rst:197
msgid ""
"Endpoint url is ``/{API_URL}/endpoint/``, for example value with default "
"settings is ``/api/endpoint/``."
msgstr ""
"URL endpoint'а - ``/{API_URL}/endpoint/``, например значение с "
"настройками по умолчанию - ``/api/endpoint/``."

#: ../../backend.rst:199
msgid "``API_URL`` can be changed in ``settings.py``."
msgstr "``API_URL`` может быть изменен в ``settings.py``."

#: of vstutils.api.endpoint.EndpointViewSet:1
msgid "Default API-endpoint viewset."
msgstr "Стандартный viewset API-endpoint'а."

#: of vstutils.api.endpoint.EndpointViewSet.get:1
msgid "Returns response with swagger ui or openapi json schema if ?format=openapi"
msgstr ""
"Возвращает ответ в виде Swagger UI или OpenAPI json-схему, если указан "
"?format=openapi"

#: of vstutils.api.endpoint.EndpointViewSet.get:5
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`django.http.response.HttpResponse\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`django.http.response.HttpResponse\\``"

#: of vstutils.api.endpoint.EndpointViewSet.get_client:1
msgid ""
"Returns test client and guarantees that if bulk request comes "
"authenticated than test client will be authenticated with the same user"
msgstr ""
"Возвращает тестового клиента, гарантируя, что если bulk-запрос выполнен "
"от аутентифицированного пользователя, то тестовый клиент будет "
"аутентифицирован тем же самым пользователем."

#: of vstutils.api.endpoint.EndpointViewSet.get_client:6
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`vstutils.api.endpoint.BulkClient\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`vstutils.api.endpoint.BulkClient\\``"

#: of vstutils.api.endpoint.EndpointViewSet.get_serializer:5
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`vstutils.api.endpoint.OperationSerializer\\``"
msgstr ":py:class:`vstutils.api.endpoint.OperationSerializer`"

#: of vstutils.api.endpoint.EndpointViewSet.get_serializer_context:1
msgid "Extra context provided to the serializer class."
msgstr "Дополнительный контекст, предоставляемый классу сериализатора."

#: of vstutils.api.endpoint.EndpointViewSet.get_serializer_context:4
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`dict\\``"
msgstr ""

#: of vstutils.api.endpoint.EndpointViewSet.operate:1
msgid "Method used to handle one operation and return result of it"
msgstr ""
"Метод, используемый для обработки одной операции и возвращающий ее "
"результат"

#: of vstutils.api.endpoint.EndpointViewSet.operate:7
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`typing.Tuple\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\, "
"\\:py\\:class\\:\\`typing.SupportsFloat\\`\\]`"
msgstr ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`typing.Tuple\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\, "
"\\:py\\:class\\:\\`typing.SupportsFloat\\`\\]`"

#: of vstutils.api.endpoint.EndpointViewSet.post:1
msgid "Execute transactional bulk request"
msgstr "Выполнить транзакционный bulk-запрос"

#: of vstutils.api.endpoint.EndpointViewSet.post:5
#: vstutils.api.endpoint.EndpointViewSet.put:5
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`vstutils.api.responses.BaseResponseClass\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`vstutils.api.responses.BaseResponseClass\\``"

#: of vstutils.api.endpoint.EndpointViewSet.put:1
msgid "Execute non transaction bulk request"
msgstr "Выполнить нетранзакционный bulk-запрос"

#: of vstutils.api.endpoint.OperationSerializer:1
msgid "One operation serializer class."
msgstr "Класс сериализатора одной операции."

#: ../../backend.rst:206
msgid "Bulk requests"
msgstr "Bulk-запросы"

#: ../../backend.rst:208
msgid ""
"Bulk request allows you send multiple requests to api at once, it accepts"
" json list of operations."
msgstr ""
"Bulk-запрос позволяет вам отсылать несколько запросов к api в одном. Он "
"принимает json-список операций."

#: ../../backend.rst:211
msgid "Method"
msgstr "Метод"

#: ../../backend.rst:211
msgid "Transactional (all operations in one transaction)"
msgstr "Транзакционный (все операции в одной транзакции)"

#: ../../backend.rst:211
msgid "Synchronous (operations executed one by one in given order)"
msgstr "Синхронный (операции выполняются одна за другой в указанном порядке)"

#: ../../backend.rst:215
msgid "``PUT /{API_URL}/endpoint/``"
msgstr "``PUT /{API_URL}/endpoint/``"

#: ../../backend.rst:215 ../../backend.rst:219
msgid "NO"
msgstr "НЕТ"

#: ../../backend.rst:215 ../../backend.rst:217
msgid "YES"
msgstr "ДА"

#: ../../backend.rst:217
msgid "``POST /{API_URL}/endpoint/``"
msgstr "``POST /{API_URL}/endpoint/``"

#: ../../backend.rst:219
msgid "``PATCH /{API_URL}/endpoint/``"
msgstr "``PATCH /{API_URL}/endpoint/``"

#: ../../backend.rst:222
msgid ""
"Parameters of one operation (required parameter marked by "
":superscript:`*`):"
msgstr ""
"Параметры одной операции (обязательный параметр помечается "
":superscript:`*`):"

#: ../../backend.rst:224
msgid "``method``:superscript:`*` - http method of request"
msgstr "``method``:superscript:`*` - http-метод запроса"

#: ../../backend.rst:225
msgid "``path``:superscript:`*` - path of request, can be ``str`` or ``list``"
msgstr ""
"``path``:superscript:`*` - путь запроса, может быть типа ``str`` или  "
"``list``"

#: ../../backend.rst:226
msgid "``data`` - data to send"
msgstr "``data`` - данные для отправки"

#: ../../backend.rst:227
msgid "``query`` - query parameters as ``str``"
msgstr "``query`` - query-параметры типа ``str``"

#: ../../backend.rst:228
msgid ""
"``let`` - string with name of variable (used for access to response "
"result in templates)"
msgstr ""
"``let`` - строка с именем переменной (используется для доступа к "
"результату ответа в шаблонах)"

#: ../../backend.rst:229
msgid ""
"``headers`` - ``dict`` with headers which will be sent (key - header's "
"name, value - header's value string)."
msgstr ""
"``headers`` - словарь с заголовками, которые будут переданы в запрос "
"(ключ - имя заголовка, значение - строка со значением заголовка."

#: ../../backend.rst:230
msgid ""
"``version`` - ``str`` with specified version of api, if not provided then"
" ``VST_API_VERSION`` will be used"
msgstr ""
"``version`` - ``str`` с указанной версией api, если не задано, то "
"используется ``VST_API_VERSION``"

#: ../../backend.rst:234
msgid ""
"In previous versions header's names must follow `CGI specification "
"<https://www.w3.org/CGI/>`_ (e.g., ``CONTENT_TYPE``, "
"``GATEWAY_INTERFACE``, ``HTTP_*``)"
msgstr ""
"В предыдущих версиях имена заголовков должны были соответствовать "
"`спецификации CGI <https://www.w3.org/CGI/>`_ (например, "
"``CONTENT_TYPE``, ``GATEWAY_INTERFACE``, ``HTTP_*``)."

#: ../../backend.rst:238
msgid ""
"Since version 5.3 and after migrate to Django 4 names must follow HTTP "
"specification instead of CGI."
msgstr ""
"Начиная с версии 5.3 и после миграции на Django 4 имена должны "
"соответствовать HTTP спецификации вместо CGI."

#: ../../backend.rst:240
msgid ""
"In any request parameter you can insert result value of previous "
"operations (``<<{OPERATION_NUMBER or LET_VALUE}[path][to][value]>>``), "
"for example:"
msgstr ""
"В любой параметр запроса вы можете вставить результат значения предыдущей"
" операции (``<<{OPERATION_NUMBER or LET_VALUE}[path][to][value]>>``), "
"например:"

#: ../../backend.rst:250
msgid "Result of bulk request is json list of objects for operation:"
msgstr "Результат bulk-запроса - это список json-объектов, описывающих операцию:"

#: ../../backend.rst:252
msgid "``method`` - http method"
msgstr "``method`` - http-метод"

#: ../../backend.rst:253
msgid "``path`` - path of request, always str"
msgstr "``path`` - путь запроса, всегда строка"

#: ../../backend.rst:254
msgid "``data`` - data that needs to be sent"
msgstr "``data`` - данные, которые нужно отправить"

#: ../../backend.rst:255
msgid "``status`` - response status code"
msgstr "``status`` - код состояния ответа"

#: ../../backend.rst:257
msgid ""
"Transactional bulk request returns ``502 BAG GATEWAY`` and does rollback "
"after first failed request."
msgstr ""
"Транзакционный bulk-запрос возвращает ``502 BAG GATEWAY`` и делает откат "
"к состоянию до запроса после первого неудачного запроса."

#: ../../backend.rst:260
msgid ""
"If you send non-transactional bulk request, you will get ``200`` status "
"and must validate statuses on each operation responses."
msgstr ""
"Если вы отправили нетранзакционный bulk-запрос, вы получите код 200 и "
"должны будете проверить статус каждого ответа операции отдельно."

#: ../../backend.rst:264
msgid "OpenAPI schema"
msgstr "Схема OpenAPI"

#: ../../backend.rst:266
msgid "Request on ``GET /{API_URL}/endpoint/`` returns Swagger UI."
msgstr "Запрос на ``GET /{API_URL}/endpoint/`` возвращает Swagger UI."

#: ../../backend.rst:268
msgid ""
"Request on ``GET /{API_URL}/endpoint/?format=openapi`` returns OpenAPI "
"schema in json format. Also you can specify required version of schema "
"using ``version`` query parameter (e.g., ``GET "
"/{API_URL}/endpoint/?format=openapi&version=v2``)."
msgstr ""
"Запрос на ``GET /{API_URL}/endpoint/?format=openapi`` возвращает схему "
"OpenAPI в формате json. Также вы можете указать нужную версию схемы, "
"используя query-параметр ``version`` "

#: ../../backend.rst:271
msgid ""
"To change the schema after generating and before sending to user use "
"hooks. Define one or more function, each taking 2 named arguments:"
msgstr ""
"Для изменения схемы после ее генерации и перед отправкой пользователю "
"используйте хуки. Напишите одну или несколько функций, каждая из которых "
"принимает 2 именованных аргумента:"

#: ../../backend.rst:274
msgid "``request`` - user request object."
msgstr "``request`` - объект запроса пользователя."

#: ../../backend.rst:275
msgid "``schema`` - ordered dict with OpenAPI schema."
msgstr "``schema`` - ordered dict, содержащий схему OpenAPI."

#: ../../backend.rst:278
msgid ""
"Sometimes hooks may raise an exception; in order to keep a chain of data "
"modification, such exceptions are handled. The changes made to the schema"
" before the exception however, are saved."
msgstr ""
"Иногда хуки могут выбросить исключение; чтобы сохранить цепочку "
"модификации данных, такие исключения обрабатываются. Изменения, сделанные"
" в схеме перед выбросом исключения, в любом случае сохраняются."

#: ../../backend.rst:287
msgid "Example hook:"
msgstr "Пример хука:"

#: ../../backend.rst:289
msgid ""
"To connect hook(s) to your app add function import name to the "
"``OPENAPI_HOOKS`` list in ``settings.py``"
msgstr ""
"Чтобы присоединить хук(-и) к вашему приложению, добавьте строку импорта "
"вашей функции в список ``OPENAPI_HOOKS`` в ``settings.py``"

#: ../../backend.rst:299
msgid "Testing Framework"
msgstr "Фреймворк для тестирования"

#: ../../backend.rst:301
msgid ""
"VST Utils Framework includes a helper in base test case class and "
"improves support for making API requests. That means if you want make "
"bulk request to endpoint you don't need create and init test client, but "
"just need to call:"
msgstr ""
"Фреймворк VST Utils включает в себя хелпер в базовом тест-кейс классе и "
"улучшает поддержку механизма отправки запросов. На практике это означает,"
" что для отправления bulk-запроса на endpoint нет необходимости создавать"
" и инициализировать test client, а можно сразу делать запрос."

#: ../../backend.rst:312
msgid "Creating test case"
msgstr "Создание тест-кейса"

#: ../../backend.rst:313
msgid ""
"``test.py`` module contains test case classes based on "
":class:`vstutils.tests.BaseTestCase`. At the moment, we officially "
"support two styles of writing tests: classic and simple query wrappers "
"with run check and runtime optimized bulk queries with manual value "
"checking."
msgstr ""
"Модуль ``test.py`` содержит классы тест-кейсов, основанные на "
":class:`vstutils.tests.BaseTestCase`. На текущий момент мы официально "
"поддерживаем два подхода к написанию тестов: классический и с помощью "
"оберток запросов с проверкой выполнения и runtime-оптимизацией "
"bulk-запросов с ручной проверкой значений."

#: ../../backend.rst:320
msgid "Simple example with classic tests"
msgstr "Простой пример с классическими тестами"

#: ../../backend.rst:322
msgid ""
"For example, if you have api endpoint like ``/api/v1/project/`` and model"
" Project you can write test case like this:"
msgstr ""
"Например, если у вас endpoint вида ``/api/v1/project/`` и модель Project,"
" вы можете написать такой тест:"

#: ../../backend.rst:357
msgid ""
"This example demonstrates functionality of default test case class. "
"Default projects are initialized for the fastest and most efficient "
"result. We recommend to divide tests for different entities into "
"different classes. This example demonstrate classic style of testing, but"
" you can use bulks in your test cases."
msgstr ""
"Этот пример демонстрирует функциональность стандартного тест-кейс класса."
" Проекты по умолчанию инициализируются для получения наиболее быстрого и "
"эффективного результата. Рекомендуется разбивать тесты на разные сущности"
" в разные классы. В данном примере показан классический подход к "
"тестированию, однако вы можете использовать bulk-запросы в ваших тестах."

#: ../../backend.rst:365
msgid "Bulk requests in tests"
msgstr "Bulk-запросы в тестах"

#: ../../backend.rst:367
msgid ""
"Bulk query system is well suited for testing and executing valid queries."
" Previous example could be rewritten as follows:"
msgstr ""
"Система bulk-запросов хорошо подходит для тестирования и запуска валидных"
" запросов. Предыдущий пример может быть переписан так:"

#: ../../backend.rst:417
msgid ""
"In this case, you have more code, but your tests are closer to GUI "
"workflow, because vstutils-projects uses ``/api/endpoint/`` for requests."
" Either way, bulk queries are much faster due to optimization; Testcase "
"execution time is less comparing to non-bulk requests."
msgstr ""
"В этом случае хотя мы и получили больше кода, однако тесты стали ближе к "
"процессу использования приложения в графическом интерфейсе, потому что "
"проекты vstutils используют ``/api/endpoint/`` для выполнения запросов. "
"Так или иначе, bulk-запросы выполняются заметно быстрее благодаря "
"оптимизации, которую они выполняют под капотом. Время выполнения теста, в"
" котором используется bulk меньше по сравнению с тестом, использующим "
"стандартный механизм."

#: ../../backend.rst:424
msgid "Test case API"
msgstr "API тест-кейса"

#: of vstutils.tests.BaseTestCase:1
msgid "Main test case class extends :class:`django.test.TestCase`."
msgstr "Основной тест-кейс класс расширяет :class:`django.test.TestCase`."

#: of vstutils.tests.BaseTestCase.assertCheckDict:1
msgid ""
"Fail if the two fields in dicts are unequal as determined by the '==' "
"operator. Checks if first not contains or not equal field in second"
msgstr ""
"Падает, если два поля в словаре не равны по определению оператора '=='. "
"Проверяет первое поле на пустоту и на равенство со вторым полем"

#: of vstutils.tests.BaseTestCase.assertCount:1
msgid "Calls :func:`len` over ``iterable`` and checks equality with ``count``."
msgstr "Вызывает :func:`len` через ``iterable`` и проверяет равенство с ``count``."

#: of vstutils.tests.BaseTestCase.assertCount:4
msgid "any iterable object which could be sended to :func:`len`."
msgstr "любой итерируемый объект, который может быть отправлен в :func:`len`."

#: of vstutils.tests.BaseTestCase.assertCount:6
msgid "expected result."
msgstr "ожидаемый результат."

#: of vstutils.tests.BaseTestCase.assertCount:8
msgid "error message"
msgstr "сообщение об ошибке"

#: of vstutils.tests.BaseTestCase.assertRCode:1
msgid "Fail if response code is not equal. Message is response body."
msgstr "Падает, если коды ответа не совпадают. Сообщением явялется тело ответа."

#: of vstutils.tests.BaseTestCase.assertRCode:4
msgid "response object"
msgstr "объект ответа"

#: of vstutils.tests.BaseTestCase.assertRCode:7
msgid "expected code"
msgstr "ожидаемый код"

#: of vstutils.tests.BaseTestCase.bulk:1
msgid ""
"Makes non-transactional bulk request and asserts status code (default is "
"200)"
msgstr ""
"Делает нетранзакционный bulk-запрос и проверяет код состояния (200 по "
"умолчанию)"

#: of vstutils.tests.BaseTestCase.bulk:4
#: vstutils.tests.BaseTestCase.bulk_transactional:4
#: vstutils.tests.BaseTestCase.endpoint_call:5
msgid "request data"
msgstr "данные запроса"

#: of vstutils.tests.BaseTestCase.bulk:6
#: vstutils.tests.BaseTestCase.bulk_transactional:6
#: vstutils.tests.BaseTestCase.endpoint_call:9
msgid "http status to assert"
msgstr "http-статус для проверки"

#: of vstutils.tests.BaseTestCase.bulk:8
#: vstutils.tests.BaseTestCase.bulk_transactional:8
msgid "named arguments for :meth:`.get_result`"
msgstr "именованные аргументы для :meth:`.get_result`"

#: of vstutils.tests.BaseTestCase.bulk:9
#: vstutils.tests.BaseTestCase.bulk_transactional:9
#: vstutils.tests.BaseTestCase.endpoint_call:11
#: vstutils.tests.BaseTestCase.get_result:26
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.List\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:data\\:\\`typing.Any\\`\\]\\]\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`bytes\\`\\, \\:py\\:class\\:\\`bytearray\\`\\, "
"\\:py\\:class\\:\\`typing.Dict\\`\\, "
"\\:py\\:class\\:\\`typing.Sequence\\`\\\\ "
"\\\\\\[\\:py\\:data\\:\\`typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.List\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:data\\:\\`typing.Any\\`\\]\\]\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`bytes\\`\\, \\:py\\:class\\:\\`bytearray\\`\\]\\]\\]`"
msgstr ""
":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.List\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:data\\:\\`typing.Any\\`\\]\\]\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`bytes\\`\\, \\:py\\:class\\:\\`bytearray\\`\\, "
"\\:py\\:class\\:\\`typing.Dict\\`\\, "
"\\:py\\:class\\:\\`typing.Sequence\\`\\\\ "
"\\\\\\[\\:py\\:data\\:\\`typing.Union\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.List\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`typing.Dict\\`\\\\ "
"\\\\\\[\\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:data\\:\\`typing.Any\\`\\]\\]\\, \\:py\\:class\\:\\`str\\`\\, "
"\\:py\\:class\\:\\`bytes\\`\\, \\:py\\:class\\:\\`bytearray\\`\\]\\]\\]`"

#: of vstutils.tests.BaseTestCase.bulk:10
#: vstutils.tests.BaseTestCase.bulk_transactional:10
#: vstutils.tests.BaseTestCase.endpoint_call:12
msgid "bulk response"
msgstr "bulk-ответ"

#: of vstutils.tests.BaseTestCase.bulk_transactional:1
msgid "Make transactional bulk request and assert status code (default is 200)"
msgstr ""
"Делает транзакционный bulk-запрос и проверяет код состояния (200 по "
"умолчанию)"

#: of vstutils.tests.BaseTestCase.details_test:1
msgid ""
"Test for get details of model. If you setup additional named arguments, "
"the method check their equality with response data. Uses "
":meth:`.get_result` method."
msgstr ""
"Тест на получение детальной записи модели. При задании дополнительных "
"именованных аргументов метод проверит их на равенство с полученными "
"данными. Использует метод :meth:`.get_result`."

#: of vstutils.tests.BaseTestCase.details_test:6
msgid ""
"url to detail record. For example: ``/api/v1/project/1/`` (where ``1`` is"
" uniq id of project). You can use :meth:`.get_url` for building url."
msgstr ""
"url детальной записи. Например: ``/api/v1/project/1/`` (где ``1`` - это "
"уникальный идентификатор проекта). Вы можете использовать "
":meth:`.get_url` для построения url."

#: of vstutils.tests.BaseTestCase.details_test:9
msgid "params that's should be checked (key - field name, value - field value)."
msgstr "параметры для проверки (ключ - имя поля, значение - значение поля)."

#: of vstutils.tests.BaseTestCase.endpoint_call:1
msgid ""
"Makes request to endpoint and asserts response status code if specified "
"(default is 200). Uses :meth:`.get_result` method for execution."
msgstr ""
"Делает запрос на endpoint и проверяет код состояния ответа, если он задан"
" (200 по умолчанию). Использует :meth:`.get_result`."

#: of vstutils.tests.BaseTestCase.endpoint_call:7
msgid "http request method"
msgstr "метод http-запроса"

#: of vstutils.tests.BaseTestCase.endpoint_call:10
msgid "dict with query data (working only with `get`)"
msgstr "словарь с данными query (работает только с `get`)"

#: of vstutils.tests.BaseTestCase.endpoint_schema:1
msgid "Make request to schema. Returns dict with swagger data."
msgstr "Делает запрос на схему. Возвращает словарь с данными swagger."

#: of vstutils.tests.BaseTestCase.endpoint_schema:3
msgid "API version for schema parser."
msgstr "Версия API для парсера схемы."

#: of vstutils.tests.BaseTestCase.get_count:1
msgid ""
"Simple wrapper over :meth:`.get_model_filter` which returns counter of "
"items."
msgstr ""
"Простая обертка над :meth:`.get_model_filter`, возвращающая счетчик "
"объектов."

#: of vstutils.tests.BaseTestCase.get_count:4
#: vstutils.tests.BaseTestCase.get_model_class:4
#: vstutils.tests.BaseTestCase.get_model_filter:5
msgid ""
"string which contains model name (if attribute ``model`` is set to the "
"test case class), module import, ``app.ModelName`` or "
":class:`django.db.models.Model`."
msgstr ""
"строка, содержащая имя модели (если атрибут ``model`` установлен в класс "
"тест-кейса), импорт модуля, ``app.ModelName`` или "
":class:`django.db.models.Model`."

#: of vstutils.tests.BaseTestCase.get_count:8
#: vstutils.tests.BaseTestCase.get_model_filter:9
msgid "named arguments to :meth:`django.db.models.query.QuerySet.filter`."
msgstr "именованные аргументы для :meth:`django.db.models.query.QuerySet.filter`."

#: of vstutils.tests.BaseTestCase.get_count:9
msgid "number of instances in database."
msgstr "количество объектов в базе данных."

#: of vstutils.tests.BaseTestCase.get_model_class:1
msgid "Getting model class by string or return model arg."
msgstr "Получение класса модели по строке или получение аргумента модели."

#: of vstutils.tests.BaseTestCase.get_model_class:7
msgid "Model class."
msgstr "Класс модели."

#: of vstutils.tests.BaseTestCase.get_model_filter:1
msgid ""
"Simple wrapper over :meth:`.get_model_class` which returns filtered "
"queryset from model."
msgstr ""
"Простая обертка над :meth:`.get_model_class`, возвращающая фильтрованный "
"queryset из модели."

#: of vstutils.tests.BaseTestCase.get_result:1
msgid ""
"Executes and tests response code on request with returning parsed result "
"of request. The method uses the following procedure:"
msgstr ""
"Запускает и проверяет код ответа для запроса, возвращает распарсенный "
"результат запроса. Данный метод действует следующим образом:"

#: of vstutils.tests.BaseTestCase.get_result:4
msgid ""
"Test client authorization (with :attr:`.user` which creates in "
":meth:`.setUp`)."
msgstr ""
"Тестирует авторизацию клиента (вместе с :attr:`.user`, который создается "
"в :meth:`.setUp`)."

#: of vstutils.tests.BaseTestCase.get_result:5
msgid "Executing a request (sending args and kwargs to request method)."
msgstr ""
"Выполняет запрос (отправляет аргументы и именованные аргументы в метод "
"запроса)."

#: of vstutils.tests.BaseTestCase.get_result:6
msgid "Parsing the result (converts json string to python-object)."
msgstr "Парсит результат (конвертирует строку json в объект python)."

#: of vstutils.tests.BaseTestCase.get_result:7
msgid ""
"Checking the http status code with :meth:`.assertRCode` (if you have not "
"specified it, the code will be selected in accordance with the request "
"method from the standard set :attr:`.std_codes`)."
msgstr ""
"Проверяет http-код состояния с помощью :meth:`.assertRCode` (если вы его "
"не указали, будет выбран соответствующий код для выполняемого метода из "
"стандартного набора :attr:`.std_codes`)."

#: of vstutils.tests.BaseTestCase.get_result:11
msgid "Logout client."
msgstr "Деавторизация пользователя."

#: of vstutils.tests.BaseTestCase.get_result:12
msgid "Return parsed result."
msgstr "Возвращение распарсенного результата."

#: of vstutils.tests.BaseTestCase.get_result:15
msgid "request type (methods from Client cls): get, post etc."
msgstr "тип запроса (методы из Client cls): get, post и т.д."

#: of vstutils.tests.BaseTestCase.get_result:17
msgid ""
"requested url string or tuple for :meth:`.get_url`. You can use "
":meth:`.get_url` for url building or setup it as full string."
msgstr ""
"запрошенный url в виде строки или кортежа для :meth:`.get_url`. Вы можете"
" использовать :meth:`.get_url` для построения url или задать его полной "
"строкой."

#: of vstutils.tests.BaseTestCase.get_result:20
msgid "expected return code from request."
msgstr "ожидаемый код возврата из запроса."

#: of vstutils.tests.BaseTestCase.get_result:21
msgid "execute force login and logout on each call. Default is ``True``."
msgstr ""
"выполнение авторизации и деавторизации перед каждым вызовом. По умолчанию"
" ``True``."

#: of vstutils.tests.BaseTestCase.get_result:23
msgid "extra-args for Client class request method."
msgstr "дополнительные аргументы для метода запроса класса Client."

#: of vstutils.tests.BaseTestCase.get_result:25
msgid "extra-kwargs for Client class request method."
msgstr "дополнительные именованные аргументы для метода запроса класса Client."

#: of vstutils.tests.BaseTestCase.get_result:27
msgid "result of request."
msgstr "результат запроса."

#: of vstutils.tests.BaseTestCase.get_url:1
msgid ""
"Function for creating url path based on ``VST_API_URL`` and "
"``VST_API_VERSION`` settings. Without arguments returns path to default "
"version of api."
msgstr ""
"Функция для создания пути url, основанного на настройках ``VST_API_URL`` "
"и ``VST_API_VERSION``. Без аргументов возвращает путь к версии api по "
"умолчанию."

#: of vstutils.tests.BaseTestCase.get_url:4
#: vstutils.tests.BaseTestCase.random_name:4
msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`str\\``"
msgstr ""

#: of vstutils.tests.BaseTestCase.get_url:5
msgid "string like ``/api/v1/.../.../`` where ``...`` is args of function."
msgstr "строка вида ``/api/v1/.../.../`` где ``...`` - аргументы функции."

#: of vstutils.tests.BaseTestCase.list_test:1
msgid ""
"Test for get list of models. Checks only list count. Uses "
":meth:`.get_result` method."
msgstr ""
"Тест на получение списка моделей. Проверяет только количество записей. "
"Использует метод :meth:`.get_result`."

#: of vstutils.tests.BaseTestCase.list_test:4
msgid ""
"url to abstract layer. For example: ``/api/v1/project/``. You can use "
":meth:`.get_url` for building url."
msgstr ""
"url абстрактного слоя. Например: ``/api/v1/project/``. Вы можете "
"использовать :meth:`.get_url` для построения url."

#: of vstutils.tests.BaseTestCase.list_test:7
msgid "count of objects in DB."
msgstr "количество объектов в базе данных."

#: ../../docstring of vstutils.tests.BaseTestCase.models:1
msgid "Attribute with default project models module."
msgstr "Атрибут с модулем моделей проекта по умолчанию."

#: of vstutils.tests.BaseTestCase.patch:1
msgid "Simple :func:`unittest.mock.patch` class-method wrapper."
msgstr "Простая обертка над :func:`unittest.mock.patch`."

#: of vstutils.tests.BaseTestCase.patch:4
#: vstutils.tests.BaseTestCase.patch_field_default:10
msgid ""
":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`typing.ContextManager\\`\\\\"
" \\\\\\[\\:py\\:class\\:\\`unittest.mock.Mock\\`\\]`"
msgstr ""
":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`typing.ContextManager\\`\\\\"
" \\\\\\[\\:py\\:class\\:\\`unittest.mock.Mock\\`\\]`"

#: of vstutils.tests.BaseTestCase.patch_field_default:1
msgid ""
"This method helps to path default value in the model's field. It's very "
"useful for DateTime fields where :func:`django.utils.timezone.now` is "
"used in defaults."
msgstr ""
"Этот метод помогает найти значение по умолчанию в поле модели. Он очень "
"полезен для полезен для полей DateTime, где по умолчанию установлено "
":func:`django.utils.timezone.now`."

#: of vstutils.tests.BaseTestCase.random_name:1
msgid "Simple function which returns uuid1 string."
msgstr "Простая функция, возвращающая строку uuid1."

#: ../../docstring of vstutils.tests.BaseTestCase.std_codes:1
msgid ""
"Default http status codes for different http methods. Uses in "
":meth:`.get_result`"
msgstr ""
"Стандартный http-код для различных http-методов. Использует "
":meth:`.get_result`"

#: of vstutils.tests.BaseTestCase.user_as:1
msgid ""
"Context for execute bulk or something as user. The context manager "
"overrides ``self.user`` in TestCase and revert this changes on exit."
msgstr ""
"Контекст для выполнения bulk или чего-либо еще от некоторого "
"пользователя. Контекстный менеджер переопределяет ``self.user`` в "
"TestCase'е и возвращает изменения после выхода из него."

#: of vstutils.tests.BaseTestCase.user_as:6
msgid "new user object for execution."
msgstr "новый объект пользователя, от которого будет выполнение."

#: ../../backend.rst:431
msgid "Utils"
msgstr "Утилиты"

#: ../../backend.rst:433
msgid ""
"This is tested set of development utilities. Utilities include a "
"collection of code that will be useful in one way or another for "
"developing the application. Vstutils uses mosts of these functions under "
"the hood."
msgstr ""
"Здесь представлен проверенный набор утилит для разработки. Они включают в"
" себя код, который так или иначе будет полезен по мере разработки. "
"Vstutils использует большинство из этих функций под капотом."

#: of vstutils.utils.BaseEnum:1
msgid ""
"BaseEnum extends :class:`enum.Enum` class and used to create enum-like "
"objects that can be used in django serializers or django models."
msgstr ""
"BaseEnum расширяет класс :class:`enum.Enum` и используется для создания "
"enum-подобных объектов, которые могут использоваться "
"django-сериализаторами или django-моделями."

#: of vstutils.utils.BaseEnum:25
msgid ""
"For special cases, when value must be in lower or upper case, you can "
"setup value as ``BaseEnum.LOWER`` or ``BaseEnum.UPPER``. But in default "
"cases we recommend use ``BaseEnum.SAME`` for memory optimization."
msgstr ""
"вы можете установить значение как ``BaseEnum.LOWER`` или "
"``BaseEnum.UPPER``. Однако в обычных случаях рекомендуется использовать "
"``BaseEnum.SAME`` для оптимизации памяти."

#: of vstutils.utils.BaseVstObject:1
msgid ""
"Default mixin-class for custom objects which needed to get settings and "
"cache."
msgstr ""
"Стандартная миксина для пользовательских объектов, которым нужны "
"настройки или кэш."

#: of vstutils.utils.BaseVstObject.get_django_settings:1
msgid "Get params from Django settings."
msgstr "Получить параметры из настроек Django."

#: of vstutils.utils.BaseVstObject.get_django_settings:4
msgid "name of param"
msgstr "название параметра"

#: of vstutils.utils.BaseVstObject.get_django_settings:7
msgid "default value of param"
msgstr "значение параметра по умолчанию"

#: of vstutils.utils.BaseVstObject.get_django_settings:9
msgid "Param from Django settings or default."
msgstr "Параметр из настроек Django."

#: of vstutils.utils.Dict:1
msgid "Wrapper over `dict` which return JSON on conversion to string."
msgstr "Обертка над `dict`, возвращающая JSON при преобразовании в строку."

#: of vstutils.utils.Executor:1
msgid ""
"Command executor with realtime output write and line handling. By default"
" and by design executor initialize string attribute ``output`` which will"
" be modified by ``+=`` operator with new lines by "
":meth:`.Executor.write_output` procedure. Override the method if you want"
" change behavior."
msgstr ""
"Исполнитель команд с выводом и обработкой строк в реальном времени. По "
"умолчанию и замыслу исполнитель инициализирует строковый атрибут "
"``output``, который будет изменен оператором ``+=`` с новыми строками с "
"помощью метода :meth:`.Executor.write_output`. Переопределите метод, если"
" нужно изменить поведение."

#: of vstutils.utils.Executor:6
msgid ""
"Executor class supports periodically (0.01 sec) handling process and "
"execute some checks by overriding :meth:`.Executor.working_handler` "
"procedure method. If you want disable this behavior override the method "
"by None value or use :class:`.UnhandledExecutor`."
msgstr ""
"Класс исполнителя поддерживает периодеческий (0.01 сек) процесс обработки"
" и выполняет некоторые проверки путем переопределения метода "
":meth:`.Executor.working_handler`. Если вы хотите отключить это "
"поведение, переопределите метод значением None или используйте "
":class:`.UnhandledExecutor`."

#: of subprocess.CalledProcessError:1
msgid ""
"Raised when run() is called with check=True and the process returns a "
"non-zero exit status."
msgstr ""
"Выбрасывается, когда run() вызывается вместе с check=True и процесс "
"возвращает код возврата отличный от нуля."

#: of subprocess.CalledProcessError:6
msgid "Attributes:"
msgstr "Атрибуты:"

#: of subprocess.CalledProcessError:5
msgid "cmd, returncode, stdout, stderr, output"
msgstr "cmd, returncode, stdout, stderr, output"

#: of vstutils.utils.Executor.CalledProcessError.stdout:1
msgid "Alias for output attribute, to match stderr"
msgstr "Псевдоним для выходного атрибута, чтобы соответствовать stderr"

#: of vstutils.utils.Executor.aexecute:1
msgid "Executes commands and outputs its result. Asynchronous implementation."
msgstr "Выполняет команды и выводит их результат. Асинхронная реализация."

#: of vstutils.utils.Executor.aexecute:4 vstutils.utils.Executor.execute:4
#: vstutils.utils.Executor.post_execute:4 vstutils.utils.Executor.pre_execute:4
msgid "-- list of cmd command and arguments"
msgstr "-- список cmd-команд и аргументов"

#: of vstutils.utils.Executor.aexecute:6 vstutils.utils.Executor.execute:6
#: vstutils.utils.Executor.post_execute:6 vstutils.utils.Executor.pre_execute:6
msgid "-- workdir for executions"
msgstr "-- рабочая директория"

#: of vstutils.utils.Executor.aexecute:8 vstutils.utils.Executor.execute:8
#: vstutils.utils.Executor.post_execute:8 vstutils.utils.Executor.pre_execute:8
msgid "-- extra environment variables which overrides defaults"
msgstr ""
"-- дополнительные переменные окружения, которые перезаписывают переменные"
" по умолчанию"

#: of vstutils.utils.Executor.aexecute:9 vstutils.utils.Executor.execute:9
msgid "-- string with full output"
msgstr "-- строка, содержащая полный вывод"

#: of vstutils.utils.Executor.execute:1
msgid "Executes commands and outputs its result."
msgstr "Выполняет команды и выводит их результат."

#: of vstutils.utils.Executor.post_execute:1
msgid "Runs after execution end."
msgstr "Запускается после завершения выполнения."

#: of vstutils.utils.Executor.post_execute:10
msgid "-- return code of executed process"
msgstr "-- код возврата выполненного процесса"

#: of vstutils.utils.Executor.pre_execute:1
msgid "Runs before execution starts."
msgstr "Запускатеся перед началом выполнения."

#: of vstutils.utils.Executor.working_handler:1
msgid "Additional handler for executions."
msgstr "Дополнительный обработчик для запусков."

#: of vstutils.utils.Executor.working_handler:4
msgid "running process"
msgstr "запущенный процесс"

#: of vstutils.utils.Executor.write_output:2
msgid "-- line from command output"
msgstr "-- строка вывода команды"

#: of vstutils.utils.Executor.write_output:4 vstutils.utils.tmp_file.write:6
msgid "None"
msgstr "None"

#: of vstutils.utils.KVExchanger:1
msgid ""
"Class for transmit data using key-value fast (cache-like) storage between"
" services. Uses same cache-backend as Lock."
msgstr ""
"Класс для передачи данных с использованием быстрого (кэш-подобного) "
"хранилища между сервисами. Использует тот же самый кэш-бэкенд, что и "
"Lock."

#: of vstutils.utils.Lock:1
msgid ""
"Lock class for multi-jobs workflow. Based on :class:`.KVExchanger`. The "
"Lock allows only one thread to enter the part that's locked and shared "
"between apps using one locks cache (see also `[locks] <config.html#locks-"
"settings>`_)."
msgstr ""
"Класс Lock предназначен для работы с несколькими задачами. Основан на "
":class:`.KVExchanger`. Lock позволяет только одному потоку войти в "
"заблокированную и совместно используемую часть между приложениями, "
"использующими один кэш блокировок (см. также `[locks] <config.html#locks-"
"settings>`_)."

#: of vstutils.utils.Lock:7
msgid "-- unique id for lock."
msgstr "-- уникальный id блокировки."

#: of vstutils.utils.Lock:10
msgid "-- lock additional info. Should be any boolean True value."
msgstr ""
"-- дополнительная информация о блокировке. Должна быть значением, равным "
"True при приведении к булевому типу."

#: of vstutils.utils.Lock:12
msgid "-- time to wait lock.release. Default 1 sec."
msgstr "-- время ожидания lock.release. По умолчанию 1 секунда."

#: of vstutils.utils.Lock:15
msgid "-- message for AcquireLockException error."
msgstr "-- сообщение для ошибки AcquireLockException."

#: of vstutils.utils.Lock:19
msgid "Used django.core.cache lib and settings in `settings.py`"
msgstr "Использует django.core.cache и настройки в `settings.py`"

#: of vstutils.utils.Lock:20
msgid "Have Lock.SCHEDULER and Lock.GLOBAL id"
msgstr "Имеет Lock.SCHEDULER и Lock.GLOBAL id"

#: of vstutils.utils.Lock:47
msgid "Another example without context manager:"
msgstr "Другой пример без использования контекстного менеджера:"

#: of vstutils.utils.Lock.AcquireLockException:1
msgid "Exception which will be raised on unreleased lock."
msgstr "Исключение, которое будет выброшено в случае неосвобождения блокировки."

#: of vstutils.utils.ModelHandlers:1
msgid ""
"Handlers for some models like 'INTEGRATIONS' or 'REPO_BACKENDS'. Based on"
" :class:`.ObjectHandlers` but more specific for working with models. All "
"handlers backends get by first argument model object."
msgstr ""
"Обработчики для некоторых моделей, таких как 'INTEGRATIONS' или "
"'REPO_BACKENDS'. Основан на :class:`.ObjectHandlers`, но больше "
"сосредоточен на работе с моделями. Все handler-бэкенды получают объект "
"модели по первому аргументу."

#: of vstutils.utils.ModelHandlers:5 vstutils.utils.tmp_file:4
msgid "**Attributes**:"
msgstr "**Атрибуты**:"

#: of vstutils.utils.ModelHandlers:7
msgid "-- dict of objects like: ``{<name>: <backend_class>}``"
msgstr "-- словарь объектов, например ``{<name>: <backend_class>}``"

#: of vstutils.utils.ModelHandlers:9
msgid "-- names of supported backends"
msgstr "-- имена поддерживаемых бэкендов"

#: of vstutils.utils.ModelHandlers:11
msgid "-- supported backends classes"
msgstr "-- поддерживаемые классы бэкендов"

#: of vstutils.utils.ModelHandlers:14 vstutils.utils.ObjectHandlers:34
#: vstutils.utils.URLHandlers:13
msgid "type name for backends.Like name in dict."
msgstr "Имя для бэкенда, наподобие ключа в словаре."

#: of vstutils.utils.ModelHandlers.get_object:2
msgid "-- string name of backend"
msgstr "-- строковое имя бэкенда"

#: of vstutils.utils.ModelHandlers.get_object:3
msgid "str"
msgstr "str"

#: of vstutils.utils.ModelHandlers.get_object:5
msgid "-- model object"
msgstr "-- объект модели"

#: of vstutils.utils.ModelHandlers.get_object:7
msgid "backend object"
msgstr "объект бэкенда"

#: of vstutils.utils.ObjectHandlers:1
msgid "Handlers wrapper for get objects from some settings structure."
msgstr ""
"Обертка обработчиков для получения объектов из некоторой структуры "
"настроек."

#: of vstutils.utils.ObjectHandlers.backend:1
msgid "Get backend class"
msgstr "Получить класс бэкенда"

#: of vstutils.utils.ObjectHandlers.backend:4
msgid "-- name of backend type"
msgstr "-- имя типа бэкенда"

#: of vstutils.utils.ObjectHandlers.backend:6
msgid "class of backend"
msgstr "класс бэкенда"

#: of vstutils.utils.Paginator:1
msgid "Class for fragmenting the query for small queries."
msgstr "Класс для разбиения запроса на небольшие запросы."

#: of vstutils.utils.SecurePickling:1
msgid "Secured pickle wrapper by Vigenère cipher."
msgstr "Защищенная pickle-обертка с использованием шифра Виженера."

#: of vstutils.utils.SecurePickling:5
msgid "Do not use it with untrusted transport anyway."
msgstr "В любом случае не используйте его с ненадежным средством передачи."

#: of vstutils.utils.URLHandlers:1
msgid ""
"Object handler for GUI views. Uses `GUI_VIEWS` from settings.py. Based on"
" :class:`.ObjectHandlers` but more specific to urlpatterns."
msgstr ""
"Обработчик объекта для views в графическом интерфейсе. Использует "
"`GUI_VIEWS` из settings.py. Основан на :class:`.ObjectHandlers`, но "
"больше сосредоточен на urlpatterns."

#: of vstutils.utils.URLHandlers.get_object:1
msgid "Get url object tuple for urls.py"
msgstr "Получить объект кортежа url'ов для urls.py"

#: of vstutils.utils.URLHandlers.get_object:4
msgid "url regexp from"
msgstr "регулярное выражение url'а"

#: of vstutils.utils.URLHandlers.get_object:7
msgid "overridden args"
msgstr "переопределенные аргументы"

#: of vstutils.utils.URLHandlers.get_object:9
msgid "overridden kwargs"
msgstr "переопределенные kwarg'и"

#: of vstutils.utils.URLHandlers.get_object:10
msgid "url object"
msgstr "объект url'а"

#: of vstutils.utils.UnhandledExecutor:1
msgid "Class based on :class:`.Executor` but disables `working_handler`."
msgstr ""
"Класс, основанный на :class:`.Executor`, но с выключенным "
"`working_handler`."

#: of vstutils.utils.add_in_vary:1
msgid "Adds provided value to Vary header if not added already"
msgstr "Добавляет указанное значение в заголовок Vary, если оно еще не добавлено"

#: of vstutils.utils.apply_decorators:1
msgid "Decorator which apply list of decorators on method or class."
msgstr "Декоратор, оборачивающий метод или класс в список декораторов."

#: of vstutils.utils.classproperty:1
msgid "Decorator which makes class method as class property."
msgstr "Декоратор, который из метода класса делает классовый property."

#: of vstutils.utils.classproperty:23
msgid "function for getting an attribute value."
msgstr "Функция для получения значения атрибута."

#: of vstutils.utils.classproperty:25
msgid "function for setting an attribute value."
msgstr "Функция для установки значения атрибута."

#: of vstutils.utils.create_view:1
msgid ""
"A simple function for getting the generated view by standard means, but "
"with overloaded meta-parameters. This method can completely get rid of "
"the creation of proxy models."
msgstr ""
"Простая функция для получения сгенерированного view стандартными "
"средствами, но с перегруженными мета-параметрами. Этот метод позволяет "
"полностью отказаться от создания прокси-моделей."

#: of vstutils.utils.create_view:20
msgid ""
"This method is also recommended in cases where there is a problem of "
"recursive imports."
msgstr ""
"Данный метод также рекомендуется применять в случаях, когда имеются "
"проблемы с рекурсивными импортами."

#: of vstutils.utils.create_view:23
msgid ""
"This function is oldstyle and will be deprecated in future versions. Use "
"native call of method :meth:`vstutils.models.BModel.get_view_class`."
msgstr ""
"Эта функция олдскульная и будет объявлена устаревшей в будущих версиях. "
"Используйте встроенный вызов метода "
":meth:`vstutils.models.BModel.get_view_class`."

#: of vstutils.utils.create_view:28
msgid ""
"Model class with `.get_view_class` method. This method also has "
":class:`vstutils.models.BModel`."
msgstr ""
"Класс модели с методом `.get_view_class`. Этот метод также имеет "
":class:`vstutils.models.BModel`."

#: of vstutils.utils.decode:1
msgid "Decode string from encoded by Vigenère cipher."
msgstr "Декодировать строку из закодированной шифром Виженера."

#: of vstutils.utils.decode:4 vstutils.utils.encode:4
msgid "-- secret key for encoding"
msgstr "-- секретный ключ для кодирования"

#: of vstutils.utils.decode:7
msgid "-- encoded string for decoding"
msgstr "-- закодированная строка для декодирования"

#: of vstutils.utils.decode:9
msgid "-- decoded string"
msgstr "-- декодированная строка"

#: of vstutils.utils.deprecated:1
msgid ""
"This is a decorator which can be used to mark functions as deprecated. It"
" will result in a warning being emitted when the function is used."
msgstr ""
"Данный декоратор может быть использован, чтобы пометить функцию как "
"устаревшую. После этого ее вызов приведет к выдаче соответствующего "
"предупреждения."

#: of vstutils.utils.deprecated:6
msgid ""
"any callable that will be wrapped and will issue a deprecation warning "
"when called."
msgstr ""
"любой вызываемый объект, который будет обернут и выдаст предупреждение об"
" устаревании при вызове."

#: of vstutils.utils.encode:1
msgid "Encode string by Vigenère cipher."
msgstr "Закодировать строку шифром Виженера."

#: of vstutils.utils.encode:7
msgid "-- clear value for encoding"
msgstr "-- чистое значение для кодирования"

#: of vstutils.utils.encode:9
msgid "-- encoded string"
msgstr "-- закодированная строка"

#: of vstutils.utils.get_render:1
msgid "Render string from template."
msgstr "Рендеринг строки из шаблона."

#: of vstutils.utils.get_render:4
msgid "-- full template name"
msgstr "-- полное название шаблона"

#: of vstutils.utils.get_render:7
msgid "-- dict of rendered vars"
msgstr "-- словарь переменных для рендеринга"

#: of vstutils.utils.get_render:10
msgid "-- translation for render. Default 'en'."
msgstr "-- перевод для рендера. По умолчанию 'en'."

#: of vstutils.utils.get_render:12
msgid "-- rendered string"
msgstr "-- отрендеренная строка"

#: of vstutils.utils.lazy_translate:1
msgid ""
"The ``lazy_translate`` function has the same behavior as "
":func:`.translate`, but wraps it in a lazy promise."
msgstr ""
"Функция ``lazy_translate`` имеет то же поведение, что и "
":func:`.translate`, но оборачивает его в lazy promise."

#: of vstutils.utils.lazy_translate:3
msgid ""
"This is very useful, for example, for translating error messages in class"
" attributes before the language code is known."
msgstr ""
"Это полезно, например, для перевода сообщений об ошибках в атрибутах "
"класса, когда целевой язык еще неизвестен."

#: of vstutils.utils.lazy_translate:7 vstutils.utils.translate:8
msgid "Text message which should be translated."
msgstr "Текстовое сообщение, которое должно быть переведено."

#: of vstutils.utils.list_to_choices:1
msgid "Method to create django model choices from flat list of values."
msgstr ""
"Метод, предназначенный для создания django-модели choices из плоского "
"списка значений."

#: of vstutils.utils.list_to_choices:4
msgid "list of flat values."
msgstr "плоский список значений."

#: of vstutils.utils.list_to_choices:6
msgid "casting type of returned mapping"
msgstr "тип приведения возвращаемого сопоставления"

#: of vstutils.utils.list_to_choices:7
msgid "list of tuples from `items_list` values"
msgstr "список кортежей из значений `items_list`"

#: of vstutils.utils.model_lock_decorator:1
msgid "Decorator for functions where 'pk' kwarg exist for lock by id."
msgstr "Декоратор для функций, где kwarg 'pk' существует для блокировки по id."

#: of vstutils.utils.model_lock_decorator:5
msgid "On locked error raised ``Lock.AcquireLockException``"
msgstr "В случае ошибки блокировки выбрасывает ``Lock.AcquireLockException``"

#: of vstutils.utils.model_lock_decorator:6
msgid "Method must have and called with ``pk`` named arg."
msgstr "Метод должен иметь и быть вызван вместе с именованным аргументом ``pk``."

#: of vstutils.utils.raise_context:1
msgid "Context for exclude exceptions."
msgstr "Контекст для игнорирования исключений."

#: of vstutils.utils.raise_context_decorator_with_default:1
msgid "Context for exclude errors and return default value."
msgstr "Контекст для предотвращения исключений и возврата значения по умолчанию."

#: of vstutils.utils.raise_misconfiguration:1
msgid ""
"Helper function that raises an `ImproperlyConfigured` exception if a "
"condition is not met."
msgstr ""
"Вспомогательная функция, которая вызывает исключение "
"`ImproperlyConfigured`, если условие не выполнено."

#: of vstutils.utils.raise_misconfiguration:3
msgid ""
"This function acts as a replacement for the `assert` statement, providing"
" clearer error handling in cases where the application configuration is "
"incorrect."
msgstr ""
"Эта функция заменяет оператор `assert`, обеспечивая более четкую "
"обработку ошибок в случаях, когда конфигурация приложения неверна."

#: of vstutils.utils.raise_misconfiguration:7
msgid ""
"A value of any type that can be evaluated as a boolean. If the boolean "
"evaluation returns False, the exception will be raised."
msgstr ""
"Значение любого типа, которое может быть оценено как логическое. Если "
"логическая оценка возвращает False, будет вызвано исключение."

#: of vstutils.utils.raise_misconfiguration:13
msgid ""
"An optional message to include in the exception. If not provided, the "
"exception will be raised without a message."
msgstr ""
"Необязательное сообщение, которое будет включено в исключение. Если оно "
"не указано, исключение будет вызвано без сообщения."

#: of vstutils.utils.raise_misconfiguration:18
msgid ""
"Raised if the boolean evaluation of the `ok` parameter is False, "
"indicating a misconfiguration in the application."
msgstr ""
"Вызывается, если логическая оценка параметра `ok` равна False, что "
"указывает на ошибку конфигурации в приложении."

#: of vstutils.utils.raise_misconfiguration:22
msgid ""
"This function does not return any value. It either passes silently or "
"raises an exception."
msgstr ""
"Эта функция не возвращает никакого значения. Она либо выполняется без "
"ошибок, либо вызывает исключение."

#: of vstutils.utils.redirect_stdany:1
msgid "Context for redirect any output to own stream."
msgstr "Контекст для перенаправления любого вывода в свой поток."

#: of vstutils.utils.redirect_stdany:4
msgid "On context returns stream object."
msgstr "В контексте возвращает объект потока."

#: of vstutils.utils.redirect_stdany:5
msgid "On exit returns old streams."
msgstr "При выходе возвращает старые потоки."

#: of vstutils.utils.send_mail:1
msgid ""
"Wrapper over :func:`django.core.mail.send_mail` which provide additional "
"named arguments."
msgstr ""
"Обертка над :func:`django.core.mail.send_mail`, предоставляющая "
"дополнительные именованные аргументы."

#: of vstutils.utils.send_template_email:1
msgid ""
"Function executing sync or async email sending; according `sync` argument"
" and settings variable \"RPC_ENABLED\". If you don't set settings for "
"celery or don't have celery it sends synchronously mail. If celery is "
"installed and configured and `sync` argument of the function is set to "
"`False`, it sends asynchronously email."
msgstr ""
"Функция, выполняющая синхронную или асинхронную отправку электронной "
"почты в зависимости от аргумента `sync` и переменной настроек "
"\"RPC_ENABLED\". Вы можете использовать эту функцию для отправки "
"сообщений, она отправляет сообщение асинхронно или синхронно. Если вы не "
"установили настройки для Celery или не установили Celery, она отправляет "
"письмо синхронно. Если установлен и настроен Celery, и аргумент `sync` "
"функции установлен на `False`, она отправляет электронное письмо "
"асинхронно."

#: of vstutils.utils.send_template_email:7
msgid "argument for determining how send email, asynchronously or synchronously"
msgstr ""
"аргумент для определения, как отправлять электронную почту, асинхронно "
"или синхронно."

#: of vstutils.utils.send_template_email:8
#: vstutils.utils.send_template_email_handler:5
msgid "mail subject."
msgstr "тема письма."

#: of vstutils.utils.send_template_email:9
#: vstutils.utils.send_template_email_handler:9
msgid "list of strings or single string, with email addresses of recipients"
msgstr ""
"список строк или отдельная строка с адресами электронной почты "
"получателей."

#: of vstutils.utils.send_template_email:10
#: vstutils.utils.send_template_email_handler:11
msgid ""
"relative path to template in `templates` directory, must include "
"extension in file name."
msgstr ""
"относительный путь к шаблону в директории `templates`, должен включать "
"расширение имени файла."

#: of vstutils.utils.send_template_email:11
#: vstutils.utils.send_template_email_handler:13
msgid "dictionary with context for rendering message template."
msgstr "словарь с контекстом для отображения шаблона сообщения."

#: of vstutils.utils.send_template_email_handler:1
msgid ""
"Function for email sending. The function convert recipient to list and "
"set context before sending if it possible."
msgstr ""
"Функция для отправки электронной почты. Функция преобразует получателя в "
"список и устанавливает контекст перед отправкой, если это возможно."

#: of vstutils.utils.send_template_email_handler:7
msgid "sender that be setup in email."
msgstr "адрес отправителя, который будет указан в письме."

#: of vstutils.utils.send_template_email_handler:15
msgid "additional named arguments for `send_mail`"
msgstr "дополнительные именованные аргументы для `send_mail`."

#: of vstutils.utils.send_template_email_handler:16
msgid "Number of emails sent."
msgstr "Количество отправленных электронных писем."

#: of vstutils.utils.tmp_file:1
msgid "Temporary file with name generated and auto removed on close."
msgstr ""
"Временный файл с сгенерированным и автоматически именем и удаленный по "
"закрытии"

#: of vstutils.utils.tmp_file:7
msgid "-- string to write in tmp file."
msgstr "-- строка для записи во временный файл."

#: of vstutils.utils.tmp_file:10
msgid "-- file open mode. Default 'w'."
msgstr "-- режим открытия файла. По умолчанию `w`."

#: of vstutils.utils.tmp_file:13
msgid "-- buffer size for tempfile.NamedTemporaryFile"
msgstr "-- размер буфера для tempfile.NamedTemporaryFile."

#: of vstutils.utils.tmp_file:16
msgid "-- other kwargs for tempfile.NamedTemporaryFile"
msgstr "-- другие именованные аргументы для tempfile.NamedTemporaryFile."

#: of vstutils.utils.tmp_file.write:1
msgid "Write to file and flush"
msgstr "Записать в файл и очистить буфер"

#: of vstutils.utils.tmp_file.write:4
msgid "-- writable string"
msgstr "-- записываемая строка"

#: of vstutils.utils.tmp_file_context:1
msgid ""
"Context object for work with tmp_file. Auto close on exit from context "
"and remove if file still exist."
msgstr ""
"Объект контекста для работы с tmp_file. Автоматическое закрывается при "
"выходе из контекста и удаляется файл, если он все еще существует."

#: of vstutils.utils.tmp_file_context:5
msgid "This context manager over :class:`.tmp_file`"
msgstr "Данный менеджер контекста работает с :class:`.tmp_file`"

#: of vstutils.utils.translate:1
msgid ""
"The ``translate`` function supports translation message dynamically with "
"standard i18n vstutils'es mechanisms usage."
msgstr ""
"Функция ``translate`` поддерживает динамический перевод сообщения с "
"использованием стандартных механизмов i18n в vstutils."

#: of vstutils.utils.translate:4
msgid ""
"Uses :func:`django.utils.translation.get_language` to get the language "
"code and tries to get the translation from the list of available ones."
msgstr ""
"Использует функцию :func:`django.utils.translation.get_language` для "
"получения кода языка и пытается получить перевод из списка доступных."

#: ../../backend.rst:445
msgid "Integrating Web Push Notifications"
msgstr "Интеграция Web Push-уведомлений"

#: ../../backend.rst:447
msgid ""
"Web push notifications are an effective way to engage users with real-"
"time messaging. To integrate web push notifications in your VSTUtils "
"project, follow these steps:"
msgstr ""
"Web-уведомления - это эффективный способ взаимодействия с пользователями "
"с помощью реального времени. Чтобы интегрировать web-уведомления в ваш "
"проект VSTUtils, выполните следующие шаги:"

#: ../../backend.rst:450
msgid ""
"**Configuration**: First, include the ``vstutils.webpush`` module in the "
"``INSTALLED_APPS`` section of your ``settings.py`` file. This enables the"
" web push functionality provided by VSTUtils. Additionally, configure the"
" necessary settings as described in the web push settings section (see "
":ref:`here<webpush-settings>` for details)."
msgstr ""
"**Конфигурация**: Во-первых, включите модуль ``vstutils.webpush`` в "
"разделе ``INSTALLED_APPS`` вашего файла ``settings.py``. Это позволяет "
"использовать функциональность web-уведомлений, предоставляемую VSTUtils. "
"Кроме того, настройте необходимые параметры, как описано в разделе "
"настроек web-уведомлений (см. :ref:`здесь<webpush-settings>` для "
"подробностей)."

#: ../../backend.rst:453
msgid ""
"**Creating Notifications**: To create a web push notification, you need "
"to define a class that inherits from either "
":class:`vstutils.webpush.BaseWebPush` or "
":class:`vstutils.webpush.BaseWebPushNotification`. VSTUtils automatically"
" detects and utilizes web push classes defined in the ``webpushes`` "
"module of all ``INSTALLED_APPS``. Below is an example that illustrates "
"how to implement custom web push classes:"
msgstr ""
"**Создание уведомлений**: Чтобы создать web-уведомление, вам нужно "
"определить класс, который наследуется от "
":class:`vstutils.webpush.BaseWebPush` или "
":class:`vstutils.webpush.BaseWebPushNotification`. VSTUtils автоматически"
" обнаруживает и использует классы web-уведомлений, определенные в модуле "
"``webpushes`` всех ``INSTALLED_APPS``. Ниже приведен пример, "
"иллюстрирующий, как реализовать пользовательские классы web-уведомлений:"

#: ../../backend.rst:463
msgid "This example contains three classes:"
msgstr "Этот пример содержит три класса:"

#: ../../backend.rst:465
msgid "`TestWebPush`: Sends notifications to all subscribed users."
msgstr "`TestWebPush`: Отправляет уведомления всем подписанным пользователям."

#: ../../backend.rst:466
msgid "`TestNotification`: Targets notifications to specific users."
msgstr "`TestNotification`: Направляет уведомления конкретным пользователям."

#: ../../backend.rst:467
msgid ""
"`StaffOnlyNotification`: Restricts notifications to staff users only. "
"Sometimes you may want to allow only some users to subscribe on specific "
"notifications."
msgstr ""
"`StaffOnlyNotification`: Ограничивает уведомления только для сотрудников."
" Иногда вы можете хотеть разрешить подписку на конкретные уведомления "
"только некоторым пользователям."

#: ../../backend.rst:469
msgid ""
"**Sending Notifications**: To dispatch a web push notification, invoke "
"the ``send`` or ``send_in_task`` method on an instance of your web push "
"class. For instance, to send a notification using `TestNotification`, you"
" can do the following:"
msgstr ""
"**Отправка уведомлений**: Чтобы отправить web-уведомление, вызовите метод"
" ``send`` или ``send_in_task`` на экземпляре вашего класса "
"web-уведомления. Например, чтобы отправить уведомление с использованием "
"`TestNotification`, вы можете сделать следующее:"

#: ../../backend.rst:484
msgid ""
"The asynchronous sending of web push notifications (using methods like "
"``send_in_task``) requires a configured Celery setup in your project, as "
"it relies on Celery tasks \"under the hood\". Ensure that Celery is "
"properly set up and running to utilize asynchronous notification "
"dispatching."
msgstr ""
"Асинхронная отправка web-уведомлений (с использованием методов, таких как"
" ``send_in_task``) требует настроенной конфигурации Celery в вашем "
"проекте, поскольку она полагается на задачи Celery \"под капотом\". "
"Убедитесь, что Celery правильно настроен и работает, чтобы использовать "
"асинхронную отправку уведомлений."

#: ../../backend.rst:489
msgid ""
"By following these steps, you can fast integrate and utilize web push "
"notifications in projects with VSTUtils."
msgstr ""
"Следуя этим шагам, вы быстро сможете интегрировать и использовать "
"web-уведомления в проектах с VSTUtils."

#: ../../backend.rst:493
msgid "Troubleshooting"
msgstr "Устранение и поиск неисправностей"

#: ../../backend.rst:495
msgid ""
"Vstutils makes some errors more readable for common users and provides "
"special error codes for administration to simplify troubleshooting."
msgstr ""
"Vstutils делает некоторые ошибки более читаемыми для обычных "
"пользователей и предоставляет специальные коды ошибок для администрации, "
"чтобы упростить поиск и устранение проблем."

#: ../../backend.rst:497
msgid "``VE100-VE199`` - Database related errors."
msgstr "``VE100-VE199`` - Ошибки, связанные с базой данных."

#: ../../backend.rst:498
msgid ""
"``VE100`` - Integrity error code. Used when "
"``django.db.utils.IntegrityError`` appears."
msgstr ""
"``VE100`` - Код ошибки целостности. Используется при появляении "
"``django.db.utils.IntegrityError``."

